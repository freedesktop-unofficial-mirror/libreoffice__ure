/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: PolyStructTest.idl,v $
 *
 *  $Revision: 1.4 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-07 22:56:16 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/

#include "com/sun/star/uno/XInterface.idl"

module com { module sun { module star { module lib { module uno {
module bridges { module javaremote {

enum TestEnum { VALUE1 = 100, VALUE2 = -100 };

struct TestPolyStruct<T> { T member; };

interface TestTransport {
    TestPolyStruct<boolean> transportBoolean([in] TestPolyStruct<boolean> arg);
    TestPolyStruct<byte> transportByte([in] TestPolyStruct<byte> arg);
    TestPolyStruct<short> transportShort([in] TestPolyStruct<short> arg);
    TestPolyStruct<long> transportLong([in] TestPolyStruct<long> arg);
    TestPolyStruct<hyper> transportHyper([in] TestPolyStruct<hyper> arg);
    TestPolyStruct<float> transportFloat([in] TestPolyStruct<float> arg);
    TestPolyStruct<double> transportDouble([in] TestPolyStruct<double> arg);
    TestPolyStruct<char> transportChar([in] TestPolyStruct<char> arg);
    TestPolyStruct<string> transportString([in] TestPolyStruct<string> arg);
    TestPolyStruct<type> transportType([in] TestPolyStruct<type> arg);
    TestPolyStruct<any> transportAny([in] TestPolyStruct<any> arg);
    TestPolyStruct<TestEnum> transportEnum([in] TestPolyStruct<TestEnum> arg);
};

}; }; }; }; }; }; };
