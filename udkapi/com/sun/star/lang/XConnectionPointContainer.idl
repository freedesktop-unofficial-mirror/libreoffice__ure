/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XConnectionPointContainer.idl,v $
 *
 *  $Revision: 1.14 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-09 15:47:22 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/
#ifndef __com_sun_star_lang_XConnectionPointContainer_idl__ 
#define __com_sun_star_lang_XConnectionPointContainer_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 

//============================================================================= 
 
module com {  module sun {  module star {  module lang {  
 
 published interface XConnectionPoint; 
 
//============================================================================= 
 
// DocMerge from xml: interface com::sun::star::lang::XConnectionPointContainer
/** makes it possible to locate a specific connection point
    for a specified UIK and manages a sequence of connections points.
    
    <p>An implementation of this interface <strong>must</strong>
    support the <type scope="com::sun::star::uno">XWeak</type> interface. 
    Look at the language binding for a superclass or something else.  </p>

    @see XConnectionPoint 
    @see com::sun::star::uno::XWeak
 */
published interface XConnectionPointContainer: com::sun::star::uno::XInterface
{ 
    //------------------------------------------------------------------------- 
     
    // DocMerge from idl: method com::sun::star::lang::XConnectionPointContainer::getConnectionPointTypes
    /** @returns 
            a sequence of all outgoing types; specifies which are supported 
            by this connectable object.
     */
    sequence<type> getConnectionPointTypes(); 
 
    //------------------------------------------------------------------------- 
     
    // DocMerge from idl: method com::sun::star::lang::XConnectionPointContainer::queryConnectionPoint
    /** @returns  
            an <type>XConnectionPoint</type> interface of a 
            connection point for a specified type if that type 
            describes a supported outgoing interface. It is 
            <const>NULL</const> on failure of the call. 
                 
        @param aType 
            specifies the connection point's type.
     */
    XConnectionPoint queryConnectionPoint( [in] type aType ); 
 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::lang::XConnectionPointContainer::advise
    /** creates a connection between this object and a
        client's sink, where the sink implements the outgoing
        interface specified with ID.
        
        <p>The interface is advised under the connection point you
        get with <code>queryConnectionPoint( id )</code>.  </p>

        <p>Use this method instead of the advise method at the
        connection point, only if you know that the broadcaster supports
        the outgoing interface, or if it does not matter that the
        outgoing interface is not supported.  </p>

        @see XConnectionPoint::advise
     */
    [oneway] void advise( [in] type aType, 
             [in] com::sun::star::uno::XInterface xListener ); 
 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::lang::XConnectionPointContainer::unadvise
    /** terminates a notification previously set up with
        advise at the container or at the suitable connection point.

        @see XConnectionPoint::unadvise
     */
    [oneway] void unadvise( [in] type aType, 
             [in] com::sun::star::uno::XInterface xListener ); 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
/*============================================================================= 
 
=============================================================================*/ 
#endif 
