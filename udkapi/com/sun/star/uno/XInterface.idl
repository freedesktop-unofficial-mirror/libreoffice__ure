/*************************************************************************
 *
 *  $RCSfile: XInterface.idl,v $
 *
 *  $Revision: 1.6 $
 *
 *  last change: $Author: mi $ $Date: 2002-10-03 12:44:31 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/
#ifndef __com_sun_star_uno_XInterface_idl__ 
#define __com_sun_star_uno_XInterface_idl__ 
 
#ifndef __com_sun_star_uno_Uik_idl__ 
#include <com/sun/star/uno/Uik.idl> 
#endif 
 
 
//============================================================================= 
 
 module com {  module sun {  module star {  module uno {  
 
//============================================================================= 
 
// DocMerge from xml: interface com::sun::star::uno::XInterface
/** base interface of all UNO interfaces

    <p> It provides lifetime control by reference counting and the
    possibility of querying for other
    interfaces of the same logical object.
    
    
    <p>
    "Logical Object" in this case means that the
    interfaces actually can be supported by internal (e.g. aggregated) physical objects.</p>

    <p> Deriving from this interface is mandatory for all UNO interfaces.
    <p> Each language binding (Java, C++, StarBasic, Python, ... ) may
    provide a different mapping of this interface, please look into the language
    dependent documention.

    <p> The UNO object does not export the state of the reference count (acquire() and
        release() do not have return values). In general, also the UNO object itself
        should not make any assumption on the concrete value of the reference count
        (except on the transition from one to zero ).
    
 */
interface XInterface
{
    /** queries for a new interface to an existing UNO object.
        <p>
        The queryInterface() method is the entry point to obtain other interfaces which
        are exported by the object. The caller asks the implementation of the object,
        if it supports the interface specified by the type argument. The call may either
        return with a interface reference of the requested type or with a void any.

        <p>
        There are certain specifications, a queryInterface() implementation must not violate.
        <p>
        1) If queryInterface on a specific object has once returned a valid interface reference
          for a given type, it must return a valid reference for any successive queryInterface
          calls on this object for the same type.
        <p>
        2) If queryInterface on a specific object has once returned a null reference
        for a given type, it must always return a null reference for the same type.
        <p>
        3) If queryInterface on a reference A returns reference B, queryInterface on
        B for Type A must return interface reference A or calls made on the returned
        reference must be equivalent to calls made on reference A.
        <p>
        4) If queryInterface on a reference A returns reference B, queryInterface on
        A and B for XInterface must return the same interface reference (object identity).

        <p> The reason for the strong specification is, that a Uno Runtime Environment (URE)
        may choose to cache queryInterface() calls.
        <p> As mentioned above, certain language bindings may map this function differently also
        with different specifications, please visit the language dependent specification for it.
        The current C++ binding sticks to the specification state
        <p>
        The rules mentioned above are basically identical to the rules of QueryInterface in MS COM.

        @param aType a UNO interface type, for which an object reference shall be obtained.
        @return an interface reference in case the requested interface is supported by the object,
                a void any otherwise.
     */
    any queryInterface( [in] type aType ); 
 
    //------------------------------------------------------------------------- 
    /** increases the reference counter by one.

        <p>When you have called acquire() on the
        UNO object, it is often said, that you have a reference or a hard reference
        to the object.

        <p>
        It is only allowed to invoke a method on an UNO object, when you keep
        a hard reference to it.

        <p> Every call to acquire must be followed by a corresponding call to release
        some time later, which may eventually lead to the destruction of the object.
     */
    [oneway] void acquire(); 
 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::uno::XInterface::release
    /** decreases the reference counter by one.
        <p>When the reference counter reaches 0, the object gets deleted.</p>
        <p>Calling release() on the object is often called releasing
        or clearing the reference to an object.
     */
    [oneway] void release(); 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
/*============================================================================= 
 
    $Log: not supported by cvs2svn $
    Revision 1.5.16.1  2002/06/05 16:38:42  jbu
    documentation reviewed
    
    Revision 1.5  2001/03/16 15:10:43  jsc
    remove interfaceheader with uik and remove [const] in method definitions
    
    Revision 1.4  2000/11/08 12:29:00  mi
    moved from api
    
    Revision 1.1.1.1  2000/09/18 23:36:18  hjs
    initial import
    
    Revision 1.5  2000/09/11 11:53:04  mi
    documentation merged from XML
     
    Revision 1.3  2000/02/23 11:41:19  mi 
    results from proofreading in layouted version 
     
    Revision 1.2  2000/01/14 11:12:14  jsc 
    #71616# Typumstellung 
     
    Revision 1.1.1.1  1999/11/11 09:48:46  jsc 
    new 
     
 
=============================================================================*/ 
#endif 
