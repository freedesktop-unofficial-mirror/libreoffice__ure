/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XBridgeFactory.idl,v $
 *
 *  $Revision: 1.13 $
 *
 *  last change: $Author: rt $ $Date: 2005-12-14 11:32:18 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/
#ifndef _COM_SUN_STAR_BRIDGE_XBRIDGEFACTORY_IDL_ 
#define _COM_SUN_STAR_BRIDGE_XBRIDGEFACTORY_IDL_ 
 
#include <com/sun/star/lang/IllegalArgumentException.idl> 
 
#include <com/sun/star/connection/XConnection.idl> 
#include <com/sun/star/bridge/XBridge.idl> 
#include <com/sun/star/bridge/BridgeExistsException.idl> 
#include <com/sun/star/bridge/XInstanceProvider.idl> 
 
 module com {  module sun {  module star {  module bridge { 
     
/** factory to create interprocess bridges.
 */
published interface XBridgeFactory: com::sun::star::uno::XInterface
{ 
    /** tries to create a UNO interprocess bridge.

        @param sName 
            The name of the bridge. This allows other components to reuse 
             an already created bridge (using getBridge).
             <p>
             If empty, an anonymous bridge is created, which cannot be retrieved with
             getBridge(). No BridgeExistsException can be thrown in this case.

        @param sProtocol   
            The protocol, that will be used on the connection (e.g., urp) plus additional
            comma separated name=value protocol properties.

        @param aConnection 
            The connection, which is used to transfer the calls. The bridge expects to
            own the connection, thus it will close the connection, in case it does not
            need it anymore.

        @param anInstanceProvider 
            gets called, when a request from remote comes in. You can pass a null reference
            in case you don't want to export any objects.
        
        @throws BridgeExistsException 
            There is already a bridge registered with this name.  Use getBridge instead. 

        @throws IllegalArgumentException 
            The protocol is unknown or the connection is null.
     */
    XBridge createBridge( 
        [in] string sName, 
        [in] string sProtocol , 
        [in] com::sun::star::connection::XConnection aConnection , 
        [in] XInstanceProvider anInstanceProvider ) 
        raises ( BridgeExistsException , com::sun::star::lang::IllegalArgumentException ); 
 
     
    /** tries to get a bridge by this name.
        <p> Cannot be retrieved, when the bridge got disposed before.

        @return An existing remote bridge or a null reference.
     */
    XBridge getBridge( [in] string  sName ); 
 
    /** returns the sequence of all named and unnamed UNO interprocess
        bridges that are instantiated at the time the call is made. 
     */
    sequence < XBridge > getExistingBridges( ); 
}; 
 
  
};};};};  
 
#endif 
