/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: BridgeSupplier.idl,v $
 *
 *  $Revision: 1.3 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-09 15:05:40 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/
#ifndef __com_sun_star_bridge_oleautomation_BridgeSupplier_idl__
#define __com_sun_star_bridge_oleautomation_BridgeSupplier_idl__

#ifndef __com_sun_star_bridge_XBridgeSupplier2_idl__
#include <com/sun/star/bridge/XBridgeSupplier2.idl>
#endif


//=============================================================================

module com { module sun { module star { module bridge { module oleautomation {

//=============================================================================
/** maps UNO types to oleautomation types and vice versa.
    <p>
    The function
    <member scope="com::sun::star::bridge">XBridgeSupplier2::createBridge</member>
    maps a value of a UNO or Automation type to the desired target type. If a UNO
    interface was mapped  to <code>IDispatch</code>, then all objects
    (interfaces, structs) and other types which	are obtained from that Automation
    object are automatically mapped to the corresponding Automation types. Hence,
    if one provides an initial object which forms the root of all other objects,
    such as a service manager, then only that object needs to be explicitly
    mapped by a call to
    <member scope="com::sun::star::bridge">XBridgeSupplier2::createBridge</member>.
    The same holds true if an automation  object is mapped to an UNO interface.
    </p>
    <p>
    For Automation objects to be mapped they have to implement
    <code>IDispatch</code> interface. Other COM interfaces,	except for
    <code>IUnknown</code>, are not supported. UNO interfaces and structs are
    mapped to <code>IDispatch</code>.
    </p>
    <p>
    The service implements the
    <type scope="com::sun::star::bridge">XBridgeSupplier2</type> interface and
    handles the model types 
    <const>com::sun::star::bridge::ModelDependent::UNO</const> and 
    <const>com::sun::star::bridge::ModelDependent::OLE</const>.  
    The service does not specify any requirements for registering OLE objects and
    class factories.
    </p>
*/
service BridgeSupplier
{
    interface com::sun::star::bridge::XBridgeSupplier2;

};

//=============================================================================

}; }; }; }; };

#endif
