/*************************************************************************
 *
 *  $RCSfile: XBridgeSupplier2.idl,v $
 *
 *  $Revision: 1.13 $
 *
 *  last change: $Author: obo $ $Date: 2004-06-03 15:31:28 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/
#ifndef __com_sun_star_bridge_XBridgeSupplier2_idl__ 
#define __com_sun_star_bridge_XBridgeSupplier2_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
#ifndef __com_sun_star_lang_IllegalArgumentException_idl__ 
#include <com/sun/star/lang/IllegalArgumentException.idl> 
#endif 
 
 
//============================================================================= 
 
 module com {  module sun {  module star {  module bridge {  
 
//============================================================================= 
 
/** defines the interface for creating bridges to other object models.
    <p />
    <p>
    The created bridges are transparent to the user. That is, if one maps
    an interface into the target model, then the resulting target interface
    is a bridge implementation, that is not being noticed by an user. During
    a call on that interface, the bridge is invoked to convert the arguments
    and carry out a call according to the rules of the source model. 
    Return values are automatically mapped to the types of the target model.
    </p>
    <p>
    Simple types are mapped to simple target types. That is, there is no additional
    bridging code involved when those types are being used.
    </p>
    
    <p>Sometimes a bridge cannot be created, depending on whether a programm uses
    the XBridgeSupplier2 interface remotely. Assuming one wants to bridge an
    OLE Automation object to UNO by calling createBridge on a proxy, then the UNO remote
    bridge would not recognise that the Any argument contains an IDispatch interface.
    Therefore it cannot marshal it as COM requires it and the bridgeing would fail.
    To prevent this, implementations of this interface should be aware of this scenario and
    if necessary take the appropriate steps. The process ID argument to the createBridge
    function represents the calling process and may be used by the implementation to determine
    if it is being accessed remotely.
    </p>
    <p>All objects, whether they are part of the UNO object model or not, 
    are carried in an <atom>any</atom>.  The representation of this object 
    is heavily model-dependent and has to be specified in the following list: </p>
    
    <dl>
        <dt>UNO: </dt>
        <dd>The any carries normal UNO types, which can be any base type,
        struct, sequence, enum or interface.  </dd>

        <dt>OLE: 	</dt>
        <dd>The any carries an <atom>unsigned long</atom> (on 32-bit systems)
        or an <atom>unsigned hyper</atom> (on 64-bit systems), which is 
        interpreted as a variant pointer. The any does not control the 
        lifetime of the represented variant. That implies that the caller 
        has the responsibility of freeing the OLE resources represented 
        by the any value.  </dd>

        <dt>JAVA: 	</dt>
        <dd>not specified yet.  </dd>

        <dt>CORBA: </dt>
        <dd>not specified yet.  </dd>
    </dl>
    
    </p>
    <p>Any implementation can supply its own bridges to other object 
    models by implementing this interface and returning the bridge 
    when the method <member>XBridgeSupplier2::createBridge()</member>
    is called with itself as the first parameter.  </p>

    @see com::sun::star::bridge::OleBridgeSupplier2
 */
published interface XBridgeSupplier2: com::sun::star::uno::XInterface
{ 
    /** creates a bridge to provide an object of one object model with another.
     */
    any createBridge( [in] any aModelDepObject, 
             [in] sequence< byte > aProcessId, 
             [in] short nSourceModelType, 
             [in] short nDestModelType ) 
            raises( com::sun::star::lang::IllegalArgumentException ); 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
/*============================================================================= 
 
=============================================================================*/ 
#endif 
