/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XBridge.idl,v $
 *
 *  $Revision: 1.12 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-09 15:03:03 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/
#ifndef _COM_SUN_STAR_BRIDGE_XBRIDGE_IDL_ 
#define _COM_SUN_STAR_BRIDGE_XBRIDGE_IDL_ 
 
#include <com/sun/star/uno/XInterface.idl> 
 
module com {  module sun {  module star {  module bridge { 
 
/** main interface for an interprocess bridge.
 */
published interface XBridge: com::sun::star::uno::XInterface
{ 
    /** tries to get an interface from the remote that is known by this name.

        <p>In general, this method is called once to get the initial object from the 
        remote, but it is allowed to call the method multiple times. </p>

        @param sInstanceName The name of the object, that shall be retrieved from the
                             remote process. The call is delegated to
                             com.sun.star.bridge.XInstanceProvider.getInstance() in the
                             remote process.
        @see com.sun.star.bridge.XInstanceProvider					 
     */
    com::sun::star::uno::XInterface getInstance( [in] string sInstanceName ); 
 
     
    /** name that the bridge got when it was created.
     */
    string getName(); 
     
              
    /** a unique descriptive string: protocol + ":" + XConnection.getDescription()
     */
    string getDescription(); 
}; 
 
};};};};  
 
#endif 
