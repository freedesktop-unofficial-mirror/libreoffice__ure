/*************************************************************************
 *
 *  $RCSfile: XLogger.idl,v $
 *
 *  $Revision: 1.5 $
 *
 *  last change: $Author: rt $  $Date: 2003-04-17 09:35:50 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., August, 2001
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2001 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/

#ifndef __com_sun_star_util_logging_XLogger_idl__
#define __com_sun_star_util_logging_XLogger_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

//=============================================================================

module com { module sun { module star { module util { module logging {

//=============================================================================
/** Local logging interface derived from the final 1.4 j2sdk java.util.logging
    interface. For speedup the XLoggerRemote interface should be used by any
    component implementing this interface for remote communication.
    This will enable some prechecks before the costly remote logging call is
    made.

    @since #107627#
*/

interface XLogger: com::sun::star::uno::XInterface
{
    /** Just to adhere to the API known from the standalone scenario.
        You can use it to create a new Logger, but to bootstrap the first
        logger you need a createInstanceWithArguments(string logger)
        or equivalent.

        @param host
        host of the caller
        
        @returns XLogger instance
    */

    XLogger getLogger( [in] string name );

    //-------------------------------------------------------------------------

    /** gets logging level of this XLogger
    
        @returns logging level of this XLogger
    */

    long getLevel();

    //-------------------------------------------------------------------------

    /** gets name of this XLogger

        @returns name of this XLogger
    */

    string getName();

    //-------------------------------------------------------------------------

    /** will this XLogger instance produce any output for the given level?
        can be used to optimize performance as maybe complex parameter evaluation
        in the logp call can be omitted if isLoggable evaluates to false

        @param level
        level to be checked against
        
        @returns true if there will be some output for this XLogger for the given level,
                 false otherwise
    */

    boolean isLoggable( [in] long level );

    //-------------------------------------------------------------------------

    /** Log a message. The p in logp is derived from "precise" as given 
        is the java.util.logging API

        @param level
        the log level of this message

        @param sourceClass
        name of class that issued the logging request

        @param sourceMethod
        name of method that issued the logging request

        @param msg
        the string message
    */

    [oneway] void logp( [in] long   level,
                        [in] string sourceClass,
                        [in] string sourceMethod,
                        [in] string msg );
};

//=============================================================================

}; }; }; }; };

#endif
