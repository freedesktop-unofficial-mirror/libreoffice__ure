/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XActiveDataControl.idl,v $
 *
 *  $Revision: 1.12 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-09 15:29:02 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/
#ifndef __com_sun_star_io_XActiveDataControl_idl__ 
#define __com_sun_star_io_XActiveDataControl_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
#ifndef __com_sun_star_io_XStreamListener_idl__ 
#include <com/sun/star/io/XStreamListener.idl> 
#endif 
 
 
//============================================================================= 
 
module com {  module sun {  module star {  module io {  
 
//============================================================================= 
 
// DocMerge from xml: interface com::sun::star::io::XActiveDataControl
/** makes it possible to control an active data source.
    
    <p>This interface should be supported by objects which implement
    <type>XActiveDataSource</type> or <type>XActiveDataSink</type>.</p>
 */
published interface XActiveDataControl: com::sun::star::uno::XInterface
{ 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::XActiveDataControl::addListener
    /** registers an object to receive events from this data source.
       <p>It is suggested to allow multiple registration of the same listener,
        thus for each time a listener is added, it has to be removed.
     */
    void addListener( [in] com::sun::star::io::XStreamListener aListener ); 
 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::XActiveDataControl::removeListener
    /** unregisters an object to receive events from this data source.

       <p>It is suggested to allow multiple registration of the same listener,
        thus for each time a listener is added, it has to be removed.
     */
    void removeListener( [in] com::sun::star::io::XStreamListener aListener ); 
 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::XActiveDataControl::start
    /** starts I/O.
        
        <p>Either <member>XActiveDataControl::setInputStream()</member> or
        <member>XActiveDataControl::setOutputStream()</member> must be called beforehand.
        </p>

        <p>This method does not block the thread, so reading is
        generally not finished when the method returns. </p>
     */
    void start(); 
 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::XActiveDataControl::terminate
    /** does a weak abort. 
        
        <p>It closes all connected resources and calls
        <member>XInputStream::close</member> or
        <member>XOutputStream::close</member> and fires the 
        <member>XStreamListener::terminated</member>-event.</p>
     */
    void terminate(); 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
/*============================================================================= 
 
=============================================================================*/ 
#endif 
