/*************************************************************************
 *
 *  $RCSfile: XInputStream.idl,v $
 *
 *  $Revision: 1.10 $
 *
 *  last change: $Author: jbu $ $Date: 2002-01-18 13:41:36 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/
#ifndef __com_sun_star_io_XInputStream_idl__ 
#define __com_sun_star_io_XInputStream_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
#ifndef __com_sun_star_io_NotConnectedException_idl__ 
#include <com/sun/star/io/NotConnectedException.idl> 
#endif 
 
#ifndef __com_sun_star_io_BufferSizeExceededException_idl__ 
#include <com/sun/star/io/BufferSizeExceededException.idl> 
#endif 
 
 
//============================================================================= 
 
module com {  module sun {  module star {  module io {  
 
//============================================================================= 
 
// DocMerge from xml: interface com::sun::star::io::XInputStream
/** This is the basic interface to read data from a stream.

    <p>
    See the <a href="http://udk.openoffice.org/common/man/concept/streams.html">
    streaming document</a> for further information on chaining and piping streams.
 */
interface XInputStream: com::sun::star::uno::XInterface
{ 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::XInputStream::readBytes
    /** reads the specified number of bytes in the given sequence. 
        
        <p>The return value specifies the number of bytes which have been 
        put into the sequence. A difference between <var>nBytesToRead</var> 
        and the return value indicates that EOF has been reached. This means 
        that the method blocks until the specified number of bytes are
        available or the EOF is reached.  </p>
       @param aData
             after the call, the byte sequence contains the requested number
             of bytes (or less as a sign of EOF).

             <p>
             C++ only : Note that for unbridged (e.g., in-process) 
             calls, using the same sequence for repetive readBytes()-calls
             can bear a performance advantage. The callee can put the data
             directly into the sequence so that no buffer reallocation is
             necessary.
             But this holds only when
             <ol>
              <li> neither caller nor callee keep a second reference to the same
                   sequence.
              <li> the sequence is pre-allocated with the requested number of bytes.
              <li> the same sequence is reused ( simply preallocationg a new
                   sequence for every call bears no advantage ).
              <li> the call is not bridged (e.g., betweeen different compilers
                   or different processes ).
             </ol>

             If the same 'optimized' code runs against an interface in a different process,
             there is an unnecessary memory allocation/deallocation (the out parameter
             is of course NOT transported over the connection), but this should
             be negligible compared to a synchron call.
     */
    long readBytes( [out] sequence<byte> aData, 
             [in] long nBytesToRead ) 
            raises( com::sun::star::io::NotConnectedException, 
                    com::sun::star::io::BufferSizeExceededException, 
                    com::sun::star::io::IOException); 
 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::XInputStream::readSomeBytes
    /** reads the available number of bytes at maximum
        <var>nMaxBytesToRead</var>. 
        
        <p>This method blocks the thread until at least one byte is
        available.  </p>
     */
    long readSomeBytes( [out] sequence<byte> aData, 
             [in] long nMaxBytesToRead ) 
            raises( com::sun::star::io::NotConnectedException, 
                    com::sun::star::io::BufferSizeExceededException, 
                    com::sun::star::io::IOException ); 
 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::XInputStream::skipBytes
    /** skips the next <var>nBytesToSkip</var> bytes (must be positive). 
        
        <p>It is up to the implementation whether this method is
        blocking the thread or not.  </p>
     */
    void skipBytes( [in] long nBytesToSkip ) 
            raises( com::sun::star::io::NotConnectedException, 
                    com::sun::star::io::BufferSizeExceededException, 
                    com::sun::star::io::IOException ); 
 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::XInputStream::available
    /** states how many bytes can be read or skipped without blocking. 
        
        <p>Note: This method offers no information on whether the EOF
        has been reached.  </p>
     */
    long available() 
            raises( com::sun::star::io::NotConnectedException, 
                    com::sun::star::io::IOException  
                    ); 
 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::XInputStream::closeInput
    /** closes the stream. 
        
        <p>Users must close the stream explicitly when no further
        reading should be done. (There may exist ring references to
        chained objects that can only be released during this call.
        Thus not calling this method would result in a leak of memory or
        external resources.) </p>
     */
    void closeInput() 
            raises( com::sun::star::io::NotConnectedException, 
                    com::sun::star::io::IOException); 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
/*============================================================================= 
 
    $Log: not supported by cvs2svn $
    Revision 1.9  2001/11/16 14:45:32  mi
    proofing by Richard Holt
    
    Revision 1.8  2001/05/03 12:37:21  jbu
    removed a typo
    
    Revision 1.7  2001/05/03 12:26:14  jbu
    improved documentation for the readBytes()-call
    
    Revision 1.6  2001/03/16 15:10:36  jsc
    remove interfaceheader with uik and remove [const] in method definitions
    
    Revision 1.5  2000/12/11 16:09:49  mi
    documentation syntax fixed and some minor semantic documentation fixes
    
    Revision 1.4  2000/11/08 12:28:36  mi
    moved from api
    
    Revision 1.1.1.1  2000/09/18 23:35:24  hjs
    initial import
    
    Revision 1.6  2000/09/11 11:52:31  mi
    documentation merged from XML
     
    Revision 1.4  2000/02/17 17:19:43  mi 
    proofreading in layouted version 
     
    Revision 1.3  1999/11/25 14:20:11  jbu 
    now passes unoidl compiler 
     
    Revision 1.2  1999/11/25 09:14:09  jbu 
    added IOException 
     
    Revision 1.1.1.1  1999/11/11 09:48:43  jsc 
    new 
     
 
=============================================================================*/ 
#endif 
