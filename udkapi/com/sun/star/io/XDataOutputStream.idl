/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XDataOutputStream.idl,v $
 *
 *  $Revision: 1.12 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-09 15:31:25 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/
#ifndef __com_sun_star_io_XDataOutputStream_idl__ 
#define __com_sun_star_io_XDataOutputStream_idl__ 
 
#ifndef __com_sun_star_io_XOutputStream_idl__ 
#include <com/sun/star/io/XOutputStream.idl> 
#endif 
 
#ifndef __com_sun_star_io_IOException_idl__ 
#include <com/sun/star/io/IOException.idl> 
#endif 
 
 
//============================================================================= 
 
module com {  module sun {  module star {  module io {  
 
//============================================================================= 
 
// DocMerge from xml: interface com::sun::star::io::XDataOutputStream
/** makes it possible to write machine-independent simple data types to a
    stream.
    @see com::sun::star::io::XDataInputStream
 */
published interface XDataOutputStream: com::sun::star::io::XOutputStream
{ 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::XDataOutputStream::writeBoolean
    /** writes a boolean. It is an 8-bit value. 0 means FALSE; all other
        values mean TRUE.
     */
    void writeBoolean( [in] boolean Value ) 
            raises( com::sun::star::io::IOException ); 
 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::XDataOutputStream::writeByte
    /** writes an 8-bit byte.
     */
    void writeByte( [in] byte Value ) 
            raises( com::sun::star::io::IOException ); 
 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::XDataOutputStream::writeChar
    /** writes a 16-bit character.
     */
    void writeChar( [in] char Value ) 
            raises( com::sun::star::io::IOException ); 
 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::XDataOutputStream::writeShort
    /** writes a 16-bit big endian integer.
     */
    void writeShort( [in] short Value ) 
            raises( com::sun::star::io::IOException ); 
 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::XDataOutputStream::writeLong
    /** writes a 32-bit big endian integer.
     */
    void writeLong( [in] long Value ) 
            raises( com::sun::star::io::IOException ); 
 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::XDataOutputStream::writeHyper
    /** writes a 64-bit big endian integer.
     */
    void writeHyper( [in] hyper Value ) 
            raises( com::sun::star::io::IOException ); 
 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::XDataOutputStream::writeFloat
    /** writes a 32-bit IEEE float.
     */
    void writeFloat( [in] float Value ) 
            raises( com::sun::star::io::IOException ); 
 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::XDataOutputStream::writeDouble
    /** writes a 64-bit IEEE double.
     */
    void writeDouble( [in] double Value ) 
            raises( com::sun::star::io::IOException ); 
 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::XDataOutputStream::writeUTF
    /** writes a string in UTF format.
     */
    void writeUTF( [in] string Value ) 
            raises( com::sun::star::io::IOException ); 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
/*============================================================================= 
 
=============================================================================*/ 
#endif 
