/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: iop.idl,v $
 *
 *  $Revision: 1.7 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-09 15:22:14 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/
#include <com/sun/star/corba/corba.idl>
module com { module sun { module star { module corba { module iop
{ // IDL
    
    /**
      @deprecated
     */
    published typedef unsigned long ProfileId;

    /**
      @deprecated
     */
    published constants ProfileIdGroup
        {
            const ProfileId TAG_INTERNET_IOP = 0;
            const ProfileId TAG_MULTIPLE_COMPONENTS = 1;
        };

    /**
      @deprecated
     */
    published struct TaggedProfile
    {
        ProfileId tag;
        sequence <byte> profile_data;
    };
    // an Interoperable Object Reference is a sequence of
    // object-specific protocol profiles, plus a type ID.

    /**
      @deprecated
     */
    published struct IOR
    {
        CorbaString8 type_id;
        sequence <TaggedProfile> profiles;
    };

    // Standard way of representing multicomponent profiles.
    // This would be encapsulated in a TaggedProfile.
    /**
      @deprecated
     */
    published typedef unsigned long ComponentId;

    /**
      @deprecated
     */
    published struct TaggedComponent
    {
        ComponentId tag;
        sequence <byte> component_data;
    };

    /**
      @deprecated
     */
    published typedef sequence <TaggedComponent> MultipleComponentProfile;

    /**
      @deprecated
     */
    published typedef unsigned long ServiceId;

    /**
      @deprecated
     */
    published struct ServiceContext
    {
        ServiceId context_id;
        sequence < byte > context_data;
    };
    
    /**
      @deprecated
     */
    published typedef sequence <ServiceContext> ServiceContextList;

    /**
      @deprecated
     */
    published constants ServiceIdGroup
        {
            const ServiceId TransactionService = 0;
            const ServiceId CodeSets = 1;
            const ServiceId ChainBypassCheck = 2;
            const ServiceId ChainBypassInfo = 3;
            const ServiceId LogicalThreadId = 4;
            const ServiceId BI_DIR_IIOP = 5;
            const ServiceId SendingContextRunTime = 6;
            const ServiceId INVOCATION_POLICIES = 7;
            const ServiceId FORWARDED_IDENTITY = 8;
            const ServiceId UnknownExceptionInfo = 9;
        };

}; }; }; }; };

