/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XServiceConstructorDescription.idl,v $
 *
 *  $Revision: 1.6 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-09 16:04:01 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/

#ifndef __com_sun_star_reflection_XServiceConstructorDescription2_idl__
#define __com_sun_star_reflection_XServiceConstructorDescription2_idl__

#include "com/sun/star/uno/XInterface.idl"

module com {  module sun {  module star {  module reflection {

interface XCompoundTypeDescription;
interface XParameter;

/**
   Reflects a service constructor.

   @since OOo 2.0.0
 */
interface XServiceConstructorDescription {
    /**
       Returns whether the constructor is a default constructor.

       @return <TRUE/> if the constructor is a default constructor
     */
    boolean isDefaultConstructor();

    /**
       Returns the constructor's name.

       @return the constructor's name; for a default constructor, an empty
           <atom>string</atom> is returned
     */
    string getName();

    /**
       Returns the constructor's parameters.

       @return the reflections of all the constructor's parameters, in their
           lexical order; for a default constructor, an empty sequence is
           returned
     */
    sequence<XParameter> getParameters();

    /**
       Returns the exceptions that can be raised by the constructor.

       @return the reflections of all the exceptions that are listed in the
       constructor's <code>raises</code> specification, in no particular order;
       all elements of the returned sequence will be reflections of exception
       types; for a default constructor, an empty sequence is returned (even
       though the mapping of a default constructor in a particular language
       binding may well raise certain UNO exceptions)
     */
    sequence<XCompoundTypeDescription> getExceptions();
};

}; }; }; };

#endif
