/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XValidator.idl,v $
 *
 *  $Revision: 1.3 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-08 00:52:50 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/

#ifndef __com_sun_star_form_validation_XValidator_idl__
#define __com_sun_star_form_validation_XValidator_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

#ifndef __com_sun_star_lang_NullPointerException_idl__
#include <com/sun/star/lang/NullPointerException.idl>
#endif

//=============================================================================

module com {  module sun {  module star {  module form { module validation {

interface XValidityConstraintListener;

//=============================================================================

/** specifies a component able to validate (the content of) other components

    <p>Validators support simple validity checks and retrieving justifications for
    invalidity.</p>

    <p>Validators may additionally support dynamic validity constraints. In such a case,
    the validity of a given value may change, without the value changing itself.<br/>
    To be notified about this, interested components should register as <type>XValidityConstraintListener</type>.

    @see XValidatable
*/
interface XValidator : com::sun::star::uno::XInterface
{
    /** determines whether the given value is valid

    @param aValue
        the value to check for validity
    @return
        <TRUE/> if and only if the value is considered valid.
    */
    boolean isValid( [in] any Value );

    /** retrieves a justification for the invalidity of the given value

    @param aValue
        the value which has been recognized as being invalid
    @return
        a human-readable string, which explains why the given valus is considered invalid.
    */
    string explainInvalid( [in] any Value );

    /** registers the given validity listener.

    <p>Usually, an <type>XValidatable</type> instance will also add itself as validity listener,
    as soon as the validator is introduced to it.</p>

    <p>Implementations which do not support dynamic validity contraints should simply ignore this
    call.</p>

    @throws <type scope="com::sun::star::lang">NullPointerException</type>
        if the given listener is <NULL/>
    @see XValidityConstraintListener
    */
    void    addValidityConstraintListener( [in] XValidityConstraintListener Listener )
                raises( com::sun::star::lang::NullPointerException );

    /** revokes the given validity listener

    @throws <type scope="com::sun::star::lang">NullPointerException</type>
        if the given listener is <NULL/>
    @see XValidityConstraintListener
    */
    void    removeValidityConstraintListener( [in] XValidityConstraintListener Listener )
                raises( com::sun::star::lang::NullPointerException );
};

//=============================================================================

}; }; }; }; };

#endif
