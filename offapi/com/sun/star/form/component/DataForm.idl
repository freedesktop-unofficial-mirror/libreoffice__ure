/*************************************************************************
 *
 *  $RCSfile: DataForm.idl,v $
 *
 *  $Revision: 1.6 $
 *
 *  last change: $Author: mi $ $Date: 2002-10-03 13:04:50 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/
#ifndef __com_sun_star_form_component_DataForm_idl__
#define __com_sun_star_form_component_DataForm_idl__

#ifndef __com_sun_star_form_component_Form_idl__
#include <com/sun/star/form/component/Form.idl>
#endif

#ifndef __com_sun_star_sdb_RowSet_idl__
#include <com/sun/star/sdb/RowSet.idl>
#endif

#ifndef __com_sun_star_form_TabulatorCycle_idl__
#include <com/sun/star/form/TabulatorCycle.idl>
#endif

#ifndef __com_sun_star_form_NavigationBarMode_idl__
#include <com/sun/star/form/NavigationBarMode.idl>
#endif

#ifndef __com_sun_star_form_XLoadable_idl__
#include <com/sun/star/form/XLoadable.idl>
#endif

#ifndef __com_sun_star_sdb_XCompletedExecution_idl__
#include <com/sun/star/sdb/XCompletedExecution.idl>
#endif

#ifndef __com_sun_star_awt_TabControllerModel_idl__
#include <com/sun/star/awt/TabControllerModel.idl>
#endif

//=============================================================================

module com { module sun { module star { module form {

interface XReset;
interface XDatabaseParameterBroadcaster;

module component {
//=============================================================================
/** This service specifies a form which is connected to a database and
    displays the results of SQL queries. It provides the possiblity of
    adding new data records, modifying existing ones, or deleting them.

    <p>A database form is a special kind of enhanced database row set
    which provides all information for displaying the data and has more
    possibilities for configuring the data manipulation.</p>

*/
service DataForm
{
    service com::sun::star::sdb::RowSet;
    service com::sun::star::form::component::Form;

    /** is used to initialize a data row which should be inserted.

        TODO: define the conditions under which forms and controls are (or should be) reset
    */
    interface com::sun::star::form::XReset;

    /** used to load/unload the form
        <p>Loading a form is basically the same as executing the underlying row set. In fact, all the
        functionality of this interface could be simulated by using setting some properties manually,
        <method scope="com::sun::star::sdbc">XRowSet::execute</method>, moving the row set cursor and so on.</p>

        <p>One main difference between <method>XLoadable::load</method> and <method scope="com::sun::star::sdbc">XRowSet::execute</method>
        is that if you use the former, the row set is positioned on the first record, while in the latter case
        it is position <em>before</em> the it.</p>
    */
    interface com::sun::star::form::XLoadable;

    /** can be used to allow an interaction handler to supply missing data during a load process.

        <p>If data is needed during loading a form, then this is usually obtained via broadcaster-listener
        mechanisms. An example for this (and currently the only one) are parameter values.</p>
        <p>However, if you use this method, you can pass an interaction handler which should supply these
        additional data.</p>

        @see com::sun::star::sdb::InteractionHandler
    */
    interface com::sun::star::sdb::XCompletedExecution;

    /** can be used for filling parameters.

        <p>You can add your component as
        <type scope="com::sun::star::form">XDatabaseParameterListener</type>
        to a form to get notified whenever the form needs parameter values to be filled in<br/>
        In a first approach, the form tries to fill any parameters from it's master-detail relation
        (if any). All values which can't be filled are then passed to all listeners, which can
        fill them by their own choice.</p>

        <p>This is sligtly changed if the form is loaded using the
        <member>XCompletedExecution::connectWithCompletion</member> method. In this case, the parameters
        are obtained from the interaction handler, not from the listeners</p>

        @see XCompletedExecution
        @see MasterFields
        @see DetailFields
    */
    interface com::sun::star::form::XDatabaseParameterBroadcaster;

    //-------------------------------------------------------------------------
    /**is used for subforms and contains the names of columns of the parent form.
       <p> These columns are typically the foreign key fields of the parent form.
       The values of theses columns are used to identify the data for the subform.
       Each time the parent form changes it's current row, the subform requeries
       it's data based on the values of the master fields.
    */
    [property] sequence<string> MasterFields;

    //-------------------------------------------------------------------------
    /**is used for subforms and contains the names of the columns of the subform
       which are related to the master fields of the parent form.
       <p> These columns represent typically a part of the primary key fields or their aliases
       of the detail form and are used as parameters in a database query to retrieve
       the details for an according master form.
    */
    [property] sequence<string> DetailFields;

    //-------------------------------------------------------------------------
    /** returns the kind of tabulator controlling.
    */
    [property] com::sun::star::form::TabulatorCycle Cycle;

    //-------------------------------------------------------------------------
    /** determines how an navigation bar for this form should act.
    */
    [property] com::sun::star::form::NavigationBarMode NavigationBarMode;

    //-------------------------------------------------------------------------
    /** determines if insertions into the form's row set are allowed.
    
        <p>Note that this is a recommendation for user interface components displaying the
        form. Form implementations may decide to allow for insertions done via the API, even
        if the property is set to <FALSE/>, but the user interface should respect the property
        value.</p>
    */
    [property] boolean AllowInserts;

    //-------------------------------------------------------------------------
    /** determines if modifications of the current record of the form are allowed.
    
        <p>Note that this is a recommendation for user interface components displaying the
        form. Form implementations may decide to allow for updates done via the API, even
        if the property is set to <FALSE/>, but the user interface should respect the property
        value.</p>
    */
    [property] boolean AllowUpdates;

    //-------------------------------------------------------------------------
    /** determines if deletions of records of the form are allowed.
    
        <p>Note that this is a recommendation for user interface components displaying the
        form. Form implementations may decide to allow for deletions done via the API, even
        if the property is set to <FALSE/>, but the user interface should respect the property
        value.</p>
    */
    [property] boolean AllowDeletes;
};

//=============================================================================

}; }; }; }; };

#endif
