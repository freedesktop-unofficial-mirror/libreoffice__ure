/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XLoadable.idl,v $
 *
 *  $Revision: 1.10 $
 *
 *  last change: $Author: hr $ $Date: 2006-08-15 10:34:09 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/
#ifndef __com_sun_star_form_XLoadable_idl__ 
#define __com_sun_star_form_XLoadable_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
#ifndef __com_sun_star_form_XLoadListener_idl__ 
#include <com/sun/star/form/XLoadListener.idl> 
#endif 
 
//============================================================================= 
 
 module com {  module sun {  module star {  module form { 
 
//============================================================================= 
 
/** provides functionality to implement objects which may be loaded.

    <p>The object is typically implemented by high-level objects which can connect to a data source.</p>

    @see XLoadListener
 */
published interface XLoadable: com::sun::star::uno::XInterface
{ 
    //------------------------------------------------------------------------- 
     
    /** loads the data.

        <p>If the data is already loaded (->isLoaded), then the method returns silently.
        In this case, you should use ->reload.</p>
     */
    [oneway] void load(); 
 
    //------------------------------------------------------------------------- 
     
    /** unloads the data.
     */
    [oneway] void unload(); 
 
    //------------------------------------------------------------------------- 
     
    /** does a smart refresh of the object.

        <p>The final state will be the same as if unload and load were called, but reload
        is the more efficient way to do the same. If the object isn't loaded, nothing happens.</p>
     */
    [oneway] void reload(); 
 
    //------------------------------------------------------------------------- 
     
    /** returns if the object is in loaded state.
     */
    boolean isLoaded(); 
 
    //------------------------------------------------------------------------- 
     
    /** adds the specified listener to receive load-related events

        @param aListener
            the listener to add.
     */
    [oneway] void addLoadListener( [in] com::sun::star::form::XLoadListener aListener ); 
 
    //------------------------------------------------------------------------- 
     
    /** removes the specified listener.

        @param aListener
            the listener to remove.
     */
    [oneway] void removeLoadListener( [in] com::sun::star::form::XLoadListener aListener ); 
}; 
 
}; }; }; }; 
 
#endif 
 
/*============================================================================= 
 
=============================================================================*/ 
