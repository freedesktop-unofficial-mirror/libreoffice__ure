/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XBoundComponent.idl,v $
 *
 *  $Revision: 1.8 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-08 00:22:41 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/
#ifndef __com_sun_star_form_XBoundComponent_idl__ 
#define __com_sun_star_form_XBoundComponent_idl__ 
 
#ifndef __com_sun_star_form_XUpdateBroadcaster_idl__ 
#include <com/sun/star/form/XUpdateBroadcaster.idl> 
#endif 
 
 
//============================================================================= 
 
 module com {  module sun {  module star {  module form {  
 
//============================================================================= 
 
/**	specifies a (form) component which is bound to a data source.
    
    <p>The interface provides the possibility of committing its respective
    data to a data source it is bound to. A <member>commit</member> will be
    performed by the environment (usually, a <type>FormController</type>).<br/>
    For example, suppose you have a data-bound control that is connected
    to a database field. Each time the control loses its focus, the
    model (component) of the control is triggered by the environment
    to store its value in the database field.</p>

    <p>A commit may fail if an <type>XUpdateListener</type> vetoes the it.</p>

    @see com::sun::star::form::XUpdateListener
 */
published interface XBoundComponent: com::sun::star::form::XUpdateBroadcaster
{ 
    //------------------------------------------------------------------------- 
     
    /** commits the content of the component into the data source it is bound to.

        @returns
            <TRUE/> when the commitment was successful, otherwise <FALSE/>.
     */
    boolean commit(); 
 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
/*============================================================================= 
 
=============================================================================*/ 
#endif 
