/*************************************************************************
 *
 *  $RCSfile: BindableControlModel.idl,v $
 *
 *  $Revision: 1.4 $
 *
 *  last change: $Author: vg $ $Date: 2005-03-23 11:43:00 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/

#ifndef __com_sun_star_form_binding_BindableControlModel_idl__
#define __com_sun_star_form_binding_BindableControlModel_idl__

#ifndef __com_sun_star_form_binding_XBindableValue_idl__
#include <com/sun/star/form/binding/XBindableValue.idl>
#endif
#ifndef __com_sun_star_form_FormControlModel_idl__ 
#include <com/sun/star/form/FormControlModel.idl>
#endif

//=============================================================================

module com {  module sun {  module star {  module form { module binding {

/** specifies the model of a form control which supports binding to an external
    value supplier.
*/
service BindableControlModel
{
    /** specifies the basic functionality for a form control model

        <p>Via this service, bindable control models inherit the
        <type scope="com::sun::star::util">XCloneable</type> interface.<br/>
        If an bindable control model, at which a binding has been established (via
        <member>XBindableValue::setValueBinding</member>), is being cloned, then the
        binding is also established at the clone. Effectively, this means that
        both control model instances share the same binding instance.</p>
    */
    service com::sun::star::form::FormControlModel; 

    /** specifies support for being bound to an external value

        <p>When a <type>BindableControlModel</type> is bound to an external value,
        then every change in the control model's value is <em>immediately</em> reflected
        in the external binding.</p>

        <p>If the binding set via this interface supports the <member>ValueBinding::ReadOnly</member>
        and <member>ValueBinding::Relevant</member> properties, they're respected by the control model:
        <ul><li>The control model's own <code>ReadOnly</code> property (if present) is kept in sync with the
                binding's <code>ReadOnly</code> property. That is, any control using the value
                binding is read-only as long as the binding is.</li>
            <li>The control model's own <code>Enabled</code> property (if present) is kept in sync
                with the binding's <code>Relevant</code> property. That is, any control using
                the value binding is disabled as long as the binding is not relevant.</li>
        </ul>
        </p>

        <p>In both cases, explicit changes of the model's property are ignored if they would relax
        the restriction imposed by the binding.<br/>
        For instance, if the binding declares it's value to
        be read-only (indicated by <member>ValueBinding::ReadOnly</member> being <TRUE/>), then
        any attempt to set the <code>ReadOnly</code> property of the control model to <FALSE/> will
        fail. However, if the binding's value is not read-only, then the <code>ReadOnly</code>
        property at the control model can be freely set.<br/>
        The very same holds for the binding's <member>ValueBinding::Relevant</member> and the control
        model's <code>Enabled</code> properties.</p>
    */
    interface XBindableValue;
};

//=============================================================================

}; }; }; }; };

#endif
