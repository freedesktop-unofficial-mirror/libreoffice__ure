/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XFormulaOpCodeMapper.idl,v $
 *
 *  $Revision: 1.2 $
 *
 *  last change: $Author: obo $ $Date: 2008-01-10 12:42:51 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/

#ifndef __com_sun_star_sheet_XFormulaOpCodeMapper_idl__
#define __com_sun_star_sheet_XFormulaOpCodeMapper_idl__

#ifndef __com_sun_star_sheet_FormulaOpCodeMapEntry_idl__
#include <com/sun/star/sheet/FormulaOpCodeMapEntry.idl>
#endif

#ifndef __com_sun_star_lang_IllegalArgumentException_idl__
#include <com/sun/star/lang/IllegalArgumentException.idl>
#endif

//=============================================================================

module com {  module sun {  module star {  module sheet {

//=============================================================================

/** gives access to spreadsheet compiler token interns.
 */
interface XFormulaOpCodeMapper
{
    //-------------------------------------------------------------------------

    /** OpCode value used for external Add-In functions.

        Needed to be able to identify which of the function names map to
        an Add-In implementation where this OpCode is used in the
        returned mapping and the programmatical name is available as
        additional information.
     */
    [attribute, readonly] long OpCodeExternal;

    //-------------------------------------------------------------------------

    /** OpCode value used for unknown functions.

        Used to identify which of the function names queried with
        <member>getMappings</member> are unknown to the implementation.
     */
    [attribute, readonly] long OpCodeUnknown;

    //-------------------------------------------------------------------------

    /** returns a sequence of tokens matching the input sequence of
        strings in order.

        @param Names
            Sequence of names to be mapped. These can be function names,
            operators, separators and other symbols the formula compiler
            knows.

        @param Language
            Formula language to be used, one of
            <type>FormulaLanguage</type> constants. If a constant
            unknown to the implementation is passed,
            <type>com::sun::star::lang::IllegalArgumentException</type>
            is thrown.

        @returns
            Sequence of <type>FormulaToken</type> matching the input
            sequence in order.

        Each string element in <param>Names</param> according to the
        formula language in <param>Language</param> is mapped to a
        <type>FormulaToken</type> containing the internal OpCode used by
        the spreadsheet application in
        <member>FormulaToken.OpCode</member> and by contract maybe
        additional information in <member>FormulaToken.Data</member>.

        The order of the FormulaToken sequence returned matches the
        input order of the string sequence.

        An unknown Name string gets the OpCode value of
        <member>OpCodeUnknown</member assigned.

        Additional information in <member>FormulaToken.Data</member> is
        returned for:

        Add-In names: the programmatical name. The OpCode value used for
        Add-Ins can be queried with the <member>OpCodeExternal</member>
        getter method.

     */
    sequence< FormulaToken > getMappings(
            [in] sequence< string > Names,
            [in] long Language )
        raises( com::sun::star::lang::IllegalArgumentException );

    //-------------------------------------------------------------------------

    /** returns a sequence of map entries for all available elements of
        a given formula language.

        @param Language
            Formula language to be used, one of
            <type>FormulaLanguage</type> constants. If a constant
            unknown to the implementation is passed,
            <type>com::sun::star::lang::IllegalArgumentException</type>
            is thrown.

        @param Groups
            Group of mappings to be returned, a bit mask of
            <type>FormulaMapGroup</type> constants.

        @returns
            Sequence of <type>FormulaOpCodeMapEntry</type>.

        Each element of the formula language in <param>Language</param>
        is mapped to a <type>FormulaToken</type> containing the internal
        OpCode used by the spreadsheet application in
        <member>FormulaToken.OpCode</member> and by contract maybe
        additional information in <member>FormulaToken.Data</member>.
        See <member>getMappings</member>.

     */
    sequence< FormulaOpCodeMapEntry > getAvailableMappings(
            [in] long Language, [in] long Groups )
        raises( com::sun::star::lang::IllegalArgumentException );

};

//=============================================================================

service FormulaOpCodeMapper : XFormulaOpCodeMapper;

//=============================================================================

}; }; }; };

#endif

