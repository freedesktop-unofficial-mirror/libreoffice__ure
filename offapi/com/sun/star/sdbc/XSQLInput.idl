/*************************************************************************
 *
 *  $RCSfile: XSQLInput.idl,v $
 *
 *  $Revision: 1.7 $
 *
 *  last change: $Author: mi $ $Date: 2002-10-03 13:07:05 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/
#ifndef __com_sun_star_sdbc_XSQLInput_idl__ 
#define __com_sun_star_sdbc_XSQLInput_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
#ifndef __com_sun_star_util_Date_idl__ 
#include <com/sun/star/util/Date.idl> 
#endif 
 
#ifndef __com_sun_star_util_DateTime_idl__ 
#include <com/sun/star/util/DateTime.idl> 
#endif 
 
#ifndef __com_sun_star_util_Time_idl__ 
#include <com/sun/star/util/Time.idl> 
#endif 
 
 module com {  module sun {  module star {  module io { 
interface XInputStream; 
};};};}; 
 
#ifndef __com_sun_star_sdbc_SQLException_idl__ 
#include <com/sun/star/sdbc/SQLException.idl> 
#endif 
 
 module com {  module sun {  module star {  module sdbc { 
 
interface XRef; 
interface XArray; 
interface XBlob; 
interface XClob; 
 
 
// DocMerge from xml: interface com::sun::star::io::com::sun::star::sdbc::XSQLInput
/** represents an input stream that contains a stream of values representing an
    instance of a SQL structured or distinct type.
    
    
    <p>
    This interface, used only for custom mapping, is used by the driver
    behind the scenes, and a programmer never directly invokes
    <code>SQLInput</code>
    methods.
    </p>
    <p>
    When the method 
    <code>getObject</code>
    is called with an object of a service implementing the interface 
    <code>SQLData</code>
    , the SDBC driver calls the method 
    <member scope="com::sun::star::sdbc">XSQLData::getSQLType()</member>
    to determine the SQL type of the user-defined type (UDT) being custom mapped.
    The driver creates an instance of 
    <type scope="com::sun::star::sdbc">XSQLInput</type>
    ,
    populating it with the attributes of the UDT. The driver then passes the input
    stream to the method 
    <member scope="com::sun::star::sdbc">XSQLData::readSQL()</member>
    , which in turn calls the 
    <code>XSQLInput.readXXX</code>
    methods in its implementation for reading the attributes from the input stream.
    </p>
 */
interface XSQLInput: com::sun::star::uno::XInterface
{ 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::sdbc::XSQLInput::readString
    /** reads the next attribute in the stream as string.
        @returns
            the attribute; if the value is SQL NULL, return null.
        @throws SQLException 
            if a database access error occurs.
     */
    string readString() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::sdbc::XSQLInput::readBoolean
    /** reads the next attribute in the stream as boolean.
        @returns
            the attribute; if the value is SQL NULL, return null.
        @throws SQLException 
            if a database access error occurs.
     */
    boolean readBoolean() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::sdbc::XSQLInput::readByte
    /** reads the next attribute in the stream as byte.
        @returns
            the attribute; if the value is SQL NULL, return null.
        @throws SQLException 
            if a database access error occurs.
     */
    byte readByte() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::sdbc::XSQLInput::readShort
    /** reads the next attribute in the stream as short.
        @returns
            the attribute; if the value is SQL NULL, return null.
        @throws SQLException 
            if a database access error occurs.
     */
    short readShort() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::sdbc::XSQLInput::readInt
    /** reads the next attribute in the stream as long.
        @returns
            the attribute; if the value is SQL NULL, return null.
        @throws SQLException 
            if a database access error occurs.
     */
    long readInt() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::sdbc::XSQLInput::readLong
    /** reads the next attribute in the stream as hyper.
        @returns
            the attribute; if the value is SQL NULL, return null.
        @throws SQLException 
            if a database access error occurs.
     */
    hyper readLong() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::sdbc::XSQLInput::readFloat
    /** reads the next attribute in the stream as float.
        @returns
            the attribute; if the value is SQL NULL, return null.
        @throws SQLException 
            if a database access error occurs.
     */
    float readFloat() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::sdbc::XSQLInput::readDouble
    /** reads the next attribute in the stream as double.
        @returns
            the attribute; if the value is SQL NULL, return null.
        @throws SQLException 
            if a database access error occurs.
     */
    double readDouble() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from idl: method com::sun::star::io::com::sun::star::sdbc::XSQLInput::readBytes
    /** reads the next attribute in the stream as sequence of bytes. 
                 @returns
            the attribute; if the value is SQL NULL, return null.
        @throws SQLException 
            if a database access error occurs.
     */
    sequence<byte> readBytes() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::sdbc::XSQLInput::readDate
    /** reads the next attribute in the stream as date.
        @returns
            the attribute; if the value is SQL NULL, return null.
        @throws SQLException 
            if a database access error occurs.
     */
    com::sun::star::util::Date readDate() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::sdbc::XSQLInput::readTime
    /** reads the next attribute in the stream as time.
        @returns
            the attribute; if the value is SQL NULL, return null.
        @throws SQLException 
            if a database access error occurs.
     */
    com::sun::star::util::Time readTime() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::sdbc::XSQLInput::readTimestamp
    /** reads the next attribute in the stream as datetime.
        @returns
            the attribute; if the value is SQL NULL, return null.
        @throws SQLException 
            if a database access error occurs.
     */
    com::sun::star::util::DateTime readTimestamp() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::sdbc::XSQLInput::readBinaryStream
    /** reads the next attribute in the stream as sequence of bytes.
        @returns
            the attribute; if the value is SQL NULL, return null.
        @throws SQLException 
            if a database access error occurs.
     */
    com::sun::star::io::XInputStream readBinaryStream() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::sdbc::XSQLInput::readCharacterStream
    /** reads the next attribute in the stream as a unicode string.
        @returns
            the attribute; if the value is SQL NULL, return null.
        @throws SQLException 
            if a database access error occurs.
     */
    com::sun::star::io::XInputStream readCharacterStream() raises (SQLException); 
       //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::sdbc::XSQLInput::readObject
    /** returns the datum at the head of the stream as an any.
        
        
        <p>
        The actual type of the any returned is determined by the default
        type mapping, and any customizations present in this stream's type map.
        
        <br/>
        A type map is registered with the stream by the SDBC driver before the
        stream is passed to the application.
        
        <br/>
        When the datum at the head of the stream is a SQL NULL,
        the method returns <void/>. If the datum is a SQL structured or distinct
        type, it determines the SQL type of the datum at the head of the stream,
        constructs an object of the appropriate service, and calls the method
        <member scope="com::sun::star::sdbc">XSQLData::readSQL()</member>
        on that object, which reads additional data
        from the stream using the protocol described for that method.
        
        </p>
        @returns
            the attribute; if the value is SQL NULL, return null.
        @throws SQLException 
            if a database access error occurs.
     */
    any readObject() raises (SQLException); 
      //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::sdbc::XSQLInput::readRef
    /** reads a REF(&amp;lt;structured-type&amp;gt;) from the stream.
        @returns
            the attribute; if the value is SQL NULL, return null.
        @throws SQLException 
            if a database access error occurs.
     */
    XRef readRef() raises (SQLException); 
      //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::sdbc::XSQLInput::readBlob
    /** reads a BLOB from the stream.
        @returns
            the attribute; if the value is SQL NULL, return null.
        @throws SQLException 
            if a database access error occurs.
     */
    XBlob readBlob() raises (SQLException); 
      //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::sdbc::XSQLInput::readClob
    /** reads a CLOB from the stream.
        @returns
            the attribute; if the value is SQL NULL, return null.
        @throws SQLException 
            if a database access error occurs.
     */
    XClob readClob() raises (SQLException); 
      //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::sdbc::XSQLInput::readArray
    /** reads an array from the stream.
        @returns
            the attribute; if the value is SQL NULL, return null.
        @throws SQLException 
            if a database access error occurs.
     */
    XArray readArray() raises (SQLException); 
      //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::sdbc::XSQLInput::wasNull
    /** determines whether the last value read was null.
        @returns
            <TRUE/> if the most recently gotten SQL value was null; otherwise, <FALSE/>
        @throws SQLException 
            if a database access error occurs.
     */
    boolean wasNull() raises (SQLException); 
}; 
 
//============================================================================= 
 
}; }; }; }; 
 
/*=========================================================================== 
    $Log: not supported by cvs2svn $
    Revision 1.6.2.1  2002/02/18 09:00:56  oj
    #97563# parameter,return value and exception description
    
    Revision 1.6  2001/11/01 16:46:46  mi
    proofreading and corrections from Richard Holt
    
    Revision 1.5  2001/03/16 16:41:35  jsc
    remove interfaceheader with uik and remove [const] in method definitions
    
    Revision 1.4  2000/12/19 13:59:40  mi
    syntax errors in documentation fixed
    
    Revision 1.3  2000/11/08 12:43:35  mi
    moved from api
    
    Revision 1.1.1.1  2000/09/18 23:35:43  hjs
    initial import
    
    Revision 1.7  2000/09/11 11:52:44  mi
    documentation merged from XML
     
    Revision 1.5  2000/01/14 10:41:30  mi 
    XML syntax error in documentation 
     
    Revision 1.4  1999/12/20 16:11:35  dg 
    #70278# changes in API 
     
    Revision 1.3  1999/12/13 13:47:55  dg 
    #70278# XSQLErrorBroadcaster removed 
     
    Revision 1.2  1999/11/24 11:33:26  dg 
    chk includes 
 
    Revision 1.1  1999/11/24 08:41:12  dg 
    new StarDataBaseConnectivity 
 
===========================================================================*/ 
#endif 
