/*************************************************************************
 *
 *  $RCSfile: XSQLData.idl,v $
 *
 *  $Revision: 1.6 $
 *
 *  last change: $Author: hr $ $Date: 2003-03-26 13:55:33 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/
#ifndef __com_sun_star_sdbc_XSQLData_idl__ 
#define __com_sun_star_sdbc_XSQLData_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
#ifndef __com_sun_star_sdbc_SQLException_idl__ 
#include <com/sun/star/sdbc/SQLException.idl> 
#endif 
 
 module com {  module sun {  module star {  module sdbc { 
 
interface XSQLInput; 
interface XSQLOutput; 
 
 
// DocMerge from xml: interface com::sun::star::sdbc::XSQLData
/** is used for the custom mapping of SQL user-defined types.
    
    
    <p>
    This interface must be implemented by a service that is
    registered in a type mapping.  It is expected that this interface
    will normally be implemented by a tool. The methods in this interface
    are called by the driver and are never called by a programmer
    directly.
    </p>
 */
interface XSQLData: com::sun::star::uno::XInterface
{ 
     
    // DocMerge from xml: method com::sun::star::sdbc::XSQLData::getSQLTypeName
    /** returns the fully-qualified name of the SQL user-defined type
        that this object represents.
        
        
        <p>
        This method is called by the SDBC driver to get the name of the
        UDT instance that is being mapped to this instance of SQLData.
        </p>
        @returns 
            the name of the SQL type.
        @throws SQLException 
            if a database access error occurs.
     */
    string getSQLTypeName() raises (SQLException); 
 
     //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XSQLData::readSQL
    /** populates this object with data read from the database.
        
        
        <p>
        The implementation of the method must follow this protocol:
        <br/>
        It must read each of the attributes or elements of the SQL
        type from the given input stream. This is done
        by calling a method of the input stream to read each
        item, in the order that they appear in the SQL definition
        of the type. The method 
        <code>readSQL</code>
        then assigns the data to appropriate fields or elements (of this
        or other objects).
        <br/>
        Specifically, it must call the appropriate 
        <code>XSQLInput.readXXX</code>
        method(s) to do the following:
        for a Distinct Type, read its single data element;
        for a Structured Type, read a value for each attribute of the SQL type.
        </p>
        <p>
        The SDBC driver initializes the input stream with a type map
        before calling this method, which is used by the appropriate
        <code>SQLInput.readXXX</code>
        method on the stream.
        </p>

        @param stream
            the input SQL data stream
        @param typeName
            the SQL type of the value on the data stream
        @throws SQLException 
            if a database access error occurs.

        @see com::sun::star::sdbc::XSQLInput
     */
    void readSQL([in]XSQLInput stream, [in]string typeName) 
        raises (SQLException); 
    //------------------------------------------------------------------------- 
       
    // DocMerge from xml: method com::sun::star::sdbc::XSQLData::writeSQL
    /** writes this object to the given SQL data stream.
        
        
        <p>
        The implementation of the method must follow this protocol:
        <br/>
        It must write each of the attributes of the SQL type to the given output
        stream. This is done by calling a method of the output stream to write
        each item, in the order that they appear in the SQL definition of the type.
        Specifically, it must call the appropriate 
        <code>XSQLOutput.writeXXX</code>
        method(s) to do the following:<br>
        for a Distinct Type, write its single data element;
        for a Structured Type, write a value for each attribute of the SQL type.
        </p>
        @param stream
            the output SQL data stream
        @throws SQLException 
            if a database access error occurs.
        @see com::sun::star::sdbc::XSQLOutput
     */
    void writeSQL([in]XSQLOutput stream) raises (SQLException); 
}; 
 
//============================================================================= 
 
}; }; }; }; 
 
/*=========================================================================== 
===========================================================================*/ 
#endif 
