/*************************************************************************
 *
 *  $RCSfile: XResultSet.idl,v $
 *
 *  $Revision: 1.6 $
 *
 *  last change: $Author: mi $ $Date: 2002-10-03 13:07:03 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/
#ifndef __com_sun_star_sdbc_XResultSet_idl__ 
#define __com_sun_star_sdbc_XResultSet_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
#ifndef __com_sun_star_sdbc_SQLException_idl__ 
#include <com/sun/star/sdbc/SQLException.idl> 
#endif 
 
 module com {  module sun {  module star {  module sdbc { 
 
interface XStatement; 
 
 
// DocMerge from xml: interface com::sun::star::sdbc::XResultSet
/** provides the navigation on a table of data.  A 
    <type scope="com::sun::star::sdbc">ResultSet</type>
    object is usually generated by executing a 
    <type scope="com::sun::star::sdbc">Statement</type>
    .
    
    
    <p>
    A ResultSet maintains a cursor pointing to its current row of
    data. Initially the cursor is positioned before the first row.
    The 'next' method moves the cursor to the next row.
    </p>
 */
interface XResultSet: com::sun::star::uno::XInterface
{ 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XResultSet::next
    /** moves the cursor down one row from its current position.
        
        
        <p>
        A ResultSet cursor is initially positioned before the first row; the
        first call to next makes the first row the current row; the
        second call makes the second row the current row, and so on.
        </p>
        <p>If an input stream is open for the current row, a call
        to the method 
        <code>next</code>
        will implicitly close it.
        The ResultSet's warning chain is cleared when a new row is read.
        </p>
        @returns
         <TRUE/> if successful
        @throws SQLException 
            if a database access error occurs.
     */
    boolean next() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XResultSet::isBeforeFirst
    /** indicates whether the cursor is before the first row in the result
        set.
        @returns
         <TRUE/> if so
        @throws SQLException 
            if a database access error occurs.
     */
    boolean isBeforeFirst() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XResultSet::isAfterLast
    /** indicates whether the cursor is after the last row in the result
        set.
        @returns
         <TRUE/> if so
        @throws SQLException 
            if a database access error occurs.
     */
    boolean isAfterLast() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XResultSet::isFirst
    /** indicates whether the cursor is on the first row of the result set.
        @returns
         <TRUE/> if so
        @throws SQLException 
            if a database access error occurs.
     */
    boolean isFirst() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XResultSet::isLast
    /** indicates whether the cursor is on the last row of the result set.
        
        
        <p>
        <B>
        Note:
        </B>
        Calling the method 
        <code>isAtLast</code>
        may be expensive because the SDBC driver might need to fetch ahead one row in order
        to determine whether the current row is the last row in the result set.
        </p>
        @returns
         <TRUE/> if so
        @throws SQLException 
            if a database access error occurs.
     */
    boolean isLast() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XResultSet::beforeFirst
    /** moves the cursor to the front of the result set, just before the
        first row. Has no effect if the result set contains no rows.
        @throws SQLException 
            if a database access error occurs.
     */
    void beforeFirst() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XResultSet::afterLast
    /** moves the cursor to the end of the result set, just after the last
        row. Has no effect if the result set contains no rows.
        @throws SQLException 
            if a database access error occurs.
     */
    void afterLast() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XResultSet::first
    /** moves the cursor to the first row in the result set.
        @returns
         <TRUE/> if successful
        @throws SQLException 
            if a database access error occurs.
     */
    boolean first() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XResultSet::last
    /** moves the cursor to the last row in the result set.
        @returns
         <TRUE/> if successful
        @throws SQLException 
            if a database access error occurs.
     */
    boolean last() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XResultSet::getRow
    /** retrieves the current row number. The first row is number 1, the
        second number 2, and so on.
        @returns
         the current position
        @throws SQLException 
            if a database access error occurs.
     */
    long getRow() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XResultSet::absolute
    /** moves the cursor to the given row number in the result set.
        
        
        <p>
        If the row number is positive, the cursor moves to
        the given row number with respect to the
        beginning of the result set. The first row is row 1, the second
        is row 2, and so on.
        </p>
        <p>
        If the given row number is negative, the cursor moves to
        an absolute row position with respect to
        the end of the result set. For example, calling
        <code>absolute(-1)</code>
        positions the
        cursor on the last row, 
        <code>absolute(-2)</code>
        indicates the next-to-last row, and so on.
        </p>
        <p>
        An attempt to position the cursor beyond the first/last row in
        the result set leaves the cursor before/after the first/last
        row, respectively.
        </p>
        <p>
        Note: Calling 
        <code>absolute(1)</code>
        is the same
        as calling 
        <member scope="com::sun::star::sdbc">XResultSet::first()</member>
        .
        Calling <code>moveToPosition(-1)</code> is the same as calling
        <code>moveToLast()</code>.
        </p>
     */
    boolean absolute([in] long row ) raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XResultSet::relative
    /** moves the cursor a relative number of rows, either positive or negative.
        
        
        <p>
        Attempting to move beyond the first/last row in the result set
        positions the cursor before/after 
        the first/last row. Calling 
        <code>relative(0)</code>
        is valid, but does not change the cursor position.
        </p>
        <p>
        Note: Calling 
        <code>relative(1)</code>
        is different from calling 
        <member scope="com::sun::star::sdbc">XResultSet::next()</member>
        because is makes sense to call 
        <code>next()</code>
        when there is no current row, for example, when the cursor is positioned before
        the first row or after the last row of the result set.
        </p>
        @param rows
            how many rows should be moved relative to the current row
        @returns
         <TRUE/> if successful
        @throws SQLException 
            if a database access error occurs.
     */
    boolean relative([in]long rows) raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XResultSet::previous
    /** moves the cursor to the previous row in the result set.
        
        
        <p>
        Note: 
        <code>previous()</code>
        is not the same as
        <code>relative(-1)</code>
        because it makes sense to call 
        <code>previous()</code>
        when there is no current row.
        </p>
        @returns
            <TRUE/> if successful
        @throws SQLException 
            if a database access error occurs.
     */
    boolean previous() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XResultSet::refreshRow
    /** refreshes the current row with its most recent value in
        the database. Cannot be called when on the insert row.
        The 
        <code>refreshRow</code>
        method provides a way for an application to
        explicitly tell the SDBC driver to refetch a row(s) from the
        database. An application may want to call 
        <code>refreshRow</code>
        when caching or prefetching is being done by the SDBC driver to
        fetch the latest value of a row from the database. The SDBC driver
        may actually refresh multiple rows at once if the fetch size is
        greater than one.
        All values are refetched subject to the transaction isolation
        level and cursor sensitivity. If 
        <code>refreshRow</code>
        is called after calling 
        <code>updateXXX</code>
        , but before calling 
        <member scope="com::sun::star::sdbc">XResultSet::updateRow()</member>
        , then the updates made to the row are lost.
        Calling the method 
        <code>refreshRow</code>
        frequently will likely slow performance.
        @throws SQLException 
            if a database access error occurs.
     */
    void refreshRow() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XResultSet::rowUpdated
    /** indicates whether the current row has been updated. The value returned
        depends on whether or not the result set can detect updates.
        @returns
            <TRUE/> if successful
        @throws SQLException 
            if a database access error occurs.
     */
    boolean rowUpdated() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XResultSet::rowInserted
    /** indicates whether the current row has had an insertion.  The value returned
        depends on whether or not the result set can detect visible inserts.
        @returns
            <TRUE/> if successful
        @throws SQLException 
            if a database access error occurs.
     */
    boolean rowInserted() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XResultSet::rowDeleted
    /** indicates whether a row has been deleted.  A deleted row may leave
        a visible "hole" in a result set.  This method can be used to
        detect holes in a result set.  The value returned depends on whether
        or not the result set can detect deletions.
        @returns
            <TRUE/> if successful
        @throws SQLException 
            if a database access error occurs.
     */
    boolean rowDeleted() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XResultSet::getStatement
    /** returns the Statement that produced this 
        <type scope="com::sun::star::sdbc">ResultSet</type>
        object. If the result set was generated some other way, such as by an
        <type scope="com::sun::star::sdbc">XDatabaseMetaData</type>
        method, this method returns 
        <NULL/>
        .
        @returns
            the statement object
        @throws SQLException 
            if a database access error occurs.
     */
    com::sun::star::uno::XInterface getStatement() raises (SQLException); 
}; 
 
//============================================================================= 
 
}; }; }; }; 
 
/*=========================================================================== 
    $Log: not supported by cvs2svn $
    Revision 1.5.16.1  2002/02/18 08:58:22  oj
    #97563# parameter,return value and exception description
    
    Revision 1.5  2001/03/16 16:41:35  jsc
    remove interfaceheader with uik and remove [const] in method definitions
    
    Revision 1.4  2000/12/19 13:46:04  mi
    syntax errors in documentation fixed
    
    Revision 1.3  2000/11/08 12:43:35  mi
    moved from api
    
    Revision 1.1.1.1  2000/09/18 23:35:42  hjs
    initial import
    
    Revision 1.8  2000/09/11 11:52:43  mi
    documentation merged from XML
     
    Revision 1.6  2000/03/30 12:20:39  dg 
    #74028# missing documentation completed 
     
    Revision 1.5  2000/03/16 11:29:22  mi 
    UCB complient documentation (optional) 
     
    Revision 1.4  2000/02/07 11:24:53  mi 
    zu #70728# missing documentation marked 
     
    Revision 1.3  2000/01/06 07:27:42  dg 
    #70278# rowDeleted moved to XResultSet 
 
    Revision 1.2  1999/12/13 13:47:55  dg 
    #70278# XSQLErrorBroadcaster removed 
 
    Revision 1.1  1999/11/24 08:41:08  dg 
    new StarDataBaseConnectivity 
 
===========================================================================*/ 
#endif 
