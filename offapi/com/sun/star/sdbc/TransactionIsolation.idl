/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: TransactionIsolation.idl,v $
 *
 *  $Revision: 1.9 $
 *
 *  last change: $Author: vg $ $Date: 2007-01-15 14:05:48 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/
#ifndef __com_sun_star_sdbc_TransactionIsolation_idl__ 
#define __com_sun_star_sdbc_TransactionIsolation_idl__ 
 
 module com {  module sun {  module star {  module sdbc { 
 
 
/** distinguishes different possible transaction isolation levels.
 */
published constants TransactionIsolation
{ 
     
    /** indicates that transactions are not supported.
     */
    const long NONE					=  0; 
     
    /** Dirty reads, non-repeatable reads and phantom reads can occur. 
             This level allows a row changed by one transaction to be read 
             by another transaction before any changes in that row have been 
             committed (a "dirty read").  If any of the changes are rolled back, 
             the second transaction will have retrieved an invalid row.
     */
    const long READ_UNCOMMITTED 	=  1; 
     
    /** Dirty reads are prevented; non-repeatable reads and phantom 
             reads can occur.  This level only prohibits a transaction 
             from reading a row with uncommitted changes in it.
     */
    const long READ_COMMITTED		=  2; 
     
    /** Dirty reads and non-repeatable reads are prevented; phantom 
             reads can occur.  This level prohibits a transaction from 
             reading a row with uncommitted changes in it, and it also 
             prohibits the situation where one transaction reads a row, 
             a second transaction alters the row, and the first transaction 
             rereads the row, getting different values the second time 
             (a "non-repeatable read").
     */
    const long REPEATABLE_READ 		=  4; 
     
    /** Dirty reads, non-repeatable reads and phantom reads are prevented. 
             This level includes the prohibitions in 
             <code>REPEATABLE_READ</code>
             and further prohibits the 
             situation where one transaction reads all rows that satisfy 
             a WHERE condition, a second transaction inserts a row that 
             satisfies that WHERE condition, and the first transaction 
             rereads for the same condition, retrieving the additional 
             "phantom" row in the second read.
     */
    const long SERIALIZABLE 		=  8; 
}; 
 
//============================================================================= 
 
}; }; }; }; 
 
/*=========================================================================== 
===========================================================================*/ 
#endif 
