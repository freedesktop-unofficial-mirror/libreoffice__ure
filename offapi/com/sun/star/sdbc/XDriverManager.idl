/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XDriverManager.idl,v $
 *
 *  $Revision: 1.9 $
 *
 *  last change: $Author: vg $ $Date: 2007-01-15 14:08:16 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/
#ifndef __com_sun_star_sdbc_XDriverManager_idl__ 
#define __com_sun_star_sdbc_XDriverManager_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
#ifndef __com_sun_star_beans_PropertyValue_idl__ 
#include <com/sun/star/beans/PropertyValue.idl> 
#endif 
 
#ifndef __com_sun_star_sdbc_SQLException_idl__ 
#include <com/sun/star/sdbc/SQLException.idl> 
#endif 
 
 module com {  module sun {  module star {  module sdbc { 
 
 published interface XConnection; 
 published interface XDriver; 
 
 
/** is the basic interface for managing a set of SDBC drivers.
    
    
    
    <p>
    When the method 
    <member scope="com::sun::star::sdbc">XDriverManager::getConnection()</member>
    is called,
    the DriverManager will attempt to
    locate a suitable driver.
    
    </p>
    @see com::sun::star::sdbc::XDriver 
     @see com::sun::star::sdbc::XConnection
 */
published interface XDriverManager: com::sun::star::uno::XInterface
{ 
    //------------------------------------------------------------------------- 
     
    /** attempts to establish a connection to the given database URL.
        The DriverManager attempts to select an appropriate driver from
        the set of registered JDBC/SDBC drivers.
        @param url
            a database url of the form  sdbc:subprotocol:subname
        @returns
            the Connection object
        @throws SQLException 
            if a database access error occurs.
     */
    XConnection getConnection([in]string url) 
        raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    /** attempts to establish a connection to the given database URL.
        The DriverManager attempts to select an appropriate driver from
        the set of registered JDBC/SDBC drivers.
        @param url
            a database url of the form  sdbc:subprotocol:subname
        @param info
            a list of arbitrary string tag/value pairs as connection arguments; 
            normally at least a "user" and "password" property should be included
            @see com::sun::star::sdbc::ConnectionProperties
        @returns
            the Connection object
        @throws SQLException 
            if a database access error occurs.
     */
    XConnection getConnectionWithInfo([in]string url, 
            [in]sequence<com::sun::star::beans::PropertyValue> info) 
        raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    /** sets the maximum time in seconds that a driver will wait
        while attempting to connect to a database.
        @param seconds
            the login time limit in seconds

        @throws SQLException 
            if a database access error occurs.
     */
    void setLoginTimeout([in]long seconds); 
    //------------------------------------------------------------------------- 
     
    /** gets the maximum time in seconds that a driver can wait
        when attempting to login to a database.
        @returns 
            the driver login time limit in seconds

        @throws SQLException 
            if a database access error occurs.
     */
    long getLoginTimeout(); 
}; 
 
//============================================================================= 
 
}; }; }; }; 
 
#endif 
