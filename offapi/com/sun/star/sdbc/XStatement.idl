/*************************************************************************
 *
 *  $RCSfile: XStatement.idl,v $
 *
 *  $Revision: 1.7 $
 *
 *  last change: $Author: hr $ $Date: 2003-03-26 13:55:33 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/
#ifndef __com_sun_star_sdbc_XStatement_idl__ 
#define __com_sun_star_sdbc_XStatement_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
#ifndef __com_sun_star_sdbc_SQLException_idl__ 
#include <com/sun/star/sdbc/SQLException.idl> 
#endif 
 
 module com {  module sun {  module star {  module sdbc { 
 
interface XConnection; 
interface XResultSet; 
 
 
// DocMerge from xml: interface com::sun::star::sdbc::XStatement
/** is used for executing a static SQL statement and obtaining the results
    produced by it.
    
    
    
    <p>
    Only one ResultSet per Statement can be open at any point in
    time; therefore, if the reading of one ResultSet is interleaved
    with the reading of another, each must have been generated by
    different Statements. All statement 
    <code>execute</code>
    methods implicitly
    close a statement's current ResultSet if an open one exists.
    </p>
 */
interface XStatement: com::sun::star::uno::XInterface
{ 
     
    // DocMerge from xml: method com::sun::star::sdbc::XStatement::executeQuery
    /** executes a SQL statement that returns a single ResultSet.
        @param sql
            the SQL statement which should be executed
        @returns
            a ResultSet that contains the data produced by the query; never <NULL/>
        @throws SQLException 
            if a database access error occurs.
     */
    XResultSet executeQuery([in]string sql) raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XStatement::executeUpdate
    /** executes an SQL INSERT, UPDATE, or DELETE statement. In addition,
        SQL statements that return nothing, such as SQL DDL statements,
        can be executed.

        @param sql
            a SQL INSERT, UPDATE or DELETE statement or a SQL statement that returns nothing
        @returns
            either the row count for INSERT, UPDATE or DELETE or 0 for SQL statements that return nothing
        @throws SQLException 
            if a database access error occurs.
     */
    long executeUpdate([in]string sql) raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XStatement::execute
    /** executes a SQL statement that may return multiple results.
        
        
        <p>
        Under some (uncommon) situations a single SQL statement may return
        multiple result sets and/or update counts. Normally you can ignore
        this unless you are (1) executing a stored procedure that you know may
        return multiple results or (2) you are dynamically executing an
        unknown SQL string. The navigation through multiple results is covered by
        <type scope="com::sun::star::sdbc">XMultipleResults</type>.
        </p>
        <p>
        The 
        <code>execute</code>
        method executes a SQL statement and indicates
        the form of the first result. You can then use 
        <member scope="com::sun::star::sdbc">XStatement::getResultSet()</member>
        or
        <member scope="com::sun::star::sdbc">XStatement::getUpdateCount()</member>
        to retrieve the result, and
        <member scope="com::sun::star::sdbc">XStatement::getMoreResults()</member>
        to move to any subsequent result(s).
        </p>

        @param sql
            any SQL statement
        @returns
            <TRUE/> if the next result is a ResultSet; <FALSE/> if it is an update count or there are no more results
        @throws SQLException 
            if a database access error occurs.
     */
    boolean execute([in]string sql) raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XStatement::getConnection
    /** returns the 
        <type scope="com::sun::star::sdbc">Connection</type>
        object
        that produced this 
        <code>Statement</code>
        object.
        @returns
            the connection that produced this statement

        @throws SQLException 
            if a database access error occurs.
     */
    XConnection getConnection() raises (SQLException); 
}; 
 
//============================================================================= 
 
}; }; }; }; 
 
/*=========================================================================== 
===========================================================================*/ 
#endif 
