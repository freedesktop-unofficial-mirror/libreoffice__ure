/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XPreparedStatement.idl,v $
 *
 *  $Revision: 1.8 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-08 03:52:14 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/
#ifndef __com_sun_star_sdbc_XPreparedStatement_idl__ 
#define __com_sun_star_sdbc_XPreparedStatement_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
#ifndef __com_sun_star_sdbc_SQLException_idl__ 
#include <com/sun/star/sdbc/SQLException.idl> 
#endif 
 
 module com {  module sun {  module star {  module sdbc { 
 
 published interface XConnection; 
 published interface XResultSet; 
 
 
// DocMerge from xml: interface com::sun::star::sdbc::XPreparedStatement
/** provides the possibilty of executing a precompiled SQL statement.
    
    
    <p>
    A SQL statement is pre-compiled and stored in a PreparedStatement object.
    This object can then be used to efficiently execute this statement multiple
    times.
    </p>
 */
published interface XPreparedStatement: com::sun::star::uno::XInterface
{ 
     
    // DocMerge from xml: method com::sun::star::sdbc::XPreparedStatement::executeQuery
    /** executes the SQL query in this 
        <code>PreparedStatement</code>
        object and returns the result set generated by the query.
        @returns
            the ResultSet object
        @throws SQLException 
            if a database access error occurs.
     */
    XResultSet executeQuery() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XPreparedStatement::executeUpdate
    /** executes the SQL INSERT, UPDATE or DELETE statement in this
        <type scope="com::sun::star::sdbc">PreparedStatement</type>
        object.
        <br/>
        In addition, SQL statements that return nothing, such as
        SQL DDL statements, can be executed.
        @returns
            either the row count for INSERT, UPDATE or DELETE statements; or 0 for SQL statements that return nothing
        @throws SQLException 
            if a database access error occurs.
     */
    long executeUpdate() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XPreparedStatement::execute
    /** executes any kind of SQL statement.
        
        
        <p>
        Some prepared statements return multiple results; the execute
        method handles these complex statements as well as the simpler
        form of statements handled by executeQuery and executeUpdate.
        </p>
        @returns
            <TRUE/> if successful
        @throws SQLException 
            if a database access error occurs.
     */
    boolean execute() raises (SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbc::XPreparedStatement::getConnection
    /** returns the 
        <type scope="com::sun::star::sdbc">Connection</type>
        object
        that produced this 
        <type scope="com::sun::star::sdbc">Statement</type>
        object.
        @returns
            the Connection object
        @throws SQLException 
            if a database access error occurs.
     */
    XConnection getConnection() raises (SQLException); 
}; 
 
//============================================================================= 
 
}; }; }; }; 
 
/*=========================================================================== 
===========================================================================*/ 
#endif 
