/*************************************************************************
 *
 *  $RCSfile: PreparedStatement.idl,v $
 *
 *  $Revision: 1.8 $
 *
 *  last change: $Author: oj $ $Date: 2002-07-19 10:09:03 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/
#ifndef __com_sun_star_sdbc_PreparedStatement_idl__ 
#define __com_sun_star_sdbc_PreparedStatement_idl__ 
 
#ifndef __com_sun_star_lang_XComponent_idl__ 
#include <com/sun/star/lang/XComponent.idl> 
#endif 
 
#ifndef __com_sun_star_beans_XPropertySet_idl__ 
#include <com/sun/star/beans/XPropertySet.idl> 
#endif 
 
#ifndef __com_sun_star_util_XCancellable_idl__ 
#include <com/sun/star/util/XCancellable.idl> 
#endif 
 
 module com {  module sun {  module star {  module sdbc { 
 
interface XPreparedStatement; 
interface XPreparedBatchExecution; 
interface XParameters; 
interface XWarningsSupplier; 
interface XMultipleResults; 
interface XResultSetMetaDataSupplier; 
interface XCloseable; 
interface XGeneratedResultSet; 
 
 
// DocMerge from idl: service com::sun::star::sdbc::PreparedStatement
/** represents a precompiled SQL statement. 
     <P>A SQL statement is pre-compiled and stored in a PreparedStatement object. 
     This object can then be used to efficiently execute this statement multiple 
     times. 
     <P><B>Note:</B> The setXXX methods for setting IN parameter values 
     must specify types that are compatible with the defined SQL type of 
     the input parameter. For instance, if the IN parameter has SQL type 
     Integer, then the method <code>setLong</code> should be used. 
     
     <p>If arbitrary parameter type conversions are required, the method 
     <code>setObject</code> should be used with a target SQL type. 
     <br> 
     Example of setting a parameter; <code>con</code> is an active connection. 
     @example:StarBASIC 
     <listing> 
     pstmt = con.prepareStatement("UPDATE EMPLOYEES SET SALARY = ? WHERE ID = ?") 
     pstmt.setDouble(1, 153833.00) 
     pstmt.setLong(2, 110592) 
     </listing> 
     <P>Only one ResultSet per Statement can be open at any point in 
     time. Therefore, if the reading of one ResultSet is interleaved 
     with the reading of another, each must have been generated by 
     different Statements. All statement <code>execute</code> methods implicitly 
     close a statement's current ResultSet if an open one exists.
 */
service PreparedStatement
{ 
     
    // DocMerge from xml: service com::sun::star::sdbc::PreparedStatement: interface com::sun::star::lang::XComponent
    /** optional for implementation, controls the releasing of resources 
             and the notification of registered listeners.
     */
    [optional] interface com::sun::star::lang::XComponent; 
 
     
    // DocMerge from xml: service com::sun::star::sdbc::PreparedStatement: interface com::sun::star::sdbc::XCloseable
    /** freeing all resources of a statement. A related resultset will be 
             freed as well.
     */
    interface XCloseable; 
 
    // DocMerge: empty anyway
    interface com::sun::star::beans::XPropertySet; 
     
    // DocMerge from xml: service com::sun::star::sdbc::PreparedStatement: interface com::sun::star::util::XCancellable
    /** could be used for cancelling the execution of SQL statements, if both 
             the DBMS and the driver support aborting an SQL statement. 
             The implementation is optional.
     */
    [optional] interface com::sun::star::util::XCancellable;
    
    /** could be used to retrieve a result set which gives access to automatically generated values after an insert statement. 
             The implementation is optional.
     */
    [optional] interface com::sun::star::sdbc::XGeneratedResultSet; 
     
    // DocMerge from xml: service com::sun::star::sdbc::PreparedStatement: interface com::sun::star::sdbc::XPreparedStatement
    /** is the interface for executing SQL prepared commands.
     */
    interface XPreparedStatement; 
 
     
    // DocMerge from xml: service com::sun::star::sdbc::PreparedStatement: interface com::sun::star::sdbc::XResultSetMetaDataSupplier
    /** provides access to the result set description.
     */
    interface XResultSetMetaDataSupplier; 
 
     
    // DocMerge from xml: service com::sun::star::sdbc::PreparedStatement: interface com::sun::star::sdbc::XParameters
    /** is used for setting parameters before execution of the precompiled 
             statement.
     */
    interface XParameters; 
 
     
    // DocMerge from xml: service com::sun::star::sdbc::PreparedStatement: interface com::sun::star::sdbc::XPreparedBatchExecution
    /** provides the ability of batch execution. This interface is optional 
             for execution. 
             <p>A driver implementing batch execution must return <TRUE/> for 
             <member scope= "com::sun::star::sdbc"> 
             XDatabaseMetaData::supportsBatchUpdates()</member>
     */
    [optional] interface XPreparedBatchExecution; 
 
     
    // DocMerge from xml: service com::sun::star::sdbc::PreparedStatement: interface com::sun::star::sdbc::XWarningsSupplier
    /** controls the chaining of warnings, which may occur on every call 
             to the connected database. Chained warnings from previous calls will be 
             cleared before processing a new call.
     */
    interface XWarningsSupplier; 
 
     
    // DocMerge from xml: service com::sun::star::sdbc::PreparedStatement: interface com::sun::star::sdbc::XMultipleResults
    /** covers the handling of multiple results after executing an SQL command.
     */
    interface XMultipleResults; 
 
     
    // DocMerge from idl: property com::sun::star::sdbc::PreparedStatement::QueryTimeOut
    /** retrieves the number of seconds the driver will wait for a Statement 
              to execute. If the limit is exceeded, a SQLException is thrown. 
              There is no limitation, if set to zero.
     */
    [property] long QueryTimeOut; 
 
     
    // DocMerge from idl: property com::sun::star::sdbc::PreparedStatement::MaxFieldSize
    /** returns the maximum number of bytes allowed for any column value. 
              <p>This limit is the maximum number of bytes that can be returned 
              for any column value. The limit applies only to BINARY, 
              VARBINARY, LONGVARBINARY, CHAR, VARCHAR, and LONGVARCHAR columns. 
              If the limit is exceeded, the excess data is silently discarded. 
              <br>There is no limitation, if set to zero.
     */
    [property] long MaxFieldSize; 
 
     
    // DocMerge from idl: property com::sun::star::sdbc::PreparedStatement::MaxRows
    /** retrieves the maximum number of rows that a ResultSet can contain. 
             If the limit is exceeded, the excess rows are silently dropped. 
             <br>There is no limitation, if set to zero.
     */
    [property] long MaxRows; 
 
     
    // DocMerge from idl: property com::sun::star::sdbc::PreparedStatement::CursorName
    /** defines the SQL cursor name that will be used by subsequent Statement 
             <code>execute</code> methods. 
             <p>This name can then be used in SQL positioned update/delete statements to 
             identify the current row in the ResultSet generated by this statement. If 
             the database does not support positioned update/delete, this property is 
             a noop. To insure that a cursor has the proper isolation level to support 
             updates, the cursor's SELECT statement should be of the form 
             'select for update ...'. If the 'for update' phrase is omitted, 
             positioned updates may fail. 
             <P><B>Note:</B> By definition, positioned update/delete 
             execution must be done by a different Statement than the one 
             which generated the ResultSet being used for positioning. Also, 
             cursor names must be unique within a connection.
     */
    [property] string CursorName; 
 
     
    // DocMerge from idl: property com::sun::star::sdbc::PreparedStatement::ResultSetConcurrency
    /** retrieves the result set concurrency. 
             @see com::sun::star::sdbc::ResultSetConcurrency;
     */
    [property] long ResultSetConcurrency; 
 
     
    // DocMerge from idl: property com::sun::star::sdbc::PreparedStatement::ResultSetType
    /** Determine the result set type. 
             @see com::sun::star::sdbc::ResultSetType;
     */
    [property] long ResultSetType; 
 
     
    // DocMerge from idl: property com::sun::star::sdbc::PreparedStatement::FetchDirection
    /** retrieves the direction for fetching rows from database tables 
             that is the default for result sets generated from this 
             <code>Statement</code> object.<br> 
             If this <code>Statement</code> object has not set a fetch direction, 
             the return value is implementation-specific.
     */
    [property] long FetchDirection; 
 
     
    // DocMerge from idl: property com::sun::star::sdbc::PreparedStatement::FetchSize
    /** retrieves the number of result set rows that is the default fetch size 
             for result sets generated from this <code>Statement</code> object.<br> 
             If this <code>Statement</code> object has not set a fetch size, 
             the return value is implementation-specific.
     */
    [property] long FetchSize; 
}; 
 
//============================================================================= 
 
}; }; }; }; 
 
/*=========================================================================== 
    $Log: not supported by cvs2svn $
    Revision 1.7  2001/11/01 16:46:46  mi
    proofreading and corrections from Richard Holt
    
    Revision 1.6  2001/02/20 13:30:07  fs
    #82875# removed XClearParameters - this interface is obsolete, the functionality is covered by XParameters
    
    Revision 1.5  2001/01/23 10:08:28  mi
    optional interfaces now marked as [optional] instead of just a prosa description of this fact
    
    Revision 1.4  2000/12/19 16:03:44  mi
    documentations syntax errors fixed
    
    Revision 1.3  2000/11/08 12:43:35  mi
    moved from api
    
    Revision 1.1.1.1  2000/09/18 23:35:40  hjs
    initial import
    
    Revision 1.5  2000/09/11 11:52:42  mi
    documentation merged from XML
     
    Revision 1.3  1999/12/20 16:11:34  dg 
    #70278# changes in API 
     
    Revision 1.2  1999/12/14 12:05:45  dg 
    #70278# CompareBookmark removed 
     
    Revision 1.1  1999/11/24 08:41:01  dg 
    new StarDataBaseConnectivity 
 
===========================================================================*/ 
#endif 
