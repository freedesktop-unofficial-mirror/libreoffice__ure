/*************************************************************************
 *
 *  $RCSfile: XArray.idl,v $
 *
 *  $Revision: 1.1 $
 *
 *  last change: $Author: mi $ $Date: 2000-11-06 09:21:57 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/
#ifndef __com_sun_star_sdbc_XArray_idl__ 
#define __com_sun_star_sdbc_XArray_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
 module com {  module sun {  module star {  module container { 
interface XNameAccess; 
};};};}; 
 
#ifndef __com_sun_star_sdbc_SQLException_idl__ 
#include <com/sun/star/sdbc/SQLException.idl> 
#endif 
 
 module com {  module sun {  module star {  module sdbc { 
 
interface XResultSet; 
 
 
// DocMerge from xml: interface com::sun::star::container::com::sun::star::sdbc::XArray
/** is used for mapping the SQL type <code>ARRAY</code>.
    By default, an <code>Array</code> is a transaction duration
    reference to an SQL array.  By default, an <code>Array</code>
    is implemented using a SQL LOCATOR(array) internally.
 */
[ uik(D6B60238-9067-11d3-9EE00010-5AD7A5C4), ident("XArray", 1.0) ]
interface XArray: com::sun::star::uno::XInterface
{ 
       
    // DocMerge from xml: method com::sun::star::container::com::sun::star::sdbc::XArray::getBaseTypeName
    /** returns the SQL type name of the elements in
        the array designated by this <code>Array</code> object.
        
        
        <p>If the elements are a built-in type, it returns
        the database-specific type name of the elements.
        If the elements are a user-defined type (UDT),
        this method returns the fully-qualified SQL type name.
        
        </p>
     */
    [const] string getBaseTypeName() raises (SQLException); 
 
      //------------------------------------------------------------------------- 
       
    // DocMerge from xml: method com::sun::star::container::com::sun::star::sdbc::XArray::getBaseType
    /** returns the SDBC type of the elements in the array designated
        by this <code>Array</code> object.
     */
    [const] long getBaseType() raises (SQLException); 
 
    //------------------------------------------------------------------------- 
     
    // DocMerge from idl: method com::sun::star::container::com::sun::star::sdbc::XArray::getArray
    /** retrieves the contents of the SQL array designated by this 
                <code>Array</code> object, using the specified <code>typeMap</code> 
             for type map customizations. 
             <p>If the base type of the array does not match a user-defined type 
             in <code>typeMap</code>, the standard mapping is used instead. 
         
             @param typeMap 
                is a map object that contains mappings of SQL type names to 
                services. If the <code>typeMap</code> is <NULL/>, the type-map 
                    associated with the connection for customizations of the type-mappings 
                 is used. 
         
             @returns 
                an sequence that contains the ordered elements 
                of the SQL array designated by this object. 
         
             @throws SQLException 
                if an error occurs while attempting to access the array.
     */
    sequence<any> getArray([in]com::sun::star::container::XNameAccess typeMap) 
        raises (SQLException); 
 
      //------------------------------------------------------------------------- 
     
    // DocMerge from idl: method com::sun::star::container::com::sun::star::sdbc::XArray::getArrayAtIndex
    /** returns an array containing a slice of the SQL array, beginning with the 
                specified <code>index</code> and containing up to <code>count</code> 
                successive elements of the SQL array. 
         
             @param index 
                is the array index of the first element to retrieve; 
                the first element is at index 1. 
                @param count 
                is the number of successive SQL array elements to retrieve. 
             @param typeMap 
                is a map object that contains mappings of SQL type names to 
                services. If the <code>typeMap</code> is <NULL/>, the type-map 
                   associated with the connection for customizations of the type-mappings 
                is used. 
             @returns 
                an array containing up to <code>count</code> consecutive elements 
                   of the SQL array, beginning with element <code>index</code>. 
                @throws SQLException 
                if an error occurs while attempting to access the array.
     */
    sequence<any> getArrayAtIndex([in]long index, 
                                  [in]long count, 
                                  [in]com::sun::star::container::XNameAccess 
                                                                      typeMap) 
            raises (SQLException); 
 
      //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::container::com::sun::star::sdbc::XArray::getResultSet
    /** returns a result set that contains the elements of the array
        designated by this <code>Array</code> object and uses the given
        <code>typeMap</code> to map the array elements.  If the base
        type of the array does not match a user-defined type in
        <code>typeMap</code> or the <code>typeMap</code> is <null></null>,
        the connection type mapping is used instead.
        
        
        <p>
        The result set contains one row for each array element, with
        two columns in each row.  The second column stores the element
        value; the first column stores the index into the array for
        that element (with the first array element being at index 1).
        The rows are in ascending order corresponding to
        the order of the indices.
        </p>
     */
    XResultSet getResultSet([in]com::sun::star::container::XNameAccess typeMap) 
        raises (SQLException); 
 
      //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::container::com::sun::star::sdbc::XArray::getResultSetAtIndex
    /** returns a result set holding the elements of the subarray that
        starts at index <code>index</code> and contains up to
        <code>count</code> successive elements. This method uses the given
        <code>typeMap</code> to map the array elements.  If the base
        type of the array does not match a user-defined type in
        <code>typeMap</code> or the <code>typeMap</code> is <null></null>,
        the connection type mapping is used instead.
        
        
        <p>
        The result set contains one row for each array element, with
        two columns in each row.  The second column stores the element
        value; the first column stores the index into the array for
        that element (with the first array element being at index 1).
        The rows are in ascending order corresponding to
        the order of the indices.
        </p>
     */
    XResultSet getResultSetAtIndex([in]long index, 
                                   [in]long count, 
                                   [in]com::sun::star::container::XNameAccess typeMap) 
        raises (SQLException); 
}; 
 
//============================================================================= 
 
}; }; }; }; 
 
/*=========================================================================== 
    $Log: not supported by cvs2svn $
    Revision 1.1.1.1  2000/09/18 23:35:41  hjs
    initial import
    
    Revision 1.4  2000/09/11 11:52:42  mi
    documentation merged from XML
     
    Revision 1.2  1999/11/24 11:33:26  dg 
    chk includes 
     
    Revision 1.1  1999/11/24 08:41:03  dg 
    new StarDataBaseConnectivity 
 
===========================================================================*/ 
#endif 
