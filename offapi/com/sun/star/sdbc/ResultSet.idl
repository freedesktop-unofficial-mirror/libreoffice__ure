/*************************************************************************
 *
 *  $RCSfile: ResultSet.idl,v $
 *
 *  $Revision: 1.9 $
 *
 *  last change: $Author: vg $ $Date: 2003-06-10 11:15:49 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/
#ifndef __com_sun_star_sdbc_ResultSet_idl__ 
#define __com_sun_star_sdbc_ResultSet_idl__ 
 
#ifndef __com_sun_star_lang_XComponent_idl__ 
#include <com/sun/star/lang/XComponent.idl> 
#endif 
 
#ifndef __com_sun_star_beans_XPropertySet_idl__ 
#include <com/sun/star/beans/XPropertySet.idl> 
#endif 
 
#ifndef __com_sun_star_util_XCancellable_idl__ 
#include <com/sun/star/util/XCancellable.idl> 
#endif 
 
 module com {  module sun {  module star {  module sdbc { 
 
interface XStatement; 
interface XRow; 
interface XRowUpdate; 
interface XResultSet; 
interface XResultSetUpdate; 
interface XResultSetMetaDataSupplier; 
interface XWarningsSupplier; 
interface XColumnLocate; 
interface XCloseable; 
 
 
// DocMerge from xml: service com::sun::star::sdbc::ResultSet
/** provides access to a table of data. A ResultSet
    object is usually generated by executing a Statement.
    
    
    
    <p>
    A ResultSet maintains a cursor pointing to its current row of
    data. Initially the cursor is positioned before the first row.
    The 'next' method moves the cursor to the next row.
    </p>
    <p>
    The getXXX methods retrieve column values for the current
    row. You can retrieve values using either the index number of the
    column. Columns are numbered from 1.
    </p>
    <p>
    For maximum portability, ResultSet columns within each row should be
    read in left-to-right order and each column should be read only once.
    </p>
    <p>
    For the getXXX methods, the SDBC driver attempts to convert the
    underlying data to the specified type and returns a suitable
    value.
    </p>
    <p>
    Column names used as input to the findColumn method are case
    insensitive. When several columns have the same name, then the value
    of the first matching column will be returned. The column name option is
    designed to be used when column names are used in the SQL
    query. For columns that are NOT explicitly named in the query, it
    is best to use column numbers. If column names are used, there is
    no way for the programmer to guarantee that they actually refer to
    the intended columns.
    </p>
    <p>
    A ResultSet is automatically closed (disposed) by the Statement that
    generated it when that Statement is closed, re-executed, or used
    to retrieve the next result from a sequence of multiple results.
    </p>
    <p>
    The number, types, and properties of a ResultSet's columns are
    provided by the ResultSetMetaData object returned by the getMetaData
    method.
    </p>
 */
service ResultSet
{ 
     
    // DocMerge from xml: service com::sun::star::sdbc::ResultSet: interface com::sun::star::lang::XComponent
    /** optional for implementation; controls the releasing of resources 
             and the notification of registered listeners.
     */
    [optional] interface com::sun::star::lang::XComponent; 
 
     
    // DocMerge from xml: service com::sun::star::sdbc::ResultSet: interface com::sun::star::sdbc::XCloseable
    /** freeing all resources of a result set.  
             
                <p>
                The creating statement will still be open after disposing. 
                </p>
         
                <p>
                This interface is mandatory only for JDBC conformance, 
                otherwise it is optional.
                </p>
     */
    [optional] interface XCloseable; 
 
    // gives access to the properties.
    interface com::sun::star::beans::XPropertySet; 
 
     
    // DocMerge from xml: service com::sun::star::sdbc::ResultSet: interface com::sun::star::sdbc::XWarningsSupplier
    /** controls the chaining of warnings, which may occur on every call 
                to the connected database.  
              
                 <p>
                Chained warnings from previous calls will be cleared before processing a new call. 
                </p>
         
                <p>
                This interface is mandatory only for JDBC conformance, otherwise it is optional.
                </p>
     */
    [optional] interface XWarningsSupplier; 
 
     
    // DocMerge from xml: service com::sun::star::sdbc::ResultSet: interface com::sun::star::sdbc::XResultSetMetaDataSupplier
    /** provides the access to the result set description.
     */
    interface XResultSetMetaDataSupplier; 
 
     
    // DocMerge from xml: service com::sun::star::sdbc::ResultSet: interface com::sun::star::sdbc::XResultSet
    /** is the interface for navigating on the rows on a result set.
     */
    interface XResultSet; 
 
     
    // DocMerge from xml: service com::sun::star::sdbc::ResultSet: interface com::sun::star::sdbc::XResultSetUpdate
    /** is the interface for updating row data to the database.  
             
                <p>
                The implementation is optional.
                </p>
     */
    [optional] interface XResultSetUpdate; 
 
     
    // DocMerge from xml: service com::sun::star::sdbc::ResultSet: interface com::sun::star::sdbc::XRow
    /** is the interface for accessing the data of the current row.
     */
    interface XRow; 
 
     
    // DocMerge from xml: service com::sun::star::sdbc::ResultSet: interface com::sun::star::sdbc::XColumnLocate
    /** is used for locating a column by it's name.
     */
    interface XColumnLocate; 
 
     
    // DocMerge from xml: service com::sun::star::sdbc::ResultSet: interface com::sun::star::sdbc::XRowUpdate
    /** is the interface for updating the data of the current row.  
         
                <p>
                The implementation is optional.
                </p>
     */
    [optional] interface XRowUpdate; 
 
     
    // DocMerge from xml: property com::sun::star::sdbc::ResultSet::CursorName
    /** defines the SQL cursor name that will be used by subsequent Statement
        <code>execute</code>
        methods.
        
        
        <p>
        This name can then be used in SQL positioned update/delete statements to
        identify the current row in the ResultSet generated by this statement. If
        the database doesn't support positioned update/delete, this property is
        a noop. To insure that a cursor has the proper isolation level to support
        updates, the cursor's SELECT statement should be of the form
        'select for update ...'. If the 'for update' phrase is omitted,
        positioned updates may fail.
        </p>
        <p>
        <b>
        Note:
        </b>
        By definition, positioned update/delete
        execution must be done by a different Statement than the one
        which generated the ResultSet being used for positioning. Also,
        cursor names must be unique within a connection.
        </p>
     */
    [optional, readonly, property] string CursorName; 
 
     
    // DocMerge from xml: property com::sun::star::sdbc::ResultSet::ResultSetConcurrency
    /** retrieves the result set concurrency.

        @see com::sun::star::sdbc::ResultSetConcurrency
     */
    [readonly, property] long ResultSetConcurrency; 
 
     
    // DocMerge from xml: property com::sun::star::sdbc::ResultSet::ResultSetType
    /** determines the result set type.

        @see com::sun::star::sdbc::ResultSetType
     */
    [readonly, property] long ResultSetType; 
 
     
    // DocMerge from xml: property com::sun::star::sdbc::ResultSet::FetchDirection
    /** retrieves the direction for fetching rows from database tables
        that is the default for result sets generated from this
        <type scope="com::sun::star::sdbcx">Statement</type>
        object.
        <br/>
        If this <code>Statement</code> object has not set a fetch direction,
        the return value is implementation-specific.
     */
    [property] long FetchDirection; 
 
     
    // DocMerge from xml: property com::sun::star::sdbc::ResultSet::FetchSize
    /** retrieves the number of result set rows that is the default fetch size
        for result sets generated from this 
        <type scope="com::sun::star::sdbcx">Statement</type>
        object.
        <br/>
        If this
        <type scope="com::sun::star::sdbcx">Statement</type>
        object has not set a fetch size,
        the return value is implementation-specific.
     */
    [property] long FetchSize; 
}; 
 
//============================================================================= 
 
}; }; }; }; 
 
/*=========================================================================== 
===========================================================================*/ 
#endif 
