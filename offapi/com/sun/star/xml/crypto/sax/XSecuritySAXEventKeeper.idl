/*************************************************************************
 *
 *  $RCSfile: XSecuritySAXEventKeeper.idl,v $
 *
 *  $Revision: 1.3 $
 *
 *  last change: $Author: rt $ $Date: 2005-03-29 13:41:56 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/
 
//i20156 - new file for xmlsecurity module

/** -- idl definition -- **/

#ifndef __com_sun_star_xml_crypto_sax_xsecuritysaxeventkeeper_idl_
#define __com_sun_star_xml_crypto_sax_xsecuritysaxeventkeeper_idl_

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/uno/Exception.idl>
#include <com/sun/star/xml/crypto/sax/XSAXEventKeeper.idl>

module com { module sun { module star { module xml { module crypto { module sax {

/**
 * Represents the undefined security id
 */
constants ConstOfSecurityId
{
    const long UNDEFINEDSECURITYID = -1;
};

/**
 * Defines priority for the element mark's notification.
 * <p>
 * The PRI_MINIMUM priority is a value less than any practical
 * priority value, it is used when compare between different
 * priority values.
 * <p>
 * The PRI_AFTERMODIFY priority represents the notification will be 
 * sent after any internal modification has finished.
 * <p>
 * The PRI_BEFOREMODIFY proirity represents the notification will be
 * sent before any internal modification happens.
 * <p>
 * So an element mark with PRI_BEFOREMODIFY will be handled first,
 * and one with PRI_AFTERMODIFY will be handled at last.
 */
enum ElementMarkPriority
{
    MINIMUM = 1,
    AFTERMODIFY,
    BEFOREMODIFY
};

/**
 * Defines types of element mark.
 * <p>
 * the TYPEOFELEMENTMARK type represents a blocker, and the TYPEOFELEMENTCOLLECTOR
 * type represents a element collector.
 */
enum ElementMarkType
{
    ELEMENTMARK = 1,
    ELEMENTCOLLECTOR
};

/**
 * Interface of Security SAX Event Keeper.
 * <p>
 * This interface is an extension of the XSAXEventKeeper interface,
 * some security related features are added.
 */
interface XSecuritySAXEventKeeper : XSAXEventKeeper
{
    /**
     * Adds a new element collector on the next element in the SAX event
     * stream.
     *
     * @param priority                       the priority of the element collector. See
     *                                       ConstOfPriority
     * @param modifyElement                  a flag representing whether the element
     *                                       collector will modify the content of its 
     *                                       element after notification
     * @return                               the keeper id of the new element collector
     */
    long addSecurityElementCollector(
        [in] ElementMarkPriority priority,
        [in] boolean modifyElement);

    /**
     * Clones an element collector.
     *
     * @param referenceId                    the keeper id of the element collector to
     *                                       be cloned
     * @param priority                       the priority of new element collector. See
     *                                       ConstOfPriority
     * @return                               the keeper id of the new element collector
     */
    long cloneElementCollector(
        [in] long referenceId,
        [in] ElementMarkPriority priority);
    
    /**
     * Sets security id for an element mark.
     *
     * @param id           the keeper id of the element collector to be set
     * @param securityId   the security id to be set
     */
    void setSecurityId([in] long id, [in] long securityId);
};

} ; } ; } ; } ; } ; } ;


#endif

