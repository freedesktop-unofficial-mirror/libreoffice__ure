/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: ConfigurationUpdateAccess.idl,v $
 *
 *  $Revision: 1.13 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-07 22:23:10 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/
#ifndef __com_sun_star_configuration_ConfigurationUpdateAccess_idl__
#define __com_sun_star_configuration_ConfigurationUpdateAccess_idl__

#ifndef __com_sun_star_configuration_ConfigurationAccess_idl__
#include <com/sun/star/configuration/ConfigurationAccess.idl>
#endif

#ifndef __com_sun_star_configuration_SetUpdate_idl__
#include <com/sun/star/configuration/SetUpdate.idl>
#endif

#ifndef __com_sun_star_configuration_GroupUpdate_idl__
#include <com/sun/star/configuration/GroupUpdate.idl>
#endif

#ifndef __com_sun_star_configuration_UpdateRootElement_idl__
#include <com/sun/star/configuration/UpdateRootElement.idl>
#endif

//=============================================================================

module com { module sun { module star { module configuration { 

//=============================================================================
/** provides modifying access to a fragment of the configuration hierarchy.

 <p>Extends <type>ConfigurationAccess</type> to support modifying values
 or inserting and removing elements.
 </p>

 <p>Descendants of this service also implement this service
 unless they are marked <em>read-only</em> (which is indicated by attribute 
 <const scope="com::sun::star::beans">PropertyAttribute::READONLY</const>),
 in which case they only need implement <type>ConfigurationAccess</type>.
 </p>

 <p>The classification of implementations that is described for
 <type>ConfigurationAccess</type> applies to implementations of this service
 as well. Therefore an implementation will support one of several alternate
 services describing its <em>Container</em> role and one of several alternate
 services describing its <em>Element</em> role. These services are
 extensions of the respective services documented for <type>ConfigurationAccess</type>.
 </p>
 <ul>
    <li><em>Container</em> role: 
        A <em>group</em> permits changing child values.
        A <em>set</em> permits inserting and removing contained elements.
    </li>
    <li><em>Element</em> role:
        The root element of a modifiable tree provides extended functionality
        to control processing of changes for the entire tree (fragment) by
        supporting <type scope="com::sun::star::util">XChangesBatch</type>.
        For elements of a <em>set</em> or a <em>group</em> no additinal
        interfaces are supported.
    </li>
 </ul>

 @see ConfigurationProvider
    Root instances of this service can be requested from a
    <type>ConfigurationProvider</type>
*/
published service ConfigurationUpdateAccess
{
    /** is the basic service providing read access to an element of the
     configuration hierarchy and its child and descendent elements.

     <p>The <type>HierarchyAccess</type> specialization implemented will be
     further specialized to support modifying access.
     Implementations shall therefore implement one of <type>SetUpdate</type> or
     <type>GroupUpdate</type> depending on the <em>Container</em> role.
     </p>

     <p>If the <type>HierarchyElement</type> specialization that is implemented
     is <type>AccessRootElement</type>, the implementation must support the
     extended functionality of <type>UpdateRootElement</type>. Otherwise, there
     are no new requirements mandated by the <em>Element</em> role.
     </p>

    */
    service ConfigurationAccess;

    /** specializes <type>SetAccess</type> to support modifying the element.

     <p>Implemented, if this element is a <em>Set</em>.
     Otherwise service <type>GroupUpdate</type> is provided.
     </p>
    */
    [optional] service SetUpdate;

    /** specializes <type>GroupAccess</type> to support modifying contained
     data. 

     <p>Implemented, if this element is a <em>Group</em>.
     Otherwise service <type>SetUpdate</type> is provided.
     </p>
    */
    [optional] service GroupUpdate;

    /** specializes <type>AccessRootElement</type> to support transaction-like
     control over a batch of changes accumulated within the tree fragment.

     <p>Implemented, if this element is the <em>Root</em> of the whole hierarchy.
     Otherwise either <type>SetElement</type> or <type>GroupElement</type> is provided.
     </p>

     @see ConfigurationProvider
        Instances obtained from a <type>ConfigurationProvider</type> will
        implement this version of <type>HierarchyElement</type>.
    */
    [optional] service UpdateRootElement;
};

//=============================================================================

}; }; }; }; 

#endif

