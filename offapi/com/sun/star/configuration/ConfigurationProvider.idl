/*************************************************************************
 *
 *  $RCSfile: ConfigurationProvider.idl,v $
 *
 *  $Revision: 1.8 $
 *
 *  last change: $Author: jb $ $Date: 2001-04-06 16:24:30 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/
#ifndef __com_sun_star_configuration_ConfigurationProvider_idl__
#define __com_sun_star_configuration_ConfigurationProvider_idl__

#ifndef __com_sun_star_lang_XMultiServiceFactory_idl__
#include <com/sun/star/lang/XMultiServiceFactory.idl>
#endif

#ifndef __com_sun_star_lang_XComponent_idl__
#include <com/sun/star/lang/XComponent.idl>
#endif

//=============================================================================

module com { module sun { module star { module configuration { 

//=============================================================================
/** manages one, or more, complete sets of configuration data and serves as a
 factory for objects that provide access to a subset of the configuration.
 
 <p>An implementation is usually obtained from a
 <type scope="com::sun::star::lang">ServiceManager</type>. The default
 <code>com.sun.star.configuration.ConfigurationProvider</code> object, that is
 instantiated without using extra arguments, is a one instance service.
 </p>

 <!-- Dennis: Why is "global" in ()? -->
 <!-- Dennis: The <code> tag is doing nothing. -->
 <!-- Developer: IMHO it should select a fixed width font (like with <pre>).
      It does in the generated output. Maybe a preview problem ?
      The quotes were wrong, though. -->
 */
service ConfigurationProvider
{
/** allows creating access objects for specific views such as subsets and fragments
 of the configuration.
 
 <p>The parameter <var>aServiceSpecifier</var> passed to
 <member scope="com::sun::star::lang">XMultiServiceFactory::createInstanceWithArguments()</member>
 supports at least the service specifiers
 <code>"com.sun.star.configuration.ConfigurationAccess"</code> and
 <code>"com.sun.star.configuration.ConfigurationUpdateAccess"</code>.
 </p>

 <!-- Dennis: the <code> is doing nothing -->
 <!-- Developer: It does in the generated output. -->

 <p>Using the first of these requests a read-only view of the configuration.
 The object that is created implements service <type>ConfigurationAccess</type>.
 To reflect its <em>element role</em> as root of the view, it implements
 service <type>AccessRootElement</type>.
 </p>

 <!-- Dennis: The first sentence of the previous para appears to have a missing verb -->
 <!-- Developer: The verb is 'requests'. -->

 <p>Using the second form requests an updatable view of the configuration.
 The object that is created should implement service
 <type>ConfigurationUpdateAccess</type>. To reflect its <em>element role</em>
 which includes controlling updates for the whole view, it implements
 service <type>UpdateRootElement</type>.
 <BR />If the root element of the view is marked read-only (as indicated
 by <const scope="com::sun::star::beans">PropertyAttributes::READONLY</const>),
 the implementation may either raise an exception or return a (read-only)
 <type>ConfigurationAccess</type>/<type>AccessRootElement</type> instead.
 </p>

 <!-- Dennis: <BR/> is doing nothing in the HTML -->
 <!-- Developer: Missing space before the closing slash -->

 <p>The arguments passed to 
 <member scope="com::sun::star::lang">XMultiServiceFactory::createInstanceWithArguments()</member>
 in parameter <var>aArguments</var> specify the view of the configuration that
 should be created. That is, they determine the subset of elements that can be
 accessed starting from the returned object. Each element of the argument
 sequence should be a <type scope="com::sun::star::beans">PropertyValue</type>,
 so that the parameters can be identified by name rather than by position.
 </p>

 <!-- Dennis: Is the member suppose to have a formatting effect on the HTML? -->
 <!-- Developer: Should create a hyperlink ! Preview problem or syntax ? -->

 <p>What combinations of arguments are supported depends on the service name.
 </p>

 <p>With both of the standard service-specifiers above, an implementation must
 accept a single argument named <code>nodepath</code> of type <atom>string</atom>.
 This argument must contain the absolute path to an element of the
 configuration. The view that is selected consists of the named element and
 all its decendants.
 </p>
 
 <p>Other arguments can be used to control the behavior of the view. These
 are different for different implementations. Whether and how they are used
 may also depend on the configuration store and configuration that were
 selected when the provider was created.
 </p>

 <p>An implementation must ignore unknown arguments.</p>

 <p>Some parameters that are commonly supported are:</p>

 <ul>
    <li>
       <strong>Selecting data into a view:</strong>
       <dl>
         <dt><code>"nodepath"</code> : <atom>string</atom></dt>
         <dd>specifies the location of the view root in the configuration.</dd>
         <dt><code>"depth"</code> : <atom>short</atom></dt>
         <dd>specifies that elements of the hierarchy that are more than the given
          number of nesting levels away from the root need not be included in the
          view.
         </dd>
         <dt><code>"locale"</code> : <type scope="com::sun::star::lang">Locale</type></dt>
         <dd>specifies the locale for which localized values should be 
          retrieved.
         </dd>
       </dl>

 <!-- Dennis: <dt> and <dd> tags are being generated out of order -->
 <!-- Developer: I had them wrong  -->

       <p><strong>Example:</strong> In the hierarchy
<BR /><pre>
 A - B1 - C1
   |
   - B2 - C2 (localized: de, en, fr, ..)
   |    |
   |    - C3 - D1 
   |    |    |
   |    |    - D2 - E1
   |    |    
   |    - C4 - D3 - E2 - F1
   |    |              |
   |    |              - F2
   |    |
   |    - C5
   |
   - B3
   |
   - B4 - C6 - D4 - E3  

</pre>
         <BR />selecting a view with <code>nodepath = "/A/B2"</code>,
         <code>depth = 2</code> and <code>locale = &lt;Locale for en_US&gt;</code>
         would result in the tree fragment
<BR /><pre>
(A-) B2 - C2 (en)
        |
        - C3 - D1
        |    |
        |    - D2 (..)
        |    
        - C4 - D3 (..) 
        |
        - C5

</pre>
       </p>
    </li>

    <li>
       <strong>Controlling cache behavior:</strong> (with providers that
        cache configuration data)
       <dl>
         <dt><code>"lazywrite"</code> : <atom>boolean</atom></dt>
         <dd>controls how updates are handled in the cache. If <TRUE/>, the
          cache may operate in <em>write-back</em> mode, where updates at
          first only affect the cache and are written to persistent storage
          at some later time. If <FALSE/>, the cache must operate in
          <em>write-through</em> mode, where updates are written to persistent
          storage at once - that is before
          <member scope="com::sun::star::util">XChangesBatch::commitChanges()</member>
          returns.
         </dd>

 <!-- Dennis: the data in the member is not being displayed. -->
 <!-- Developer: added missing parentheses - does this fix it ? Now seen in the generated HTML.
        BTW: It seems that <dt> and <dd> tags were in the wrong order here again -->

         <dt><code>"nocache"</code> : <atom>boolean</atom></dt>
         <dd>specifies that data for the view is not taken from the cache, but
          read directly from storage. This may entail future changes that
          become visible in the cache are not reflected in this view and that
          changes done through this view are not reflected in the cache.
          <BR /><strong>Use with caution !</strong>
         </dd>
       </dl>
    </li>
 </ul>

 <p><member scope="com::sun::star::lang">XMultiServiceFactory::createInstance()</member>
 may be unusable. Only an implementation that supports service names that can be
 used with no further arguments support this method. It should return the
 same result as if
 <member scope="com::sun::star::lang">XMultiServiceFactory::createInstanceWithArguments()</member>
 had been called using an empty sequence of arguments.
 </p>

*/
    interface com::sun::star::lang::XMultiServiceFactory;


/** allows controlling or observing the lifetime of the configuration.

 <p>The owner of the provider may dispose of this object
 using <member scope="com::sun::star::lang">XComponent::dispose</member>.
 Note that the default provider is owned by the 
 <type scope="com::sun::star::lang">ServiceManager</type> and should not be
 disposed of by user code.
 </p>

 <p>Views created by the provider generally refer to data that is managed by
  the provider. Therefore, disposing of the provider will cause all objects
  belonging to these views to be disposed of as well. This does not apply to
  <em>snapshot</em> views that have their own copy of the data, if available.
 </p>

*/
    interface com::sun::star::lang::XComponent;

};

//=============================================================================

}; }; }; }; 

#endif

