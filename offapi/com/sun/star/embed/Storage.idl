/*************************************************************************
 *
 *  $RCSfile: Storage.idl,v $
 *
 *  $Revision: 1.3 $
 *
 *  last change: $Author: hr $ $Date: 2004-05-10 18:01:41 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/

#ifndef __com_sun_star_embed_Storage_idl__
#define __com_sun_star_embed_Storage_idl__

#ifndef __com_sun_star_embed_XStorage_idl__ 
#include <com/sun/star/embed/XStorage.idl>
#endif

#ifndef __com_sun_star_embed_XEncryptionProtectedSource_idl__ 
#include <com/sun/star/embed/XEncryptionProtectedSource.idl>
#endif

#ifndef __com_sun_star_embed_XTransactedObject_idl__ 
#include <com/sun/star/embed/XTransactedObject.idl>
#endif

#ifndef __com_sun_star_embed_XTransactionBroadcaster_idl__ 
#include <com/sun/star/embed/XTransactionBroadcaster.idl>
#endif

#ifndef __com_sun_star_util_XModifiable_idl__ 
#include <com/sun/star/util/XModifiable.idl>
#endif

#ifndef __com_sun_star_container_XNameAccess_idl__ 
#include <com/sun/star/container/XNameAccess.idl>
#endif

#ifndef __com_sun_star_lang_XComponent_idl__ 
#include <com/sun/star/lang/XComponent.idl>
#endif

#ifndef __com_sun_star_beans_XPropertySet_idl__ 
#include <com/sun/star/beans/XPropertySet.idl>
#endif


//============================================================================

 module com {  module sun {  module star {  module embed {

//============================================================================
/** This is a service that allows to get access to a storage hierarchy.

    <p>
    A root storage should be retrieved by using <type>StorageFactory</type>
    service. Substorages are created through <type>XStorage</type> interface
    of a parent storage.
    </p>
 */
service Storage
{
    // -----------------------------------------------------------------------
    /** This is a general interface representing storage functionality.
        It allows to copy storages, get access to child elements and to
        control lifetime.
     */
    interface ::com::sun::star::embed::XStorage;

    // -----------------------------------------------------------------------
    /** allows to get access to storage properties.
     */
    interface ::com::sun::star::beans::XPropertySet;

    // -----------------------------------------------------------------------
    /** allows to commit or revert changes that were done for the storage.

        <p>
        If a storage is commited all changes made to it will be integrated to
        it's parent storage. This is recursive process, so the last commited
        storage should be the root one. For the package based storages commit
        of a root storage also means flashing to the related medium. If
        a storage is not commited, no changes for it or it's child elements
        will be stored.
        </p>
     */
    interface ::com::sun::star::embed::XTransactedObject;

    // -----------------------------------------------------------------------
    /** allows to track storage's transaction state.
     */
    interface ::com::sun::star::embed::XTransactionBroadcaster;

    // -----------------------------------------------------------------------
    /** allows to set password to a root storage.
    
        <p>
        This interface can be supported by a storage to allow to set
        a common storage password. This password is used as default password
        to decrypt all encrypted streams and to encrypt streams that are
        marked to use common storage password on storing.
        Specifying of the password for a storage allows to use it for the
        whole subtree. Of course substorage can allow to overwrite the common
        storage password for own subtree.
        </p>
     */
    [optional]
    interface ::com::sun::star::embed::XEncryptionProtectedSource;

    // -----------------------------------------------------------------------
    /** allows to get and set the media type of the storage.
     */
    [property] string MediaType;

    // -----------------------------------------------------------------------
    /** allows to detect whether the storage is a root one.
     */
    [property, readonly] boolean IsRoot;

    // -----------------------------------------------------------------------
    /** allows to get the mode the storage is opened in.

        <p>
        Can be a combination of values from <type>ElementModes</type>.
        </p>
     */
    [property, readonly] long OpenMode;

    // -----------------------------------------------------------------------
    /** allows to retrieve URL the storage is based on.
     */
    [property, optional, readonly] string URL;

    // -----------------------------------------------------------------------
    /** allows to detect whether storage is open in "repair package" mode or
        not.
     */
    [property, optional, readonly] boolean RepairPackage;

    // -----------------------------------------------------------------------
    /** allows to detect if the storage contains encrypted entries

        <p>
        In case it is set to <TRUE/> the storage itself and/or a tree of
        substorages contain encrypted streams. Usually in case this property
        is supported the implementation supports
        <type>XEncryptionProtectedSource</type> interface.
        </p>
     */
    [property, optional, readonly] boolean HasEncryptedEntries;
};

//============================================================================

}; }; }; };

#endif

