/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: EmbedMapUnits.idl,v $
 *
 *  $Revision: 1.3 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-08 00:02:22 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/
#ifndef __com_sun_star_embed_EmbedMapUnits_idl__
#define __com_sun_star_embed_EmbedMapUnits_idl__


//============================================================================

module com { module sun { module star { module embed {

//============================================================================
/** contains list of possible map modes supported by embedded object.

    @see XVisualObject
*/
constants EmbedMapUnits
{
    // ----------------------------------------------------------------------
    /** In this type of map mode one logical point is equal to one-hundredth
        of milimetre.
     */
    const long ONE_100TH_MM = 0;

    // ----------------------------------------------------------------------
    /** In this type of map mode one logical point is equal to one-tenth
        of milimetre.
     */
    const long ONE_10TH_MM = 1;

    // ----------------------------------------------------------------------
    /** In this type of map mode one logical point is equal to one
        milimetre.
     */
    const long ONE_MM = 2;

    // ----------------------------------------------------------------------
    /** In this type of map mode one logical point is equal to one
        centimetre.
     */
    const long ONE_CM = 3;

    // ----------------------------------------------------------------------
    /** In this type of map mode one logical point is equal to one-thousandth
        of inch.
     */
    const long ONE_1000TH_INCH = 4;

    // ----------------------------------------------------------------------
    /** In this type of map mode one logical point is equal to one-hundredth
        of inch.
     */
    const long ONE_100TH_INCH = 5;

    // ----------------------------------------------------------------------
    /** In this type of map mode one logical point is equal to one-tenth
        of inch.
     */
    const long ONE_10TH_INCH = 6;

    // ----------------------------------------------------------------------
    /** In this type of map mode one logical point is equal to one inch.
     */
    const long ONE_INCH = 7;

    // ----------------------------------------------------------------------
    /** In this type of map mode one logical point is equal to one
        typographical point.
     */
    const long POINT = 8;

    // ----------------------------------------------------------------------
    /** In this type of map mode one logical point is equal to one twentieth
        of typographical point.
     */
    const long TWIP = 9;

    // ----------------------------------------------------------------------
    /** In this type of map mode one logical point is equal to one pixel.
     */
    const long PIXEL = 10;
};

//=============================================================================

}; }; }; };

#endif

