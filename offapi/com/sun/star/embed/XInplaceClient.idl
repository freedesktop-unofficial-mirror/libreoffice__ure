/*************************************************************************
 *
 *  $RCSfile: XInplaceClient.idl,v $
 *
 *  $Revision: 1.3 $
 *
 *  last change: $Author: hr $ $Date: 2004-05-10 18:05:53 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/
#ifndef __com_sun_star_embed_XInplaceClient_idl__
#define __com_sun_star_embed_XInplaceClient_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

#ifndef __com_sun_star_container_XIndexAccess_idl__
#include <com/sun/star/container/XIndexAccess.idl>
#endif

#ifndef __drafts_com_sun_star_frame_XLayoutManager_idl__
#include <drafts/com/sun/star/frame/XLayoutManager.idl>
#endif

#ifndef __com_sun_star_awt_XWindow_idl__
#include <com/sun/star/awt/XWindow.idl>
#endif

#ifndef __com_sun_star_awt_Rectangle_idl__
#include <com/sun/star/awt/Rectangle.idl>
#endif

#ifndef __com_sun_star_awt_Size_idl__
#include <com/sun/star/awt/Size.idl>
#endif

#ifndef __com_sun_star_awt_KeyEvent_idl__
#include <com/sun/star/awt/KeyEvent.idl>
#endif

#ifndef __com_sun_star_embed_WrongStateException_idl__
#include <com/sun/star/embed/WrongStateException.idl>
#endif


//============================================================================

 module com {  module sun {  module star {  module embed {

//============================================================================
/** represents common functionality for inplace clients.
 */
interface XInplaceClient: com::sun::star::uno::XInterface
{
    //------------------------------------------------------------------------
    /** checks if the container can activate the object inplace.

        @return
            <TRUE/> the container can activate the object inplace.
            <FALSE/> otherwise.
     */
    boolean canInplaceActivate();

    //------------------------------------------------------------------------
    /** notifies container through the client that the object is to be
        inplace activated.

        @throws com::sun::star::embed::WrongStateException
            the container is not ready for activation
     */
    void activatingInplace()
        raises( ::com::sun::star::embed::WrongStateException );

    //------------------------------------------------------------------------
    /** notifies container through the client that the object is to be
        UI-activated.

        @throws com::sun::star::embed::WrongStateException
            the container is not ready for activation
     */
    void activatingUI()
        raises( ::com::sun::star::embed::WrongStateException );

    //------------------------------------------------------------------------
    /** notifies container through the client that the object is deactivated.

        @throws com::sun::star::embed::WrongStateException
            the container is not ready for deactivation
     */
    void deactivatedInplace()
        raises( ::com::sun::star::embed::WrongStateException );

    //------------------------------------------------------------------------
    /** notifies container through the client that the object is
        UI-deactivated.
        
        <p>
        After this notification the container can restore it's own UI and take focus.
        </p>

        @throws com::sun::star::embed::WrongStateException
            the container is not ready for deactivation
     */
    void deactivatedUI()
        raises( ::com::sun::star::embed::WrongStateException );


    //------------------------------------------------------------------------
    /** allows to retrieve top window represented by reference to
        <type scope="com::sun::star::awt">XWindow</type>.
    
        @return
            reference to object representing the topmost container window

        @throws com::sun::star::embed::WrongStateException
            the object is in unexpected state to make such request
     */
    ::com::sun::star::awt::XWindow getTopWindow()
        raises( ::com::sun::star::embed::WrongStateException );

    //------------------------------------------------------------------------
    /** allows to retrieve component window represented by reference to
        <type scope="com::sun::star::awt">XWindow</type>.
        
        @return
            reference to object representing the container document window

        @throws com::sun::star::embed::WrongStateException
            the object is in unexpected state to make such request
     */
    ::com::sun::star::awt::XWindow getDocumentWindow()
        raises( ::com::sun::star::embed::WrongStateException );

    //------------------------------------------------------------------------
    /** allows to retrieve the 
        <type scope="com::sun::star::frame">LayoutManager</type> of the
        container.
        
        @return
            reference to object representing the 
            <type scope="com::sun::star::frame">LayoutManager</type> of the
            container

        @throws com::sun::star::embed::WrongStateException
            the object is in unexpected state to make such request
     */
    ::drafts::com::sun::star::frame::XLayoutManager getLayoutManager()
        raises( ::com::sun::star::embed::WrongStateException );

    //------------------------------------------------------------------------
    /** allows to retrieve the container's inplace menubar part.
        
        @return
            reference to object implementing the
            <type scope="com::sun::star::container">XIndexAccess</type>

        @throws com::sun::star::embed::WrongStateException
            the object is in unexpected state to make such request
     */
    ::com::sun::star::container::XIndexAccess getInplaceMenu()
        raises( ::com::sun::star::embed::WrongStateException );

    //------------------------------------------------------------------------
    /** gets the inplace object position rectangle.

        <p>
        The rectangle is provided in object's parent window coordinates in
        pixels. The intersection of position and clip rectangles specifies
        the visible part of the object. In case the position window has a size
        that is bigger than object's size, the object should either scale or
        deactivate.
        </p>

        @return
            specifies a new position rectangle

        @throws com::sun::star::embed::WrongStateException
            the object is in unexpected state to make such request
     */
    ::com::sun::star::awt::Rectangle getPlacement()
        raises( ::com::sun::star::embed::WrongStateException );

    //------------------------------------------------------------------------
    /** gets the inplace object clip rectangle.

        <p>
        The rectangle is provided in object's parent window coordinates in
        pixels. The intersection of position and clip rectangles specifies
        the visible part of the object. 
        </p>

        @return
            specifies a new clip rectangle

        @throws com::sun::star::embed::WrongStateException
            the object is in unexpected state to make such request
     */
    ::com::sun::star::awt::Rectangle getClipRectangle()
        raises( ::com::sun::star::embed::WrongStateException );

    //------------------------------------------------------------------------
    /** provides accelerator table the object whants to use while it is
        inplace active.

        @param aKeys
            an accelerator table from object

        @throws com::sun::star::embed::WrongStateException
            the object is in unexpected state
    */
    void translateAccelerators( [in] sequence< ::com::sun::star::awt::KeyEvent > aKeys )
        raises( ::com::sun::star::embed::WrongStateException );

    //------------------------------------------------------------------------
    /** scrolls the object.

        @param aOffset
            scrolls the object to specified offset in pixels

        @throws com::sun::star::embed::WrongStateException
            the object is in unexpected state
     */
    void scrollObject( [in] ::com::sun::star::awt::Size aOffset )
        raises( ::com::sun::star::embed::WrongStateException );

    //------------------------------------------------------------------------
    /** notifies the container that the position of the object is changed.

        @param aPosRect
            specifies a new position rectangle

        @throws com::sun::star::embed::WrongStateException
            the object state is not correct

        @throws com::sun::star::uno::Exception
            in case of other problems
     */
    void changedPlacement( [in] ::com::sun::star::awt::Rectangle aPosRect )
        raises( ::com::sun::star::embed::WrongStateException,
                ::com::sun::star::uno::Exception );
};

//============================================================================

}; }; }; };

#endif

