/*************************************************************************
 *
 *  $RCSfile: XStorage.idl,v $
 *
 *  $Revision: 1.4 $
 *
 *  last change: $Author: hr $ $Date: 2004-05-10 18:07:40 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/
#ifndef __com_sun_star_embed_XStorage_idl__
#define __com_sun_star_embed_XStorage_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

#ifndef __com_sun_star_io_XStream_idl__
#include <com/sun/star/io/XStream.idl>
#endif

#ifndef __com_sun_star_io_XInputStream_idl__
#include <com/sun/star/io/XInputStream.idl>
#endif

#ifndef __com_sun_star_io_IOException_idl__
#include <com/sun/star/io/IOException.idl>
#endif

#ifndef __com_sun_star_lang_XComponent_idl__
#include <com/sun/star/lang/XComponent.idl>
#endif

#ifndef __com_sun_star_lang_IllegalArgumentException_idl__
#include <com/sun/star/lang/IllegalArgumentException.idl>
#endif

#ifndef __com_sun_star_embed_StorageWrappedTargetException_idl__
#include <com/sun/star/embed/StorageWrappedTargetException.idl>
#endif

#ifndef __com_sun_star_embed_InvalidStorageException_idl__
#include <com/sun/star/embed/InvalidStorageException.idl>
#endif

#ifndef __com_sun_star_packages_WrongPasswordException_idl__
#include <com/sun/star/packages/WrongPasswordException.idl>
#endif

#ifndef __com_sun_star_container_XNameAccess_idl__
#include <com/sun/star/container/XNameAccess.idl>
#endif

#ifndef __com_sun_star_container_NoSuchElementException_idl__
#include <com/sun/star/container/NoSuchElementException.idl>
#endif

#ifndef __com_sun_star_container_ElementExistException_idl__
#include <com/sun/star/container/ElementExistException.idl>
#endif

#ifndef __com_sun_star_packages_NoEncryptionException_idl__
#include <com/sun/star/packages/NoEncryptionException.idl>
#endif

#ifndef __com_sun_star_packages_NoRawFormatException_idl__
#include <com/sun/star/packages/NoRawFormatException.idl>
#endif


//============================================================================

 module com {  module sun {  module star {  module embed {

//============================================================================
/** This interface represents main storage functionality.
 */
interface XStorage
{
    // INTERFACES
    //
    // -----------------------------------------------------------------------
    /** allows to get list of child elements and to check if an element with a
        specified name exists in a storage.

        <p>
        It is also possible to use this interface to get read access to
        a child element by
        <method scope="com::sun::star::container">XNameAccess::getByName</method>
        call. But the recommended way is to use <type>XStorage</type>
        interface for this purpose.
        </p>
     */
    interface ::com::sun::star::container::XNameAccess;

    // -----------------------------------------------------------------------
    /** allows to controll and track lifetime of the storage.

        <p>
        A root storage is created by <type>StorageFactory</type> and is
        controlled by refcounting. In case refcounting is decreased to zero
        the storage will be disposed automatically. It is still strongly
        recommended that a root storage is disposed explicitly since in
        garbage collector based languages the refcounting can be decreased too
        late and resources locked by the storage will not be freed until then.
        </p>

        <p>
        A substorage is created by <type>XStorage</type> interface of storage.
        Each time a substorage is opened it is locked ( in case it is opened
        in readonly mode it is locked for writing, in case it is opened in
        read-write mode it is locked for reading and writing ) until it is
        disposed.  The lifetime of substorage is also controlled by
        refcounting but because of mentioned garbage collection specific it is
        strongly recommended to dispose substorages explicitly.
        </p>

        <p>
        In case a storage object is disposed all the elements ( substorages
        and substreams ) retrieved from the object are disposed.
        If the storage was opened in read-write mode all noncommited changes
        will be lost.
        </p>

        <p>
        In case a storage is disposed any call to it's methods should result
        in <type scope="com::sun::star::lang">DisposedException</type>.
        </p>
     */
    interface ::com::sun::star::lang::XComponent;


    // METHODS
    //
    // -----------------------------------------------------------------------
    /** allows to copy current storage to another one

        <p>
        The destination storage contents are overwritten.
        After the successful copying the target storage is automatically
        commited.
        </p>

        @param xDest
            a destination storage this storage must be copied to.

        @throws ::com::sun::star::embed::InvalidStorageException
            this storage is in invalid state for any reason

        @throws ::com::sun::star::lang::IllegalArgumentException
            an illegal argument is provided

        @throws ::com::sun::star::io::IOException
            in case of io errors during copying

        @throws ::com::sun::star::embed::StorageWrappedTargetException
            wraps other exception acquired during copying
     */
    void copyToStorage( [in] XStorage xDest )
        raises( ::com::sun::star::embed::InvalidStorageException,
                ::com::sun::star::lang::IllegalArgumentException,
                ::com::sun::star::io::IOException,
                ::com::sun::star::embed::StorageWrappedTargetException );

    // -----------------------------------------------------------------------
    /** allows to get access to a child stream of the storage.

        <p>
        If the child stream is an encrypted one a corect common storage
        password should be set through <type>XEncryptionProtectedSource</type>
        interface to this storage or to a one of storages in parent hierarchy.
        In case the password is not set or is a wrong one an exception will be
        thrown.
        </p>

        <p>
        This method returns <type>StorageStream</type> service
        implementation. In case the stream is open in readonly mode the
        <method scope="com::sun::star::io">XStream::getOutputStream</method>
        method will return an empty reference.
        </p>

        @param sStreamName
            the name of the substream that should be open
    
        @param nOpenMode
            a mode the stream should be open in,
            can be a combination of <type>ElementModes</type> values

        @throws ::com::sun::star::embed::InvalidStorageException
            this storage is in invalid state for any reason
    
        @throws ::com::sun::star::lang::IllegalArgumentException
            one of provided arguments is illegal

        @throws ::com::sun::star::packages::WrongPasswordException
            the provided password is wrong

        @throws ::com::sun::star::io::IOException
            in case of io errors during stream opening

        @throws ::com::sun::star::embed::StorageWrappedTargetException
            wraps other exceptions
     */
    ::com::sun::star::io::XStream  openStreamElement(
            [in] string sStreamName,
            [in] long nOpenMode )
        raises( ::com::sun::star::embed::InvalidStorageException,
                ::com::sun::star::lang::IllegalArgumentException,
                ::com::sun::star::packages::WrongPasswordException,
                ::com::sun::star::io::IOException,
                ::com::sun::star::embed::StorageWrappedTargetException );

    // -----------------------------------------------------------------------
    /** allows to get access to a child encrypted stream with password.

        <p>
        This method allows to specify reading password for the stream
        explicitly. The password will be used to read the stream. It is
        possible to specify a new password for stream storing through
        <type>XEncryptionProtectedSource</type> interface. In case a new
        password is not specified an old one will be used for storing.
        </p>

        @param sStreamName
            the name of the substream that should be open
    
        @param nOpenMode
            a mode the stream should be open in,
            can be a combination of <type>ElementModes</type> values

        @param sPassword
            this parameter allowes to specify a reading password for the
            stream, the password must be a correct one, otherwise an
            exception will be thrown

        @throws ::com::sun::star::embed::InvalidStorageException
            this storage is in invalid state for any reason

        @throws ::com::sun::star::lang::IllegalArgumentException
            one of provided arguments is illegal

        @throws ::com::sun::star::packages::NoEncryptionException
            the stream is not encrypted

        @throws ::com::sun::star::packages::WrongPasswordException
            the provided password is wrong

        @throws ::com::sun::star::io::IOException
            in case of io errors during stream opening

        @throws ::com::sun::star::embed::StorageWrappedTargetException
            wraps other exceptions
     */
    ::com::sun::star::io::XStream  openEncryptedStreamElement(
            [in] string sStreamName,
            [in] long nOpenMode,
            [in] string sPassword )
        raises( ::com::sun::star::embed::InvalidStorageException,
                ::com::sun::star::lang::IllegalArgumentException,
                ::com::sun::star::packages::NoEncryptionException,
                ::com::sun::star::packages::WrongPasswordException,
                ::com::sun::star::io::IOException,
                ::com::sun::star::embed::StorageWrappedTargetException );

    // -----------------------------------------------------------------------
    /** allows to get access to a child storage.

        <p>
        This method returns <type>Storage</type> service implementation.
        The opened substorage must support specified in 'nOpenMode' access
        modes. It can support 'read' mode in addition. But any child element
        can support one of those modes only in case this mode is supported by
        parent storage.
        </p>

        @param sStorName
            the name of the storage that should be open

        @param nOpenMode
            a mode the storage should be open in

        @throws ::com::sun::star::embed::InvalidStorageException
            this storage is in invalid state for any reason

        @throws ::com::sun::star::lang::IllegalArgumentException
            one of provided arguments is illegal

        @throws ::com::sun::star::io::IOException
            in case of io errors during stream opening

        @throws ::com::sun::star::embed::StorageWrappedTargetException
            wraps other exceptions

     */
    XStorage openStorageElement( [in] string sStorName,
                                 [in] long nOpenMode )
        raises( ::com::sun::star::embed::InvalidStorageException,
                ::com::sun::star::lang::IllegalArgumentException,
                ::com::sun::star::io::IOException,
                ::com::sun::star::embed::StorageWrappedTargetException );

    // -----------------------------------------------------------------------
    /** allows to get readonly copy of a child stream of the storage.

        <p>
        This method returns <type>StorageStream</type> service implementation.
        The stream is open in readonly mode so the
        <method scope="com::sun::star::io">XStream::getOutputStream</method>
        method will return an empty reference.
        </p>

        <p>
        The latest flashed version of the stream will be used. The stream can
        be flashed explicitly by
        <method scope="com::sun::star::io">XOutputStream::flush</method> call.
        A storage flashes on commit all the child streams it owns. So in case
        after the stream is changed neither the storage was commited nor the
        stream was flashed explicitly, the changes will not appear in the new
        created stream. This method allows to retrieve copy of a child stream
        even in case it is already opened for writing.
        </p>

        <p>
        If the child stream is an encrypted one a corect common storage
        password should be set through <type>XEncryptionProtectedSource</type>
        interface to this storage or to a one of storages in parent
        hierarchy. In case the password is not set or is a wrong one an
        exception will be thrown.
        </p>

        @param sStreamName
            the name of the substream that should be copied
    
        @throws ::com::sun::star::embed::InvalidStorageException
            this storage is in invalid state for any reason

        @throws ::com::sun::star::lang::IllegalArgumentException
            one of provided arguments is illegal

        @throws ::com::sun::star::packages::WrongPasswordException
            the provided password is wrong

        @throws ::com::sun::star::io::IOException
            in case of io errors during stream opening

        @throws ::com::sun::star::embed::StorageWrappedTargetException
            wraps other exceptions
     */
    ::com::sun::star::io::XStream cloneStreamElement( [in] string sStreamName )
        raises( ::com::sun::star::embed::InvalidStorageException,
                ::com::sun::star::lang::IllegalArgumentException,
                ::com::sun::star::packages::WrongPasswordException,
                ::com::sun::star::io::IOException,
                ::com::sun::star::embed::StorageWrappedTargetException );

    // -----------------------------------------------------------------------
    /** allows to get readonly copy of a child encrypted stream with password.

        <p>
        This method returns <type>StorageStream</type> service implementation.
        The stream is open in readonly mode so the
        <method scope="com::sun::star::io">XStream::getOutputStream</method>
        method will return an empty reference.
        </p>

        <p>
        The latest flashed version of the stream will be used. The stream can
        be flashed explicitly by
        <method scope="com::sun::star::io">XOutputStream::flush</method> call.
        When the stream is disposed it is automatically flashed.
        A storage flashes on commit all the child streams it owns. So in case
        after the stream is changed neither the storage was commited nor the
        stream was flashed explicitly, the changes will not appear in the new
        created stream. This method allows to retrieve copy of a child stream
        even in case it is already opened for writing.
        </p>

        <p>
        This method allows to specify reading password for the child stream
        explicitly.
        </p>

        @param sStreamName
            the name of the substream that should be copied
    
        @param sPassword
            this parameter allowes to specify a reading password for the
            stream, the password must be a correct one, otherwise an
            exception will be thrown

        @throws ::com::sun::star::embed::InvalidStorageException
            this storage is in invalid state for any reason

        @throws ::com::sun::star::lang::IllegalArgumentException
            one of provided arguments is illegal

        @throws ::com::sun::star::packages::NoEncryptionException
            the stream is not encrypted

        @throws ::com::sun::star::packages::WrongPasswordException
            the provided password is wrong

        @throws ::com::sun::star::io::IOException
            in case of io errors during stream opening

        @throws ::com::sun::star::embed::StorageWrappedTargetException
            wraps other exceptions
     */
    ::com::sun::star::io::XStream cloneEncryptedStreamElement(
            [in] string sStreamName,
            [in] string sPassword )
        raises( ::com::sun::star::embed::InvalidStorageException,
                ::com::sun::star::lang::IllegalArgumentException,
                ::com::sun::star::packages::NoEncryptionException,
                ::com::sun::star::packages::WrongPasswordException,
                ::com::sun::star::io::IOException,
                ::com::sun::star::embed::StorageWrappedTargetException );

    // -----------------------------------------------------------------------
    /** allows to get copy of this storage at the state of it's last commit.

        <p>
        This method gets <type>Storage</type> service implementation and fills
        it in with the latest commited version of this storage. So in case the
        storage was not commited after it was changed, the changes will not
        appear in the new created storage. 
        </p>

        @param xStorage
            the target storage that will be filled in with copy.
    
        @throws ::com::sun::star::embed::InvalidStorageException
            this storage is in invalid state for any reason
    
        @throws ::com::sun::star::lang::IllegalArgumentException
            one of provided arguments is illegal
    
        @throws ::com::sun::star::io::IOException
            in case of io errors during copying
    
        @throws ::com::sun::star::embed::StorageWrappedTargetException
            wraps other exceptions

     */
    void copyLastCommitTo( [in] XStorage xTargetStorage )
        raises( ::com::sun::star::embed::InvalidStorageException,
                ::com::sun::star::lang::IllegalArgumentException,
                ::com::sun::star::io::IOException,
                ::com::sun::star::embed::StorageWrappedTargetException );

    // -----------------------------------------------------------------------
    /** allows to get copy of a child storage at the state of it's last commit.

        <p>
        This method gets <type>Storage</type> service implementation and fills
        it in with the contents of the requested substorage. The latest
        commited version of child storage will be used. So in case the child
        storage was not commited after it was changed, the changes will not
        appear in the new created storage. 
        </p>

        <p>
        This method allows to retrieve copy of a child storage even in case it
        is already opened for writing.
        </p>

        @param sStorName
            the name of the storage that should be copied

        @param xStorage
            the target storage that will be filled in with copy

        @throws ::com::sun::star::embed::InvalidStorageException
            this storage is in invalid state for any reason

        @throws ::com::sun::star::lang::IllegalArgumentException
            one of provided arguments is illegal

        @throws ::com::sun::star::io::IOException
            in case of io errors during copying

        @throws ::com::sun::star::embed::StorageWrappedTargetException
            wraps other exceptions

     */
    void copyStorageElementLastCommitTo(
            [in] string sStorName,
            [in] XStorage xTargetStorage )
        raises( ::com::sun::star::embed::InvalidStorageException,
                ::com::sun::star::lang::IllegalArgumentException,
                ::com::sun::star::io::IOException,
                ::com::sun::star::embed::StorageWrappedTargetException );

    // -----------------------------------------------------------------------
    /** allows to check if an element is a child stream with specified name.

        <p>
        In case there is no child element with such name an exception will be
        thrown.
        </p>

        @param sElementName
            the name of the element to check

        @returns
            <TRUE/> in case the element is a stream
            <FALSE/> - the element is a storage

        @throws ::com::sun::star::container::NoSuchElementException
            there is no element with such name

        @throws ::com::sun::star::lang::IllegalArgumentException
            an illegal argument is provided

        @throws ::com::sun::star::embed::InvalidStorageException
            this storage is in invalid state for any reason

     */
    boolean isStreamElement( [in] string sElementName )
        raises( ::com::sun::star::container::NoSuchElementException,
                ::com::sun::star::lang::IllegalArgumentException,
                ::com::sun::star::embed::InvalidStorageException );


    // -----------------------------------------------------------------------
    /** allows to check if an element is a child storage with specified name.

        <p>
        In case there is no child element with such name an exception will be thrown
        </p>

        @param sElementName
            the name of the element to check

        @returns
            <TRUE/> in case the element is a storage
            <FALSE/> - the element is a stream

        @throws ::com::sun::star::container::NoSuchElementException
            there is no element with such name

        @throws ::com::sun::star::lang::IllegalArgumentException
            an illegal argument is provided

        @throws ::com::sun::star::embed::InvalidStorageException
            this storage is in invalid state for any reason

     */
    boolean isStorageElement( [in] string sElementName )
        raises( ::com::sun::star::container::NoSuchElementException,
                ::com::sun::star::lang::IllegalArgumentException,
                ::com::sun::star::embed::InvalidStorageException );

    // -----------------------------------------------------------------------
    /** removes an element from a storage.

        <p>
        If the element is opened the removing will fail.
        </p>

        @param sElementName
            the name of the element to remove
    
        @throws ::com::sun::star::embed::InvalidStorageException
            this storage is in invalid state for eny reason

        @throws ::com::sun::star::lang::IllegalArgumentException
            an illegal argument is provided

        @throws ::com::sun::star::container::NoSuchElementException
            there is no element with such name
        
        @throws ::com::sun::star::io::IOException
            in case of io errors during removing

        @throws ::com::sun::star::embed::StorageWrappedTargetException
            wraps other exceptions

     */
    void removeElement( [in] string sElementName )
        raises( ::com::sun::star::embed::InvalidStorageException,
                ::com::sun::star::lang::IllegalArgumentException,
                ::com::sun::star::container::NoSuchElementException,
                ::com::sun::star::io::IOException,
                ::com::sun::star::embed::StorageWrappedTargetException );

    // -----------------------------------------------------------------------
    /** renames an element in a storage.

        @param sElementName
            the old name of the element to rename

        @param sNewName
            the new name of the element to rename

        @throws ::com::sun::star::embed::InvalidStorageException
            this storage is in invalid state for eny reason

        @throws ::com::sun::star::lang::IllegalArgumentException
            an illegal argument is provided

        @throws ::com::sun::star::container::NoSuchElementException
            there is no element with old name in this storage

        @throws ::com::sun::star::container::ElementExistException
            an element with new name already exists in this storage
        
        @throws ::com::sun::star::io::IOException
            in case of io errors during renaming

        @throws ::com::sun::star::embed::StorageWrappedTargetException
            wraps other exceptions

     */
    void renameElement( [in] string sElementName, [in] string sNewName )
        raises( ::com::sun::star::embed::InvalidStorageException,
                ::com::sun::star::lang::IllegalArgumentException,
                ::com::sun::star::container::NoSuchElementException,
                ::com::sun::star::container::ElementExistException,
                ::com::sun::star::io::IOException,
                ::com::sun::star::embed::StorageWrappedTargetException );

    // -----------------------------------------------------------------------
    /** allows to copy an entry from one storage to another.

        <p>
        If target element supports transacted mode it must be commited by this
        method after successful copying.
        </p>

        @param sElementName
            the name of the element in this storage

        @param xDest
            a destination storage

        @param sNewName
            the name of the result element in destination storage

        @throws ::com::sun::star::embed::InvalidStorageException
            this storage is in invalid state for eny reason

        @throws ::com::sun::star::container::NoSuchElementException
            there is no specified source element in this storage

        @throws ::com::sun::star::container::ElementExistException
            an element with specified destination name already exists in destination storage
        
        @throws ::com::sun::star::io::IOException
            in case of io errors during copying

        @throws ::com::sun::star::embed::StorageWrappedTargetException
            wraps other exceptions

     */
    void copyElementTo(
            [in] string sElementName,
            [in] XStorage xDest,
            [in] string sNewName )
        raises( ::com::sun::star::embed::InvalidStorageException,
                ::com::sun::star::lang::IllegalArgumentException,
                ::com::sun::star::container::NoSuchElementException,
                ::com::sun::star::container::ElementExistException,
                ::com::sun::star::io::IOException,
                ::com::sun::star::embed::StorageWrappedTargetException );

    // -----------------------------------------------------------------------
    /** allows to move an entry from one storage to another.

        <p>
        If target element supports transacted mode it must be commited by this
        method after successful moving.
        </p>

        @param sElementName
            the name of the element in this storage

        @param xDest
            a destination storage

        @param sNewName
            the name of the result element in destination storage

        @throws ::com::sun::star::embed::InvalidStorageException
            this storage is in invalid state for eny reason

        @throws ::com::sun::star::container::NoSuchElementException
            there is no specified source element in this storage

        @throws ::com::sun::star::container::ElementExistException
            an element with specified destination name already exists in destination storage
        
        @throws ::com::sun::star::io::IOException
            in case of io errors during moving

        @throws ::com::sun::star::embed::StorageWrappedTargetException
            wraps other exceptions

     */
    void moveElementTo(
            [in] string sElementName,
            [in] XStorage xDest,
            [in] string sNewName )
        raises( ::com::sun::star::embed::InvalidStorageException,
                ::com::sun::star::lang::IllegalArgumentException,
                ::com::sun::star::container::NoSuchElementException,
                ::com::sun::star::container::ElementExistException,
                ::com::sun::star::io::IOException,
                ::com::sun::star::embed::StorageWrappedTargetException );

    // -----------------------------------------------------------------------
    /** allows to insert a raw stream representing encrypted stream.

        <p>
        This method allows to transport encrypted streams without decryption.
        Mainly this method is introduced to allow to copy one encrypted
        storage stream to another without decryption. It is not reccomended to
        use this method outside of storage implementation.
        </p>

        @param sStreamName
            the name of the substream that should be open
    
        @param xInputStream
            a raw stream representing encrypted stream

        @throws ::com::sun::star::embed::InvalidStorageException
            this storage is in invalid state for any reason

        @throws ::com::sun::star::lang::IllegalArgumentException
            one of provided arguments is illegal

        @throws ::com::sun::star::packages::NoRawFormatException
            the stream is not one of raw package stream format

        @throws ::com::sun::star::container::ElementExistException
            an element with specified name already exists

        @throws ::com::sun::star::io::IOException
            in case of io errors during stream opening

        @throws ::com::sun::star::embed::StorageWrappedTargetException
            wraps other exceptions
     */
    void insertRawEncrStreamElement(
            [in] string sStreamName,
            [in] ::com::sun::star::io::XInputStream xInStream )
        raises( ::com::sun::star::embed::InvalidStorageException,
                ::com::sun::star::lang::IllegalArgumentException,
                ::com::sun::star::packages::NoRawFormatException,
                ::com::sun::star::container::ElementExistException,
                ::com::sun::star::io::IOException,
                ::com::sun::star::embed::StorageWrappedTargetException );

};

//============================================================================

}; }; }; };

#endif

