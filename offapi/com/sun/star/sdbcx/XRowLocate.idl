/*************************************************************************
 *
 *  $RCSfile: XRowLocate.idl,v $
 *
 *  $Revision: 1.8 $
 *
 *  last change: $Author: hr $ $Date: 2003-03-26 13:55:54 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/
#ifndef __com_sun_star_sdbcx_XRowLocate_idl__ 
#define __com_sun_star_sdbcx_XRowLocate_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
#ifndef __com_sun_star_sdbc_SQLException_idl__ 
#include <com/sun/star/sdbc/SQLException.idl> 
#endif 
 
 module com {  module sun {  module star {  module sdbcx { 
 
 
// DocMerge from xml: interface com::sun::star::sdbcx::XRowLocate
/** is used to identify rows within a result set and to find rows by a bookmark.
    
    
    <p>
    Bookmarks are only valid in the scope of the current result set and 
    are not interchangeable between result sets. A bookmark could be a complex data
    structure, so it could not be compared in a safe way. Because of that, a provider
    has to implement the compare method for bookmarks.
    </p>
 */
interface XRowLocate: com::sun::star::uno::XInterface
{ 
     
    // DocMerge from xml: method com::sun::star::sdbcx::XRowLocate::getBookmark
    /** returns the bookmark of the current row of a result set.
        @returns
            the current bookmark
        @throws com::sun::star::sdbc::SQLException 
            if a database access error occurs.
     */
    any getBookmark() raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbcx::XRowLocate::moveToBookmark
    /** moves the cursor to the row identified by an valid bookmark.
        
        <p>
        If the bookmark could not be located, a result set will be positioned
        after the last record.
        <br/>
        If the bookmark is invalid, or not generated by the current result set, then
        the behaviour is not defined, even an abnormal termination is possible.
        </p>
        @param bookmark
            the bookmark where to move
        @returns
            <TRUE/> if successful
        @throws com::sun::star::sdbc::SQLException 
            if a database access error occurs.
     */
    boolean moveToBookmark([in]any bookmark) raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbcx::XRowLocate::moveRelativeToBookmark
    /** moves the cursor a relative number of rows, either positive or negative
        starting at a given bookmark position.
        
        
        <p>
        If the bookmark could not be located, a result set will be positioned
        after the last record.
        <br/>
        If the bookmark is invalid, or not generated by the current result set, then
        the behaviour is not defined, even an abnormal termination is possible.
        </p>
        @param bookmark
            the bookmark where to move
        @param rows
            count of rows move relative to the bookmark
        @returns
            <TRUE/> if successful
        @throws com::sun::star::sdbc::SQLException 
            if a database access error occurs.
     */
    boolean moveRelativeToBookmark([in]any bookmark, [in]long rows) 
        raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbcx::XRowLocate::compareBookmarks
    /** compares two bookmarks and returns an indication of their relative values.
        
        <p>
        The bookmarks must apply to the same ResultSet. You cannot reliably
        compare bookmarks from different ResultSets, even if they were created from
        the same source or statement.
        <br/>
        A bookmark that is not valid, or incorrectly formed, will cause an exception.
        </p>
        @param first
            the first bookmark
        @param second
            the second bookmark
        @returns
            a value of <type scope="com::sun::star::sdbcx">CompareBookmark</type>
        @throws com::sun::star::sdbc::SQLException 
            if a database access error occurs.

        @see com::sun::star::sdbcx::CompareBookmark

     */
    long compareBookmarks([in]any first, [in]any second) 
        raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbcx::XRowLocate::hasOrderedBookmarks
    /** determines whether the bookmarks of a result set are ordered or not.
        @returns
            <TRUE/> if so
        @throws com::sun::star::sdbc::SQLException 
            if a database access error occurs.
        @see com::sun::star::sdbcx::CompareBookmark
     */
    boolean hasOrderedBookmarks() raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::sdbcx::XRowLocate::hashBookmark
    /** returns the hash value for a specified bookmark.
        @param bookmark
            the bookmark to hash
        @returns
            the hashed value
        @throws com::sun::star::sdbc::SQLException 
            if a database access error occurs.
     */
    long hashBookmark([in]any bookmark) raises (com::sun::star::sdbc::SQLException); 
}; 
 
//============================================================================= 
 
}; }; }; }; 
 
/*=========================================================================== 
===========================================================================*/ 
#endif 
