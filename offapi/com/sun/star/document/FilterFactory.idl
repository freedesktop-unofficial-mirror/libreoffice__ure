/*************************************************************************
 *
 *  $RCSfile: FilterFactory.idl,v $
 *
 *  $Revision: 1.3 $
 *
 *  last change: $Author: mi $ $Date: 2002-10-03 13:03:49 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/
#ifndef __com_sun_star_document_FilterFactory_idl__
#define __com_sun_star_document_FilterFactory_idl__

#ifndef __com_sun_star_lang_XMultiServiceFactory_idl__
#include <com/sun/star/lang/XMultiServiceFactory.idl>
#endif

#ifndef __com_sun_star_container_XNameAccess_idl__
#include <com/sun/star/container/XNameAccess.idl>
#endif

#ifndef __com_sun_star_container_XContainerQuery_idl__
#include <com/sun/star/container/XContainerQuery.idl>
#endif

//=============================================================================

module com { module sun { module star { module document {

//=============================================================================
/** factory to create filter objects or search on filter configuration

    <p>
    After a generic <type>TypeDetection</type> an internal type name
    will be well known (or may not if it failed to detect requested document).
    For such internal type names filters will be registered. If there are more then
    ones any of them can use the default flag to be preferred.
    This factory can be used to the follow then:
    <ul>
        <li>search on filter configuration (includes searching for suitable filter for
            a given internal type name too)
        </li>
        <li>create the filter object
        </li>
        <li>get/set properties of any registered filter.
            (means in configuration, not on the filter)
        </li>
    </ul>
    </p>
 */
service FilterFactory
{
    //-------------------------------------------------------------------------
    /** provides search on flat filter configuration

        <p>
        After a <type>TypDetection</type> an internal name of a type which presents
        the requested document will be well known. With this interface it's possible
        to find out which filter(s) are registered for that. It's possible to use
        implementation dependend query commands (strings) or sets of properties which
        must supported by searched filter(s). Returned enumerations contains a reference
        to sub sets of filter(s) (means to her flat data structures represented as
        <type scope="com::sun::star::beans" dim="[]">NamedValue</type>) which can be used
        for further steps then; e.g, to create the filter(s).
        (see list of properties below on <member>FilterFactory::XNameAccess</member>)
        </p>

        <p>
        Same functionality (for searching) will be provided by the follow interface
        <member>FilterFactory::XNameAccess</member> - but that willn't be very comfortable
        to do so.
        </p>
     */
    interface com::sun::star::container::XContainerQuery;

    //-------------------------------------------------------------------------
    /** provides simple access on flat filter configuration

        <p
        Every filter (<type>ExportFilter</type>/<type>ImportFilter</type>) is specified by
        some properties wich are represented as <type scope="com::sun::star::beans" dim="[]">NamedValue</type>.
        This interface provides pure access (read/write) on these data.
        A name for the calling methods must the internal filter name be used only.
        Returned any capsulate the flat property lists then. May this interface will be neccessary
        to extend missing funtionality of <member>FilterFactory::XContainerQuery</member> or for
        changing the configuration (if implementation of this service allow that! may they will be readonly).
        Query interface before provides readonly access only.
        </p>
        <p>
        Follow properties are supported by a filter:
        <table border=1>
            <tr>
                <td><strong>property name</strong></td>
                <td><strong>value type</strong></td>
                <td><strong>description</strong></td>
            </tr>
            <tr>
                <td><em>Type<em></td>
                <td>[string]</td>
                <td>filter is registered for this internal type name<br>
                    (see <type>TypeDetection</type> for further informations)</td>
            </tr>
            <tr>
                <td><em>UIName<em></td>
                <td>[string]</td>
                <td>localized name of filter to show at the UI</td>
            </tr>
            <tr>
                <td><em>DocumentService<em></td>
                <td>[string]</td>
                <td>service name which presents the document type<br>
                    (e.g. <type scope="com::sun::star::text">TextDocument</type>)</td>
            </tr>
            <tr>
                <td><em>FilterService<em></td>
                <td>[string]</td>
                <td>service name of filter implementation<br>
                    Note: It means the implementation name of the service realy.
                    Because it's not possible to distinguish between
                    more then one filters otherwise.</td>
            </tr>
            <tr>
                <td><em>Flags<em></td>
                <td>[integer]</td>
                <td>describe the filter more specific<br>
                    (e.g. for import/export or as default)</td>
            </tr>
            <tr>
                <td><em>UserData<em></td>
                <td>[string]</td>
                <td>contains filter specific configuration formated as string
                    for historical reasons</td>
            </tr>
            <tr>
                <td><em>FileFormatVersion<em></td>
                <td>[integer]</td>
                <td>specifies supported format version if there exist more then ones</td>
            </tr>
            <tr>
                <td><em>TemplateName<em></td>
                <td>[string]</td>
                <td>name of suitable template</td>
            </tr>
        </table>
        </p>
     */
    interface com::sun::star::container::XNameAccess;

    //-------------------------------------------------------------------------
    /** factory to create filter objects

        <p>
        After using the interfaces before (or if it was already clear) an internal
        filter name should be well known. This can be used at this interface to create
        the real filter object for using. It's possible to use optional arguments
        for initializing too.
        If created filter supports the interface <type scope="com::sun::star::lang">XInitialization</type>
        this factory will pass his own configuration data and the may given optional
        arguments to it. (see <member>ExportFilter::XInitialization</member> or
        <member>ImportFilter::XInitialization</member> for further informations about that)
        If it doesn't support it nothing will be done then. The filter will be returned
        uninitialized then and must get his configuration by another way himself.
        But he should supports the interface <type scope="com::sun::star::container">XNamed</type>
        to privide his own internal name. Any user of it can use this information
        to get more information about it on this FilterFactory service.
        Note: Return value can be <NULL/> if unknown filter was requested or
        coudln't be created successfully.
        </p>
     */
    interface com::sun::star::lang::XMultiServiceFactory;
};

//=============================================================================

}; }; }; };

#endif
