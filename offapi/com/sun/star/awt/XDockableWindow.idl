/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XDockableWindow.idl,v $
 *
 *  $Revision: 1.4 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-07 21:39:44 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/
#ifndef __com_sun_star_awt_XDockableWindow_idl__ 
#define __com_sun_star_awt_XDockableWindow_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

#ifndef __com_sun_star_awt_XDockableWindowListener_idl__ 
#include <com/sun/star/awt/XDockableWindowListener.idl> 
#endif 

#ifndef __com_sun_star_awt_Rectangle_idl__
#include <com/sun/star/awt/Rectangle.idl>
#endif
 
//============================================================================= 
 
module com {  module sun {  module star {  module awt {  
 
//============================================================================= 
 
/** specifies the docking interface for a window component.
        
    <p>A window can either be docked where it resides as a child window in
        an application frame window or it can be floating where it will
        reside in its own decorated top level window.
    </p>
 */
interface XDockableWindow : com::sun::star::uno::XInterface
{ 
     
    /** adds a docking listener to the object.
        only a single listener may be registered at any time.
     */
    void addDockableWindowListener( [in] com::sun::star::awt::XDockableWindowListener xListener ); 
 
    //------------------------------------------------------------------------- 
     
    /** removes the specified docking listener from the object.
     */
    void removeDockableWindowListener( [in] com::sun::star::awt::XDockableWindowListener xListener ); 

    //------------------------------------------------------------------------- 

    /** enable or disable docking, docking is disabled by default

        @param bEnable
            <TRUE/> specifies that docking is enabled 
            <FALSE/> specifies that docking is disabled and no
                <type scope="com::sun::star::awt">XDockableWindowListener</type> will be called
     */
    void enableDocking( [in] boolean bEnable ); 

    //------------------------------------------------------------------------- 

    /** queries the current window state
        @returns
            <TRUE/> if the window is floating
            <FALSE/> if the window is docked
     */
    boolean isFloating(); 

    //------------------------------------------------------------------------- 

    /** toggle between floating and docked state
        @param bFloating
            specifies the new floating mode:
            <TRUE/> means floating, <FALSE/> means docked
     */
    void setFloatingMode( [in] boolean bFloating ); 

    //------------------------------------------------------------------------- 

    /** prevents the window from being undocked 
        this has no effect if the window is floating
     */
    void lock(); 

    //------------------------------------------------------------------------- 

    /** enables undocking
        this has no effect if the window is floating
     */
    void unlock();

    //------------------------------------------------------------------------- 

    /** queries the current locking state
        @returns
            <TRUE/> if the window is locked
            <FALSE/> if the window is not locked
     */
    boolean isLocked(); 

    //------------------------------------------------------------------------- 

    /** shows the window in a menu like style, i.e. without decoration
        a special indicator will allow for tearing off the window
        see <type scope="com::sun::star::awt">XDockableWindowListener</type> for
        the corresponding events
        @param WindowRect
            specifies the position and size of the popup window in frame coordinates
     */
    void startPopupMode( [in] com::sun::star::awt::Rectangle WindowRect ); 

    //------------------------------------------------------------------------- 

    /** queries the current popup mode
        @returns
            <TRUE/> if the window is in popup mode
            <FALSE/> if the window is not in popup mode
     */
    boolean isInPopupMode(); 
}; 
 
//============================================================================= 
 
}; }; }; };  
 
#endif 
