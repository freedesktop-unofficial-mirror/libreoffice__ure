/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XUserInputInterception.idl,v $
 *
 *  $Revision: 1.7 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-07 21:58:26 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/

#ifndef __com_sun_star_awt_XUserInputInterception_idl__
#define __com_sun_star_awt_XUserInputInterception_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

#ifndef __com_sun_star_awt_XKeyHandler_idl__
#include <com/sun/star/awt/XKeyHandler.idl>
#endif

#ifndef __com_sun_star_awt_XMouseClickHandler_idl__
#include <com/sun/star/awt/XMouseClickHandler.idl>
#endif

module com {  module sun {  module star {  module awt {

/** Interface to add handlers for key and mouse events. A handler is not a passive
   listener, it can even consume the event.
   
    @since OOo 1.1.2
 */
published interface XUserInputInterception : ::com::sun::star::uno::XInterface
{
    /** Add a new listener that is called on <type
        scope="::com::sun::star::awt">KeyEvent</type>s.  Every listener is
        given the opportunity to consume the event, i.e. prevent the not yet
        called listeners from being called.
        @param xHandler
            If this is a valid reference it is inserted into the list of
            handlers.  It is the task of the caller to not register the
            same handler twice (otherwise that listener will be called
            twice.)
    */
    [oneway] void addKeyHandler (
        [in] ::com::sun::star::awt::XKeyHandler xHandler);


    /** Remove the specified listener from the list of listeners.
        @param xHandler
            If the reference is empty then nothing will be changed.  If the
            handler has been registered twice (or more) then all refrences
            will be removed.
    */
    [oneway] void removeKeyHandler (
        [in] ::com::sun::star::awt::XKeyHandler xHandler);

    /** Add a new listener that is called on <type
        scope="::com::sun::star::awt">MouseEvent</type>s.  Every listener is
        given the opportunity to consume the event, i.e. prevent the not yet
        called listeners from being called.
        @param xHandler
            If this is a valid reference it is inserted into the list of
            handlers.  It is the task of the caller to not register the
            same handler twice (otherwise that listener will be called
            twice.)
    */
    [oneway] void addMouseClickHandler (
        [in] ::com::sun::star::awt::XMouseClickHandler xHandler);

    /** Remove the specified listener from the list of listeners.
        @param xHandler
            If the reference is empty then nothing will be changed.  If the
            handler has been registered twice (or more) then all refrences
            will be removed.
    */
    [oneway] void removeMouseClickHandler (
        [in] ::com::sun::star::awt::XMouseClickHandler xHandler);
};

}; }; }; };

#endif
