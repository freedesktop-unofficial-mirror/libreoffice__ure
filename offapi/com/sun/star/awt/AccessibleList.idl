/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: AccessibleList.idl,v $
 *
 *  $Revision: 1.8 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-07 20:50:04 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/

#ifndef __com_sun_star_awt_AccessibleList_idl__
#define __com_sun_star_awt_AccessibleList_idl__

#ifndef __com_sun_star_accessibility_AccessibleContext_idl__
#include <com/sun/star/accessibility/AccessibleContext.idl>
#endif

module com { module sun { module star { module accessibility {

 published interface XAccessible;
 published interface XAccessibleExtendedComponent;
 published interface XAccessibleComponent;
 published interface XAccessibleSelection;

}; }; }; };

module com { module sun { module star { module awt {



/** Accessible lists are used by combo boxes as container for
    the list items.

    @see com::sun::star::accessibility::AccessibleContext

    @see com::sun::star::accessibility::XAccessibleComponent
    @see com::sun::star::accessibility::XAccessibleExtendedComponent
    @see ::com::sun::star::accessibility::XAccessibleSelection

    @since OOo 1.1.2
*/    
published service AccessibleList
{
    /** This interface gives access to the structural information of a list:

       <ul>
       <li>Role: The role of a list is <const 
           scope="::com::sun::star::accessibility"
           >AccessibleRole::LIST</const>.</li>
       <li>Name: The name of a list is its localized label.</li>
       <li>Description: The description of a list is its localized
           help text.</li>
       <li>Children: There exists children. 
            Each child is of type <type scope="com::sun::star::awt">AccessibleListItem</type>. </li>
       <li>Parent: The parent can be of type 
            <ul>
            <li>
                <type scope="com::sun::star::awt">AccessibleComboBox</type>
                <type scope="com::sun::star::awt">AccessibleListBox</type>
                <type scope="com::sun::star::awt">AccessibleDropDownListBox</type>
                <type scope="com::sun::star::awt">AccessibleDropDownComboBox</type>
            </li>
            .
       </li>
       <li>Relations: There are no relations.</li>
       <li>States: The states supported by this service are
           <ul>
           <li><const scope="com::sun::star::accessibility"
               >AccessibleStateType::DEFUNC</const>
               is set if the object has already been disposed
               and subsequent calls to this object result in				
               <type scope="com::sun::star::lang">DisposedException</type>
               exceptions.</li>
           <li><const scope="com::sun::star::accessibility"
               >AccessibleStateType::ENABLED</const> is set
               if the object is enabled.</li>
           <li><const scope="com::sun::star::accessibility"
               >AccessibleStateType::FOCUSABLE</const> is always set.</li>
           <li><const scope="com::sun::star::accessibility"
               >AccessibleStateType::FOCUSED</const> is set
               if the object currently has the keyboard focus.</li>
           <li><const scope="com::sun::star::accessibility"
               >AccessibleStateType::ACTIVE</const> is set
               if a child has currently the focus.</li>
           <li><const scope="com::sun::star::accessibility"
               >AccessibleStateType::RESIZABLE</const> is set
               if the object can be resized.</li>
           <li><const scope="com::sun::star::accessibility"
               >AccessibleStateType::SHOWING</const> is set
               if the object is displayed on the screen.</li>
           <li><const scope="com::sun::star::accessibility"
               >AccessibleStateType::VISIBLE</const> is always set.</li>
           <li><const scope="com::sun::star::accessibility"
               >AccessibleStateType::MULTI_SELECTABLE</const> is set 
               if the list supports multi selection.</li>
           <li><const scope="com::sun::star::accessibility"
               >AccessibleStateType::MANAGES_DESCENDANTS</const> is always set. 
               The children are transient.</li>
           </ul>
           </li>
       </ul>
    */
    service   com::sun::star::accessibility::AccessibleContext;

    interface com::sun::star::accessibility::XAccessibleComponent;
    interface com::sun::star::accessibility::XAccessibleExtendedComponent;

    /** Support of the <type scope="com::sun::star::accessibility">XAccessible</type> interface may be
        discontinued in the future.
    */
    interface com::sun::star::accessibility::XAccessible;

    /** This interface gives access to the selectable children of a
        list.
     */
    interface com::sun::star::accessibility::XAccessibleSelection;
};
          
}; }; }; };

#endif
