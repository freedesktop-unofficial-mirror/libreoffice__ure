/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XDialogProvider2.idl,v $
 *
 *  $Revision: 1.2 $
 *
 *  last change: $Author: obo $ $Date: 2006-07-14 07:13:43 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/

#ifndef __com_sun_star_awt_XDialogProvider2_idl__
#define __com_sun_star_awt_XDialogProvider2_idl__

#ifndef __com_sun_star_awt_XDialogProvider_idl__
#include <com/sun/star/awt/XDialogProvider.idl>
#endif


//============================================================================= 

module com { module sun { module star { module awt {

//============================================================================= 

/** provides dialogs implementing the 
    <type scope="com::sun::star::awt">XDialog</type> interface.
 */
interface XDialogProvider2 : ::com::sun::star::awt::XDialogProvider {

    //------------------------------------------------------------------------- 

    /** creates a dialog for the given URL accepting an Interface used
        to handle dialog events.

        @param URL 
            is the URL.

        @param xHandler
            is the interface that will be called to handle the Events that 
            are generated by the dialog (and all controls placed on it) and 
            bound to the handler using a vnd.sun.star.UNO URL specifying a 
            handler method to be called. Usually this will be done directly 
            by the user.
            
            xHandler can handle events in two different ways:

            1. By supporting the <type scope="com::sun::star::awt">XDialogEventHandler</type> interface.
            This is a generic interface to accept event notifications.
            
            2. By providing interfaces that directly implement the handler
            methods to be called. The XDialogProvider2 implementation then
            will try to access these events using the 
            <type scope="com::sun::star::beans">Introspection</type>Introspection
            service. To make this possible the handler implementation also has to
            support <type scope="com::sun::star::lang">XTypeProvider</type>.

            If XDialogEventHandler is supported XDialogEventHandler.callHandlerMethod()
            is always called first to handle the event. Only if the event cannot be 
            handled by XDialogEventHandler (callHandlerMethod() then has to return
            false) or if XDialogEventHandler is not supported at all the Introspection 
            based access will be used.

            The Introspection based access tries to call a method named according to the
            HandlerMethodName specified by a vnd.sun.star.UNO:<HandlerMethodName> URL.
            First a method

            void HandlerMethodName( [in] com::sun::star::awt::XDialog xDialog, [in] any aEvent )

            will be searched. The signature is similar to XDialogEventHandler.
            callHandlerMethod except for MethodName itself that isn't needed 
            here. For more information about these parameters, see
            <type scope="com::sun::star::awt">XDialogEventHandler</type>.
            
            If this method is found, it will be called, otherwise a method

            void HandlerMethodName( void )

            will be searched and called.

        @returns
            a dialog implementing the <type scope="com::sun::star::awt">XDialog</type> interface.

        @throws com::sun::star::lang::IllegalArgumentException
            if no dialog for the given URL is found or if the URL is invalid
            or xHandler is null.

        @see <type scope="com::sun::star::awt">XDialogEventHandler</type>

     */
    com::sun::star::awt::XDialog createDialogWithHandler
        ( [in] string URL, [in] com::sun::star::uno::XInterface xHandler )  
            raises ( com::sun::star::lang::IllegalArgumentException );
};

//============================================================================= 

}; }; }; };

#endif
