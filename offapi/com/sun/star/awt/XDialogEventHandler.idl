/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XDialogEventHandler.idl,v $
 *
 *  $Revision: 1.3 $
 *
 *  last change: $Author: kz $ $Date: 2007-06-20 10:32:15 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/

#ifndef __com_sun_star_awt_XDialogEventHandler_idl__
#define __com_sun_star_awt_XDialogEventHandler_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif
#ifndef __com_sun_star_awt_XDialog_idl__ 
#include <com/sun/star/awt/XDialog.idl> 
#endif
#ifndef __com_sun_star_lang_WrappedTargetException_idl__ 
#include <com/sun/star/lang/WrappedTargetException.idl> 
#endif 


//============================================================================= 

module com { module sun { module star { module awt {

//============================================================================= 

/** Handles events fired by dialogs represented by a
    <type scope="com::sun::star::awt">XDialog</type> interface.
 */
interface XDialogEventHandler : ::com::sun::star::uno::XInterface {

    //------------------------------------------------------------------------- 

    /** Handles an event generated by a dialog.

        The implementation must be aware that the EventObject argument contains types
        which it is not prepared to handle. Similarly this applies for the MethodName
        argument. In this case the method should simply return false.

        @param xDialog
            the dialog instance that generated the event. This is the same dialog instance
            that was returned by the <type scope="com::sun::star::awt">XDialogProvider2</type>
            createDialogWithHandler method when passing the XDialogEventHandler instance
            receiving the event as handler parameter.

        @param EventObject
            an object describing the event which occurred in the dialog or anything else that
            provides additional information for the event.
            If the event was caused by the dialog or any of the controls which it contains
            then the any should contain an object derived from
            <type scope="com::sun::star::lang">EventObject</type>. Typically this would be one
            of the several com::sun::star::awt::*Event types.

        @param MethodName
            the name of the function which is to be called.
            
        @returns
            true if the event was handled, otherwise false.

        @throws com::sun::star::lang::WrappedTargetException  
            if the implementation of the method, which is determined by the argument MethodName,
            throws an exception. This exception is then wrapped into a
            <type scope="com::sun::star::lang">WrappedTargetException</type>.

     */
    boolean callHandlerMethod(
        [in] com::sun::star::awt::XDialog xDialog,
        [in] any EventObject,
        [in] string MethodName)
        raises(com::sun::star::lang::WrappedTargetException); 


    /** returns a sequence of supported method names

        @returns
            all method names that will be accepted in calls to callHandlerMethod.
     */
    sequence<string> getSupportedMethodNames();
};

//============================================================================= 

}; }; }; };

#endif
