/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 * 
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_awt_grid_XGridColumnModel_idl__ 
#define __com_sun_star_awt_grid_XGridColumnModel_idl__ 
 
#include <com/sun/star/uno/XInterface.idl> 

#include <com/sun/star/awt/grid/XGridColumn.idl> 
#include <com/sun/star/awt/grid/XGridColumnListener.idl> 
 
//============================================================================= 
 
module com {  module sun {  module star {  module awt { module grid { 
 
//============================================================================= 

/** An instance of this interface is used by the <type>UnoControlGrid</type> to
    retrieve the column structure that is displayed in the actual control.

    If you do not need your own model implementation, you can also use the <type>DefaultGridColumnModel</type>.
*/     
interface XGridColumnModel: com::sun::star::uno::XInterface
{ 
    /** Specifies whether column selection is allowed
    */
    [attribute] boolean ColumnSelectionAllowed;
    
    /** Returns the number of columns.
        @returns
                the number of columns.
    */
    long getColumnCount();
    
    /** Adds a column to the model.
        @param column
            the column to add to the model.

        @returns
                the index of new created column.
    */
    long addColumn( [in] XGridColumn column );

    /*
    long getSelectedCount();
    
    sequence<XGridColumn> getSelectedColumns();
    
    sequence<long> getSelectedIndex();
    
    */

    /** Returns all columns of the model.
        @returns
                 all columns associated with the model in a sequence of <type>XGridColumn</type>.
    */
    sequence<XGridColumn> getColumns();
    
    /** Returns a specific column.
        @param index
                the position of the reuquested column.
        @returns
                 the requested column.
    */
    XGridColumn getColumn( [in] long index);
    
    /*
    long getTotalColumnWidth();
    */

    /** Adds a listener for the <type>GridColumnEvent</type> posted after the grid changes.
        @param Listener
            the listener to add.
    */     
    [oneway] void addColumnListener( [in] XGridColumnListener  listener); 
 
    //------------------------------------------------------------------------- 

    /** Removes a listener previously added with <method>addColumnListener()</method>.
        @param Listener
            the listener to remove.
    */   
    [oneway] void removeColumnListener( [in] XGridColumnListener listener); 
}; 
 
//============================================================================= 
 
}; }; }; }; }; 
 
#endif 
