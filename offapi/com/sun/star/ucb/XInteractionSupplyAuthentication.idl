/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XInteractionSupplyAuthentication.idl,v $
 *
 *  $Revision: 1.8 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-08 08:09:10 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/
#ifndef __com_sun_star_ucb_XInteractionSupplyAuthentication_idl__
#define __com_sun_star_ucb_XInteractionSupplyAuthentication_idl__

#ifndef __com_sun_star_task_XInteractionContinuation_idl__
#include <com/sun/star/task/XInteractionContinuation.idl>
#endif

#ifndef __com_sun_star_ucb_RememberAuthentication_idl__
#include <com/sun/star/ucb/RememberAuthentication.idl>
#endif


//=============================================================================

module com { module sun { module star { module ucb { 

//=============================================================================
/** An interaction continuation handing back some authentication data.
    
    <p> This continuation is typically used in conjunction with
    <type>AuthenticationRequest</type>. </p>
*/
published interface XInteractionSupplyAuthentication: com::sun::star::task::XInteractionContinuation
{
    //-------------------------------------------------------------------------
    /** Specifies if a new 'realm' value can be handed back.
    */
    boolean canSetRealm();

    //-------------------------------------------------------------------------
    /** Set a new 'realm' value to hand back.
        
        <p>This method should be called before 
        <member scope="com::sun::star::task">XInteractionContinuation::select</member>,
        and should only	be called if 
        <member>XInteractionSupplyAuthentication::canSetRealm</member> returned
        <true/>.</p>
    */
    void setRealm( [in] string Realm );

    //-------------------------------------------------------------------------
    /** Specifies if a 'user name' value can be handed back.
    */
    boolean canSetUserName();

    //-------------------------------------------------------------------------
    /** Set a new 'user name' value to hand back.

        <p>This method should be called before 
        <member scope="com::sun::star::task">XInteractionContinuation::select</member>,
        and should only	be called if 
        <member>XInteractionSupplyAuthentication::canSetUserName</member> 
        returned <true/>.</p>
    */
    void setUserName( [in] string UserName );

    //-------------------------------------------------------------------------
    /** Specifies if a 'password' value can be handed back.
    */
    boolean canSetPassword();

    //-------------------------------------------------------------------------
    /** Set a new 'password' value to hand back.
        
        <p>This method should be called before 
        <member scope="com::sun::star::task">XInteractionContinuation::select</member>,
        and should only	be called if 
        <member>XInteractionSupplyAuthentication::canSetPassword</member> 
        returned <true/>.</p>
    */
    void setPassword( [in] string Password );

    //-------------------------------------------------------------------------
    /** Specifies the available modes of how long to remember the password.

        @param Default
        Returns the default mode (to be initially displayed to the user).

        @returns
        A sequence of available modes to hand back.  Each individual mode
        should appear at most once in the sequence.  If the sequence is	empty,
        a new mode cannot be handed back.
    */
    sequence<com::sun::star::ucb::RememberAuthentication> getRememberPasswordModes( [out] com::sun::star::ucb::RememberAuthentication Default );

    //-------------------------------------------------------------------------
    /** Set a new mode of how long to remember the password.

        <p>This method should be called before 
        <member scope="com::sun::star::task">XInteractionContinuation::select</member>,
        and should only	be called if 
        <member>XInteractionSupplyAuthentication::setPassword</member> 
        is also called.</p>
        
        @param Remember  
        The mode to hand back, should be contained in the sequence returned by
        <member>XInteractionSupplyAuthentication::getRememberPasswordModes</member>.
    */
    void setRememberPassword( [in] com::sun::star::ucb::RememberAuthentication Remember );

    //-------------------------------------------------------------------------
    /** Specifies if an 'account' value can be handed back.
    */
    boolean canSetAccount();

    //-------------------------------------------------------------------------
    /** Set a new 'account' value to hand back.
        
        <p>This method should be called before 
        <member scope="com::sun::star::task">XInteractionContinuation::select</member>,
        and should only	be called if 
        <member>XInteractionSupplyAuthentication::canSetAccount</member> 
        returned <true/>.</p>

    */
    void setAccount( [in] string Account );

    //-------------------------------------------------------------------------
    /** Specifies the available modes of how long to remember the account.

        @param Default  Returns the default mode (to be initially displayed to
        the user).

        @returns  A sequence of available modes to hand back.  Each individual
        mode should appear at most once in the sequence.  If the sequence is
        empty, a new mode cannot be handed back.
     */
    sequence<com::sun::star::ucb::RememberAuthentication> getRememberAccountModes( [out] com::sun::star::ucb::RememberAuthentication Default );

    //-------------------------------------------------------------------------
    /** Set a new mode of how long to remember the account.
        
        <p>This method should be called before 
        <member scope="com::sun::star::task">XInteractionContinuation::select</member>,
        and should only	be called if 
        <member>XInteractionSupplyAuthentication::setAccount</member> 
        is also called.</p>
        
        @param Remember  The mode to hand back, should be contained in the
        sequence returned by 
        <member>XInteractionSupplyAuthentication::getRememberAccountModes</member>.
    */
    void setRememberAccount( [in] com::sun::star::ucb::RememberAuthentication Remember );

};

//=============================================================================

}; }; }; }; 

#endif
