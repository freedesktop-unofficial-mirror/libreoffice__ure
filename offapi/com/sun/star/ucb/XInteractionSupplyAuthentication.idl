/*************************************************************************
 *
 *  $RCSfile: XInteractionSupplyAuthentication.idl,v $
 *
 *  $Revision: 1.2 $
 *
 *  last change: $Author: mi $ $Date: 2000-11-06 13:18:10 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/
#ifndef __com_sun_star_ucb_XInteractionSupplyAuthentication_idl__
#define __com_sun_star_ucb_XInteractionSupplyAuthentication_idl__

#ifndef __com_sun_star_task_XInteractionContinuation_idl__
#include <com/sun/star/task/XInteractionContinuation.idl>
#endif

#ifndef __com_sun_star_ucb_RememberAuthentication_idl__
#include <com/sun/star/ucb/RememberAuthentication.idl>
#endif


//=============================================================================

module com { module sun { module star { module ucb { 

//=============================================================================
/** An interaction continuation handing back some authentication data.
    
    @descr  This continuation is typically used in conjunction with
    AuthenticationRequest.
*/
[ uik(E2281A25-33D6-11D1-AABE00A0-249D5590), ident( "XInteractionSupplyAuthentication", 1.0 ) ]
interface XInteractionSupplyAuthentication: com::sun::star::task::XInteractionContinuation
{
    //-------------------------------------------------------------------------
    /** Specifies if a new 'realm' value can be handed back.
    */
    [const] boolean canSetRealm();

    //-------------------------------------------------------------------------
    /** Set a new 'realm' value to hand back.
        
        @descr  This method should be called before select(), and should only
        be called if canSetRealm() returned true.
    */
    void setRealm( [in] string Realm );

    //-------------------------------------------------------------------------
    /** Specifies if a 'user name' value can be handed back.
    */
    [const] boolean canSetUserName();

    //-------------------------------------------------------------------------
    /** Set a new 'user name' value to hand back.
        
        @descr  This method should be called before select(), and should only
        be called if canSetUserName() returned true.
    */
    void setUserName( [in] string UserName );

    //-------------------------------------------------------------------------
    /** Specifies if a 'password' value can be handed back.
    */
    [const] boolean canSetPassword();

    //-------------------------------------------------------------------------
    /** Set a new 'password' value to hand back.
        
        @descr  This method should be called before select(), and should only
        be called if canSetPassword() returned true.
    */
    void setPassword( [in] string Password );

    //-------------------------------------------------------------------------
    /** Specifies the available modes of how long to remember the password.

        @param Default  Returns the default mode (to be initially displayed to
        the user).

        @returns  A sequence of available modes to hand back.  Each individual
        mode should appear at most once in the sequence.  If the sequence is
        empty, a new mode cannot be handed back.
    */
    [const] sequence<com::sun::star::ucb::RememberAuthentication> getRememberPasswordModes( [out] com::sun::star::ucb::RememberAuthentication Default );

    //-------------------------------------------------------------------------
    /** Set a new mode of how long to remember the password.
        
        @descr  This method should be called before select(), and should only
        be called if setPassword() is also called.
        
        @param Remember  The mode to hand back, should be contained in the
        sequence returned by getRememberPasswordModes.
    */
    void setRememberPassword( [in] com::sun::star::ucb::RememberAuthentication Remember );

    //-------------------------------------------------------------------------
    /** Specifies if an 'account' value can be handed back.
    */
    [const] boolean canSetAccount();

    //-------------------------------------------------------------------------
    /** Set a new 'account' value to hand back.
        
        @descr  This method should be called before select(), and should only
        be called if canSetAccount() returned true.
    */
    void setAccount( [in] string Account );

    //-------------------------------------------------------------------------
    /** Specifies the available modes of how long to remember the account.

        @param Default  Returns the default mode (to be initially displayed to
        the user).

        @returns  A sequence of available modes to hand back.  Each individual
        mode should appear at most once in the sequence.  If the sequence is
        empty, a new mode cannot be handed back.
     */
    [const] sequence<com::sun::star::ucb::RememberAuthentication> getRememberAccountModes( [out] com::sun::star::ucb::RememberAuthentication Default );

    //-------------------------------------------------------------------------
    /** Set a new mode of how long to remember the account.
        
        @descr  This method should be called before select(), and should only
        be called if setAccount() is also called.
        
        @param Remember  The mode to hand back, should be contained in the
        sequence returned by getRememberAccountModes.
    */
    void setRememberAccount( [in] com::sun::star::ucb::RememberAuthentication Remember );

};

//=============================================================================

}; }; }; }; 

#endif
