/*************************************************************************
 *
 *  $RCSfile: UniversalContentBroker.idl,v $
 *
 *  $Revision: 1.10 $
 *
 *  last change: $Author: kso $ $Date: 2001-02-08 14:05:20 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/
#ifndef __com_sun_star_ucb_UniversalContentBroker_idl__
#define __com_sun_star_ucb_UniversalContentBroker_idl__

#ifndef __com_sun_star_lang_XComponent_idl__
#include <com/sun/star/lang/XComponent.idl>
#endif

#ifndef __com_sun_star_ucb_XCommandProcessor_idl__
#include <com/sun/star/ucb/XCommandProcessor.idl>
#endif

#ifndef __com_sun_star_ucb_XContentProviderManager_idl__
#include <com/sun/star/ucb/XContentProviderManager.idl>
#endif

#ifndef __com_sun_star_ucb_XContentProvider_idl__
#include <com/sun/star/ucb/XContentProvider.idl>
#endif

#ifndef __com_sun_star_ucb_XContentIdentifierFactory_idl__
#include <com/sun/star/ucb/XContentIdentifierFactory.idl>
#endif

#ifndef __com_sun_star_lang_XInitialization_idl__
#include <com/sun/star/lang/XInitialization.idl>
#endif

//=============================================================================

module com { module sun { module star { module ucb {

//=============================================================================
/** is a one-instance service that provides access to a set of
    <type>Content</type>s via <type>ContentProvider</type>s.

    <p>If the instance is created with two arguments of type
    <type>string</type>, these two strings are used to configure the newly
    instantiated broker; see the description of the required
    <type scope="com::sun::star::lang">XInitialization</type> interface for
    details.

    <p>If the instance is created without arguments, the newly instatiated
    broker is not configured.
*/
service UniversalContentBroker
{
    //-------------------------------------------------------------------------
    /** must be implemented to make it possible to resolve cyclic object
        references.

        <p>Those references i.e. may occure if content provider	implementations
        hold references to the Broker. The Broker itself always holds its
        providers. If the Broker shall be released,
        <member scope="com::sun::star::lang">XComponent::dispose</member>
        must be called at the Broker. The implementation of this method must
        call
        <member scope="com::sun::star::lang">XEventListener::disposing</member>
        on the registered listeners	( the providers holding the Broker must be
        those listeners ) and release the appropriate object references. At
        the other hand, the	implementation of XEventListener::disposing must
        release its appropriate references.

        <p>This interface is required.
     */
    interface com::sun::star::lang::XComponent;

    //-------------------------------------------------------------------------
    /** provides access to all kind of contents provided by the registered
        content providers.

        <p>This interface is required.
     */
    interface com::sun::star::ucb::XContentProvider;

    //-------------------------------------------------------------------------
    /** provides access to a set of content providers registered with the UCB.

        <p>This interface is required.
     */
    interface com::sun::star::ucb::XContentProviderManager;

    //-------------------------------------------------------------------------
    /** creates <type>XContentIdentifier</type> implementation objects for
        all kind of contents provided by the UCB.

        <p>This interface is required.
      */
    interface com::sun::star::ucb::XContentIdentifierFactory;

    //-------------------------------------------------------------------------
    /**	supports the configuration of a newly created broker.

        <p>The
        <member scope="com::sun::star::lang"XInitialization::initialize</member>
        method should be called with two arguments of type
        <type>string</type>. These strings are used as a pair of keys to
        retrieve a set of content provider descriptions from the configuration
        management (stored at
        <code>org.openoffice.ucb.Configuration.ContentProviders.<var>key<sub>1</sub></var>.SecondaryKeys.<var>key<sub>2</sub></var>.ProviderData</code>
        within the configuration management's hierarchy). The retrieved
        descriptions are in turn used to register the corresponding content
        provider services at the broker.

        <p>Typical values for the pair of strings would be
        <code>"Local"</code>/<code>"Office"</code>, to configure a broker that
        contains all the relevant content providers.

        <p>This interface is required.
     */
    interface com::sun::star::lang::XInitialization;

    //-------------------------------------------------------------------------
    /**	enables the caller to execute commands at the broker.

        <p>This interface is required.

        <p><pre>
        =======================================================================
        Commands:
        =======================================================================

        [return type]
            [command name]
                [parameter type and name]

        -----------------------------------------------------------------------
        Requiered commands:
        -----------------------------------------------------------------------

        // This command obtains an interface which allows to query
        // information on commands supported by the Content Broker.

        <type>XCommandInfo</type>
            getCommandInfo
                void

        // This command transfers Contents from one location to another.
        // Additionally, it can be used to create a link to a Content.
        // The implementation must be able to handle Contents provided
        // by any Content Provider. This is different from the command
        // 'transfer' that can be supported by a Content. That command
        // typically can only handle <type>Content</type>s provided by one
        // <type>ContentProvider</type>.

        void
            globalTransfer
                <type>GlobalTransferCommandArgument</type>
        </pre>
     */
    interface com::sun::star::ucb::XCommandProcessor;

};

//=============================================================================

}; }; }; };

#endif
