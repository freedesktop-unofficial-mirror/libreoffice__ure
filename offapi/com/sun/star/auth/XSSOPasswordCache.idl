/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/

#ifndef __com_sun_star_auth_XSSOPasswordCache_idl__
#define __com_sun_star_auth_XSSOPasswordCache_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

#ifndef __com_sun_star_auth_SSOExceptions_idl__
#include <com/sun/star/auth/SSOExceptions.idl>
#endif

module com { module sun { module star { module auth {

/** supports password caching for security mechanisms which use passwords as
    credentials or as an input to credential creation but don't have
    an external method to cache these passwords.

    @since #107627#
 */

published interface XSSOPasswordCache : ::com::sun::star::uno::XInterface
{
    /** adds a username/password combination to the cache.
        <P>
        If an entry for the specified username already exists in the cache, it
        will be overwritten.

        @param UserName
        the user name to add

        @param Password
        the associated password

        @param Persist
        indicates whether or not the username/password combination should be
        persisted
     */
    void	addPassword( [in] string UserName,
                         [in] string Password,
                         [in] boolean Persist )
                raises( InvalidArgumentException,
                        PersistenceFailureException );
        
    /** retrieves a password for a given user from the cache.
        <P>
        Non persistent cache is searched first, followed by the
        persistent cache ( if it exists ).

        @param UserName
        the name of the user whose password should be retrieved

        @param Persist
        indicates whether or not the password is persistent
        
        @returns
        the required password
     */
    string	getPassword( [in] string UserName, [out] boolean Persist )
                raises( InvalidArgumentException,
                        PersistenceFailureException );

    /** removes a password from the cache

        @param UserName
        the name of the user whose password should be removed.

        @param RemovePersist
        indicates whether or not the password should also be removed, if
        present, from persistent cache.
     */
    void	removePassword( [in] string UserName, [in] boolean RemovePersist )
                raises( InvalidArgumentException,
                        PersistenceFailureException );
};

}; }; }; };

#endif
