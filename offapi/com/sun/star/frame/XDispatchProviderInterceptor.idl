/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XDispatchProviderInterceptor.idl,v $
 *
 *  $Revision: 1.9 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-08 01:11:12 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/
#ifndef __com_sun_star_frame_XDispatchProviderInterceptor_idl__
#define __com_sun_star_frame_XDispatchProviderInterceptor_idl__

#ifndef __com_sun_star_frame_XDispatchProvider_idl__
#include <com/sun/star/frame/XDispatchProvider.idl>
#endif


//=============================================================================

 module com {  module sun {  module star {  module frame {

//=============================================================================
/** makes it possible to intercept request of <type>XDispatch</type>.

    <p>
    Can be registered as an interceptor by using interface <type>XDispatchProviderInterception</type>.
    </p>

    @see XDispatchProviderInterception
 */
published interface XDispatchProviderInterceptor: XDispatchProvider
{
    //-------------------------------------------------------------------------
    /** access to the slave <type>XDispatchProvider</type> of this interceptor

        @returns
            the slave of this interceptor

        @see XDispatchProviderInterceptor::setSlaveDispatchProvider()
     */
    XDispatchProvider getSlaveDispatchProvider();

    //-------------------------------------------------------------------------
    /** sets the slave <type>XDispatchProvider</type> to which calls to
        <member>XDispatchProvider::queryDispatch()</member> can be forwarded
        under control of this dispatch provider.

        @param xNewDispatchProvider
            the new slave of this interceptor

        @see XDispatchProviderInterceptor::getSlaveDispatchProvider()
     */
    void setSlaveDispatchProvider( [in] XDispatchProvider NewDispatchProvider );

    //-------------------------------------------------------------------------
    /** access to the master <type>XDispatchProvider</type> of this interceptor

        @returns
            the master of this interceptor

        @see XDispatchProviderInterceptor::setMasterDispatchProvider()
     */
    XDispatchProvider getMasterDispatchProvider();

    //-------------------------------------------------------------------------
    /** sets the master <type>XDispatchProvider</type>, which may forward
        calls to its <member>XDispatchProvider::queryDispatch()</member>
        to this dispatch provider.

        @param NewSupplier
            the master of this interceptor

        @see XDispatchProviderInterceptor::getMasterDispatchProvider()
     */
    void setMasterDispatchProvider( [in] XDispatchProvider NewSupplier );

};

//=============================================================================

}; }; }; };

#endif
