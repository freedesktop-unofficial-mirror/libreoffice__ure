/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XDispatchRecorder.idl,v $
 *
 *  $Revision: 1.10 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-08 01:11:25 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/
#ifndef __com_sun_star_frame_XDispatchRecorder_idl__
#define __com_sun_star_frame_XDispatchRecorder_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

#ifndef __com_sun_star_util_URL_idl__
#include <com/sun/star/util/URL.idl>
#endif

#ifndef __com_sun_star_beans_PropertyValue_idl__
#include <com/sun/star/beans/PropertyValue.idl>
#endif

//=============================================================================

module com {  module sun {  module star {  module frame {

 published interface XFrame;

//=============================================================================
/** provides recording functionality of dispatches

    <p>
    With such recorder it will be possible to record requests of type
    <type>XDispatch</type> by using additional interface
    <type>XRecordableDispatch</type>. The result of that will be a
    a script which can be used to start the dispatch at later time again.
    Such recorder objects are available on a <type>XDispatchRecorderSupplier</type>
    which is provided by the <type>Frame</type> service.
    </p>

    @see Frame
    @see XDispatchRecorderSupplier

    @since OOo 1.1.2
 */
published interface XDispatchRecorder: com::sun::star::uno::XInterface
{
    //-------------------------------------------------------------------------
    /** initializes the recorder by passing the frame for which all
        macro statements shall be recorded

        @param Frame
            it includes the document on which such requests shall be recorded
    */
    void startRecording( [in] com::sun::star::frame::XFrame Frame );

        //-------------------------------------------------------------------------
    /** stops the recording process

        <p>
        Must be called in pairs with <member>XDispatchRecorder::startRecording()</member>.
        </p>
        
        @attention  The recorder uses this method to control the lifetime of its internal
                    used macro buffer. It will be cleared here. So the macro must be fetched
                    before endRecording() is called.
                    
        @see        getRecordedMacro()             
    */
    void endRecording();

    //-------------------------------------------------------------------------
    /** records a single dispatch call identified by its command URL

        @param URL
            the full parsed command URL

        @param Arguments
            optional arguments for the command URL
            <br>
            (see <type scope="com::sun::star::document">MediaDescriptor</type>
             for further informations)
    */
    void recordDispatch(
        [in] com::sun::star::util::URL URL,
        [in] sequence<com::sun::star::beans::PropertyValue> Arguments);

    //-------------------------------------------------------------------------
    /** records a single dispatch call identified by its command URL, but
        comments it out

        <p>
        This way calls that failed on execution can be documented.
        </p>

        @param URL
            the full parsed command URL

        @param Arguments
            optional arguments for the command URL
            <br>
            (see <type scope="com::sun::star::document">MediaDescriptor</type>
             for further informations)
    */
    void recordDispatchAsComment(
        [in] com::sun::star::util::URL URL,
        [in] sequence<com::sun::star::beans::PropertyValue> Arguments);

    //-------------------------------------------------------------------------
    /** returns the recorded source code

        <p>
        This method must be used before <member>endRecording()</member> is called!
        Otherwhise the macro will be relased.
        </p>

        @returns
            the recorded data as a string which can be interpreted as a script
    */
    string getRecordedMacro();
};

//=============================================================================

}; }; }; };

#endif
