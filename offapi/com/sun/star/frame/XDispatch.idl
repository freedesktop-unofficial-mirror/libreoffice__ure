/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XDispatch.idl,v $
 *
 *  $Revision: 1.11 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-08 01:09:53 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/
#ifndef __com_sun_star_frame_XDispatch_idl__
#define __com_sun_star_frame_XDispatch_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

#ifndef __com_sun_star_util_URL_idl__
#include <com/sun/star/util/URL.idl>
#endif

#ifndef __com_sun_star_beans_PropertyValue_idl__
#include <com/sun/star/beans/PropertyValue.idl>
#endif

#ifndef __com_sun_star_frame_XStatusListener_idl__
#include <com/sun/star/frame/XStatusListener.idl>
#endif


//=============================================================================

module com {  module sun {  module star {  module frame {

//=============================================================================
/** serves state information of objects which can be connected to
        controls (e.g., toolbox controls).

    <p>
    Each state change is to be broadcast to all registered
    status listeners. The first notification should be performed
    synchronously from <member>XDispatch::addStatusListener()</member>;
        if not, controls may flicker. State listener must be aware of this
    synchronous notification.
    </p>

    <p>
    The state consists of enabled/disabled and a short descriptive text
    of the function (e.g., "undo insert character"). It is to be broadcast
        whenever this state changes or the control should re-get the value
    for the URL to which it is connected. Additionally, a context-switch-event
    is to be broadcast whenever the object may be out of scope,
    to force the state listener to requery the <type>XDispatch</type>.
    </p>

    @see Frame
    @see FeatureStateEvent
 */
published interface XDispatch: com::sun::star::uno::XInterface
{
    //-------------------------------------------------------------------------
    /** dispatches (executes) an URL asynchronously.

        <p>
        It is only allowed to dispatch URLs for which this <type>XDispatch</type>
        was explicitely queried. Additional arguments "'#..." or "?...") are allowed.
        </p>

        @param URL
            full parsed URL wich describe the feature which should be dispatched (executed)

        @param Arguments
            optional arguments for this request
            They depends from the real implementation of the dipsatch object.

        @example
            <listing>
            <i><font COLOR="#949494">// some code for a click-handler (Java)</font></i>
            void <strong>myOnClick</strong>(<em>String</em> sURL,<em>String</em> sTargetFrame,<em>com.sun.star.beans.PropertyValue[]</em> lArguments)
            {
            &nbsp;&nbsp;com.sun.star.util.URL[] aURL = new com.sun.star.util.URL[1];
            &nbsp;&nbsp;aURL[0] = new com.sun.star.util.URL();
            &nbsp;&nbsp;aURL[0].Complete = sURL;

            &nbsp;&nbsp;com.sun.star.util.XURLTransformer xParser = (com.sun.star.util.XURLTransformer)UnoRuntime.queryInterface(
            &nbsp;&nbsp;&nbsp;&nbsp;com.sun.star.util.XURLTransformer.class,
            &nbsp;&nbsp;&nbsp;&nbsp;mxServiceManager.createInstance("com.sun.star.util.URLTransformer"));

            &nbsp;&nbsp;xParser.parseStrict(aURL);

            &nbsp;&nbsp;com.sun.star.frame.XDispatch xDispatcher = mxFrame.queryDispatch(aURL[0], sTargetFrame, com.sun.star.frame.FrameSearchFlag.GLOBAL);

            &nbsp;&nbsp;if(xDispatcher!=null)
            &nbsp;&nbsp;&nbsp;&nbsp;xDispatcher.dispatch(aURL[0], lArguments);
            }
            </listing>
     */
    [oneway] void dispatch(
        [in] com::sun::star::util::URL URL,
        [in] sequence<com::sun::star::beans::PropertyValue> Arguments);

    //-------------------------------------------------------------------------
        /** registers a listener of a control for a specific URL
        to this object to receive status events.

        <p>
        It is only allowed to register for URLs for which this <type>XDispatch</type>
        was explicitely queried. Additional arguments ("#..." or "?...") will be ignored.
        Note: Notifications can't be guranteed! This will be a part of interface <type>XNotifyingDispatch</type>.
        </p>

        @param Control
            listener which wish to be informed

        @param URL
            the URL (without additional arguments) for which the listener wish to be registered
            So a listener can be registered for more then one URLs at the same time.

        @see XStatusListener
        @see XDispatch::removeStatusListener()
     */
    [oneway] void addStatusListener(
        [in] XStatusListener Control,
        [in] com::sun::star::util::URL URL);

    //-------------------------------------------------------------------------
        /** unregisters a listener of a control.

        @param Control
            listener which wish to be unregistered

        @param URL
            the URL for which the listener was registered
            Additional arguments ("#..." or "?...") will be ignored.

        @see XStatusListener
        @see XDispatch::addStatusListener()
     */
    [oneway] void removeStatusListener(
        [in] XStatusListener Control,
        [in] com::sun::star::util::URL URL);
};

//=============================================================================

}; }; }; };

#endif
