/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XStorable.idl,v $
 *
 *  $Revision: 1.11 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-08 01:26:35 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/
#ifndef __com_sun_star_frame_XStorable_idl__
#define __com_sun_star_frame_XStorable_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

#ifndef __com_sun_star_io_IOException_idl__
#include <com/sun/star/io/IOException.idl>
#endif

#ifndef __com_sun_star_beans_PropertyValue_idl__
#include <com/sun/star/beans/PropertyValue.idl>
#endif


//=============================================================================

 module com {  module sun {  module star {  module frame {

//=============================================================================
/** offers a simple way to store a component to an URL.

    <p>
    It is usually only useful for two cases:
    </p>
    <ol>
        <li>
            Large components which are wrapped with <em>StarOne</em> interfaces
            and for which distinct filters are not available separately as
            components.
        </li>
        <li>
            Very small components for which only one or very few hard
            coded file format filters make sense or even exist.
        </li>
    </ol>
 */
published interface XStorable: com::sun::star::uno::XInterface
{
    //-------------------------------------------------------------------------
    /** The object may know the location because it was loaded from there,
        or because it is stored there.

        @returns
            <TRUE/> if the object knows a location where it is persistent
            <FALSE/> otherwise
     */
    boolean hasLocation();

    //-------------------------------------------------------------------------
    /** After <member>XStorable::storeAsURL()</member> it returns the
        URL the object was stored to.

        @returns
            the URL of the resource which is represented by this object.
     */
    string getLocation();

    //-------------------------------------------------------------------------
    /** It is not possible to call <member>XStorable::store()</member> successfully
        when the data store is read-only.

        @returns
            <TRUE/> if the data store is readonly or opened readonly
            <FALSE/> otherwise
     */
    boolean isReadonly();

    //-------------------------------------------------------------------------
    /** stores the data to the URL from which it was loaded.

        <p>Only objects which know their locations can be stored.</p>

        @throws com::sun::star::io::IOException
            if an IO error occured during save operation
            (may the location is unknown)

        @see XStorable::storeAsURL
        @see XStorable::storeToURL
     */
    void store()
            raises( com::sun::star::io::IOException );

    //-------------------------------------------------------------------------
    /** stores the object's persistent data to a URL and
        lets the object become the representation of this new URL.

        <p>This is the normal behavior for UI's "save-as" feature.</p>

        @param sURL
            specifies the new location of this component

        @param lArguments
            optional parameters for saving
            (see <type scope="com::sun::star::document">MediaDescriptor</type> for further details)

        @throws com::sun::star::io::IOException
            if an IO error occured during save operation
            (may the location is unknown)

        @see XStorable::store
        @see XStorable::storeToURL
        @see com::sun::star::document::MediaDescriptor
     */
    void storeAsURL(
        [in] string sURL,
        [in] sequence<com::sun::star::beans::PropertyValue> lArguments )
        raises( com::sun::star::io::IOException );

    //-------------------------------------------------------------------------
    /** stores the object's persistent data to a URL and
        continues to be a representation of the old URL.

        <p>This is the normal behavior for UI's export feature.</p>

        @throws com::sun::star::io::IOException
            if an IO error occured during save operation
            (may the location is unknown)

        @param lArguments
            optional parameters for saving
            (see <type scope="com::sun::star::document">MediaDescriptor</type> for further details)

        @see XStorable::store
        @see XStorable::storeAsURL
        @see com::sun::star::document::MediaDescriptor
     */
    void storeToURL(
        [in] string sURL,
        [in] sequence<com::sun::star::beans::PropertyValue> lArguments )
        raises( com::sun::star::io::IOException );
};

//=============================================================================

}; }; }; };

#endif
