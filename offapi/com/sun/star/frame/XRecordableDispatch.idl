/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XRecordableDispatch.idl,v $
 *
 *  $Revision: 1.8 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-08 01:25:22 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/
#ifndef __com_sun_star_frame_XRecordableDispatch_idl__
#define __com_sun_star_frame_XRecordableDispatch_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

#ifndef __com_sun_star_frame_XDispatchRecorder_idl__
#include <com/sun/star/frame/XDispatchRecorder.idl>
#endif

#ifndef __com_sun_star_util_URL_idl__
#include <com/sun/star/util/URL.idl>
#endif

//=============================================================================

 module com {  module sun {  module star {  module frame {

//=============================================================================
/** extends an existing <type>XDispatch</type> implementation with functionality
    for dispatch recording

    <p>
    This interface can be implemented as an additional one beside an existing
    <type>XDispatch</type> one to provide record functionality of dispatches.
    Because it's an additional interface the status events are available there
    and not at this interface.
    </p>

    <p>
    But normaly this interface mustn't be used directly.
    If a dispatch object is well known and recording was enabled
    on a <type>XDispatchRecorderSupplier</type> it's possible to use method
    <member>XDispatchRecorderSupplier::dispatchAndRecord()</member> of it
    to make dispatch and recording automaticly. The interface XRecordableDispatch
    is used transparently there.
    </p>

    @example
    <listing>
        <i>XDispatch</i> xDispatcher = xFrame.queryDispatch(aURL,"",0);
        <i>XRecordableDispatch</i> xRecordable = (<i>XRecordableDispatch</i>)UnoRuntime.queryInterface(
        &nbsp;&nbsp;XRecordableDispatch.class,
        &nbsp;&nbsp;xDispatcher);

        xDispatcher.addStatusListener(this,aURL);

        <b>if</b> (xRecordable!=<b>null</b>)
        &nbsp;&nbsp;xRecordable.dispatchAndRecord(aURL,lArguments,xRecorder);
        else
        &nbsp;&nbsp;xDispatcher.dispatch(aURL,lArguments);
        ...
        xDispatcher.removeStatusListener(this,aURL);
    </listing>

    @see XDispatchRecorderSupplier
    @see XDispatch

    @since OOo 1.1.2
 */
published interface XRecordableDispatch: com::sun::star::uno::XInterface
{
    //-------------------------------------------------------------------------
    /** dispatch and record it

        @param URL
            full parsed URL wich describe the feature which should be dispatched (executed)

        @param Arguments
            optional arguments for this request
            (see <type scope="com::sun::star::document">MediaDescriptor</type> for details)

        @param Recorder
            object which can be used to record the request
            (available on <member>XDispatchRecorderSupplier::getDispatchRecorder()</member>)
     */
    [oneway] void dispatchAndRecord(
        [in] com::sun::star::util::URL URL,
        [in] sequence<com::sun::star::beans::PropertyValue> Arguments,
        [in] XDispatchRecorder Recorder);
};

//=============================================================================

}; }; }; };

#endif
