/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 * 
 * Copyright 2008 by Sun Microsystems, Inc.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * $RCSfile: IntegerBitmapLayout.idl,v $
 * $Revision: 1.7 $
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_rendering_IntegerBitmapLayout_idl__
#define __com_sun_star_rendering_IntegerBitmapLayout_idl__

#ifndef __com_sun_star_rendering_Endianness_idl__
#include <com/sun/star/rendering/Endianness.idl>
#endif
#ifndef __com_sun_star_rendering_IntegerBitmapFormat_idl__
#include <com/sun/star/rendering/IntegerBitmapFormat.idl>
#endif
#ifndef __com_sun_star_rendering_XColorSpace_idl__
#include <com/sun/star/rendering/XColorSpace.idl>
#endif
#ifndef __com_sun_star_rendering_XBitmapPalette_idl__
#include <com/sun/star/rendering/XBitmapPalette.idl>
#endif

module com { module sun { module star { module rendering {

/** This structure describes the memory layout of a bitmap having
    integer color channels.<p>

    This structure collects all necessary information to describe the
    memory layout of a bitmap having integer color channels<p>

    @since OOo 2.0.0
 */
struct IntegerBitmapLayout
{
    /** Number of scanlines for this bitmap.

        This value must not be negative
     */
    long				ScanLines;

    /** Number of data bytes per scanline.

        This value must not be negative
     */
    long 				ScanLineBytes;

    /** Byte offset between the start of two consecutive scanlines.

        This value is permitted to be negative, denoting a bitmap
        whose content is flipped at the x axis.
     */
    long				ScanLineStride;

    /** Byte offset between the start of two consecutive planes.

        This value is permitted to be negative.
     */
    long				PlaneStride;

    /// Color space the bitmap colors shall be interpreted within.
    XColorSpace			ColorSpace;

    /** Number of color components per pixel.

        This value must not be negative
     */
    long			    NumComponents;

    /** Mask values for packed bitmaps

        This member contains NumComponents 64 bit masks, which can be
        used to mask out the corresponding color component from the
        bitmap data. For the typical 32 bit RGBA color data, the four
        mask values would look like 0xFF000000, 0x00FF0000,
        0x0000FF00, and 0x000000FF.
     */
    sequence<hyper>	    ComponentMasks;

    /** This member determines whether the bitmap data are actually
        indices into a color map.<p>

        When set to the nil reference, the bitmap data is assumed to
        contain direct color values (to be interpreted according to
        the associated color space).<p>
     */
    XBitmapPalette		Palette;

    /** Endianness of the pixel values.

        This value must be one of the <type>Endianness</type> constants
     */
    byte			    Endianness;

    /** Format type of this bitmap.<p>

        This value must be one of the <type>IntegerBitmapFormat</type>
        constants. The precise layout of the color channels within a
        bitmap pixel is further specified via the ComponentMasks member.<p>
    */
    byte				Format;

    /** This member determines the bit order (only relevant if a pixel
        uses less than 8 bits, of course).<p>

        When <TRUE/>, this member denotes that the leftmost pixel from
        an 8 bit amount of pixel data consists of the bits starting
        with the most significant bit. When <FALSE/>, it's starting
        with the least significant bit.<p>

        Example: for a 1bpp bitmap, each pixel is represented by
        exactly one bit. If this member is <TRUE/>, the first pixel is
        the MSB of the first byte, and the eighth pixel is the LSB of
        the first byte. If this member is <FALSE/>, it's just the
        opposite.
     */
    boolean				IsMsbFirst;
};

}; }; }; };

#endif
