/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: FloatingPointBitmapFormat.idl,v $
 *
 *  $Revision: 1.4 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-08 02:48:03 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/
#ifndef __com_sun_star_rendering_FloatingPointBitmapFormat_idl__
#define __com_sun_star_rendering_FloatingPointBitmapFormat_idl__

module com { module sun { module star { module rendering {

/** This structure describes format of a floating point bitmap.

    @since OOo 2.0.0
 */
constants FloatingPointBitmapFormat 
{
    /** Half-float format, with chunky layout.<p>

        The color components are stored in the half-float format,
        i.e. in a 16 bit value, with 5 bit exponent, 10 bit mantissa
        and a sign bit. The bits of each value are stored consecutive
        in memory.<p>
     */
    const byte	CHUNKY_HALFFLOAT=0;

    /** Half-float format, with plane layout.<p>

        The color components are stored in the half-float format,
        i.e. in a 16 bit value, with 5 bit exponent, 10 bit mantissa
        and a sign bit. The bits of each value are stored each bit in
        a separate plane, i.e. a plane contains a single bit from
        every pixel's components.<p>
     */
    const byte	PLANES_HALFFLOAT=1;

    /** IEEE float format, with chunky layout.<p>

        The color components are stored in the IEEE single-precision
        floating point format, i.e. in a 32 bit value, with 8 bit
        exponent, 23 bit mantissa and a sign bit. The bits of each
        value are stored consecutive in memory.<p>
     */
    const byte	CHUNKY_FLOAT=2;

    /** IEEE float format, with plane layout.<p>

        The color components are stored in the IEEE single-precision
        floating point format, i.e. in a 32 bit value, with 8 bit
        exponent, 23 bit mantissa and a sign bit. The bits of each
        value are stored each bit in a separate plane, i.e. a plane
        contains a single bit from every pixel's components.<p>
     */
    const byte	PLANES_FLOAT=3;

    /** IEEE double format, with chunky layout.<p>

        The color components are stored in the IEEE double-precision
        floating point format, i.e. in a 64 bit value, with 16 bit
        exponent, 47 bit mantissa and a sign bit. The bits of each
        value are stored consecutive in memory.<p>
     */
    const byte	CHUNKY_DOUBLE=4;

    /** IEEE double format, with chunky layout.<p>

        The color components are stored in the IEEE double-precision
        floating point format, i.e. in a 64 bit value, with 16 bit
        exponent, 47 bit mantissa and a sign bit. The bits of each
        value are stored each bit in a separate plane, i.e. a plane
        contains a single bit from every pixel's components.<p>
     */
    const byte	PLANES_DOUBLE=5;
};

}; }; }; };

#endif
