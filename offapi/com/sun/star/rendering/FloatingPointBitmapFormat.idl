/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 * 
 * Copyright 2008 by Sun Microsystems, Inc.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * $RCSfile: FloatingPointBitmapFormat.idl,v $
 * $Revision: 1.6 $
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_rendering_FloatingPointBitmapFormat_idl__
#define __com_sun_star_rendering_FloatingPointBitmapFormat_idl__

module com { module sun { module star { module rendering {

/** This structure describes format of a floating point bitmap.<p>

    The difference between chunky and planar layout lies in the way
    how color channels are interleaved. For a chunky format, all
    channel data for a single pixel lies consecutively in memory. For a
    planar layout, the first channel of all pixel is stored
    consecutive, followed by the second channel, and so forth.<p>

    @since OOo 2.0.0
 */
constants FloatingPointBitmapFormat 
{
    /** Half-float format, with chunky layout.<p>

        The color components are stored in the half-float format,
        i.e. in a 16 bit value, with 5 bit exponent, 10 bit mantissa
        and a sign bit. The bits of each value are stored consecutive
        in memory.<p>
     */
    const byte	CHUNKY_HALFFLOAT=0;

    /** Half-float format, with plane layout.<p>

        The color components are stored in the half-float format,
        i.e. in a 16 bit value, with 5 bit exponent, 10 bit mantissa
        and a sign bit. For multi-channel Bitmaps, the pixel of the
        first color channel are stored consecutively, follow by the
        second channel and so forth.<p>
     */
    const byte	PLANES_HALFFLOAT=1;

    /** IEEE float format, with chunky layout.<p>

        The color components are stored in the IEEE single-precision
        floating point format, i.e. in a 32 bit value, with 8 bit
        exponent, 23 bit mantissa and a sign bit. The bits of each
        value are stored consecutive in memory.<p>
     */
    const byte	CHUNKY_FLOAT=2;

    /** IEEE float format, with plane layout.<p>

        The color components are stored in the IEEE single-precision
        floating point format, i.e. in a 32 bit value, with 8 bit
        exponent, 23 bit mantissa and a sign bit. For multi-channel
        Bitmaps, the pixel of the first color channel are stored
        consecutively, follow by the second channel and so forth.<p>
     */
    const byte	PLANES_FLOAT=3;

    /** IEEE double format, with chunky layout.<p>

        The color components are stored in the IEEE double-precision
        floating point format, i.e. in a 64 bit value, with 16 bit
        exponent, 47 bit mantissa and a sign bit. The bits of each
        value are stored consecutive in memory.<p>
     */
    const byte	CHUNKY_DOUBLE=4;

    /** IEEE double format, with chunky layout.<p>

        The color components are stored in the IEEE double-precision
        floating point format, i.e. in a 64 bit value, with 16 bit
        exponent, 47 bit mantissa and a sign bit. For multi-channel
        Bitmaps, the pixel of the first color channel are stored
        consecutively, follow by the second channel and so forth.<p>
     */
    const byte	PLANES_DOUBLE=5;
};

}; }; }; };

#endif
