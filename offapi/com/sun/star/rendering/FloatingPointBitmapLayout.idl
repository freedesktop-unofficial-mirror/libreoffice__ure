/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 * 
 * Copyright 2008 by Sun Microsystems, Inc.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * $RCSfile: FloatingPointBitmapLayout.idl,v $
 * $Revision: 1.6 $
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_rendering_FloatingPointBitmapLayout_idl__
#define __com_sun_star_rendering_FloatingPointBitmapLayout_idl__

#ifndef __com_sun_star_rendering_Endianness_idl__
#include <com/sun/star/rendering/Endianness.idl>
#endif
#ifndef __com_sun_star_rendering_FloatingPointBitmapFormat_idl__
#include <com/sun/star/rendering/FloatingPointBitmapFormat.idl>
#endif
#ifndef __com_sun_star_rendering_XColorSpace_idl__
#include <com/sun/star/rendering/XColorSpace.idl>
#endif

module com { module sun { module star { module rendering {

/** This structure describes the memory layout of a bitmap having
    floating point color channels.<p>

    This structure collects all necessary information to describe the
    memory layout of a bitmap having floating point color channels<p>

    @since OOo 2.0.0
 */
struct FloatingPointBitmapLayout
{
    /** Number of scanlines for this bitmap.

        This value must not be negative
     */
    long				ScanLines;

    /** Number of data bytes per scanline.

        This value must not be negative
     */
    long 				ScanLineBytes;

    /** Byte offset between the start of two consecutive scanlines.

        This value is permitted to be negative, denoting a bitmap
        whose content is flipped at the x axis.
     */
    long				ScanLineStride;

    /** Byte offset between the start of two consecutive planes.

        This value is permitted to be negative.
     */
    long				PlaneStride;

    /// Color space the bitmap colors shall be interpreted within.
    XColorSpace			ColorSpace;

    /** Number of color components per pixel.

        This value must not be negative
     */
    long			    NumComponents;

    /** Endianness of the pixel values.

        This value must be one of the <type>Endianness</type> constants
     */
    byte			    Endianness;

    /** Format type of this bitmap.<p>

        This value must be one of the
        <type>FloatingPointBitmapFormat</type> constants.<p>
    */
    byte				Format;
};

}; }; }; };

#endif
