/*************************************************************************
 *
 *  $RCSfile: XPolyPolygon2D.idl,v $
 *
 *  $Revision: 1.2 $
 *
 *  last change: $Author: vg $ $Date: 2005-03-10 12:35:19 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/
#ifndef __com_sun_star_rendering_XPolyPolygon2D_idl__
#define __com_sun_star_rendering_XPolyPolygon2D_idl__

#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
#ifndef __com_sun_star_lang_IllegalArgumentException_idl__
#include <com/sun/star/lang/IllegalArgumentException.idl>
#endif 
#ifndef __com_sun_star_rendering_FillRule_idl__
#include <com/sun/star/rendering/FillRule.idl>
#endif
#ifndef __com_sun_star_geometry_RealPoint2D_idl__
#include <com/sun/star/geometry/RealPoint2D.idl>
#endif

module com { module sun { module star { module rendering {

/** Generic interface for poly-polygons in 2D.
 */
interface XPolyPolygon2D : ::com::sun::star::uno::XInterface
{
    /** Add the specified poly-polygon at the given position. 

        One can do symbolic path construction with this method. The
        poly-polygons added by this method are not joined in the sense
        that they participate in mutual fill rule calculations like
        the polygons inside a single poly-polygon do. When rendering
        such a poly-polygon without transparency, it will look like the
        constituing poly-polygons rendered separately on top of
        another. Alas, when rendering with transparency, separate
        rendering will combine the alpha of overlapping areas, whereas
        addPolyPolygon results in constant alpha, regardless how many
        internal poly-polygons overlap at a single place.
     */
    void		addPolyPolygon( [in] ::com::sun::star::geometry::RealPoint2D position, [in] XPolyPolygon2D polyPolygon );

    //-------------------------------------------------------------------------

    /** Query number of polygons inside this poly-polygon
     */
    long		getNumberOfPolygons();

    //-------------------------------------------------------------------------

    /** Query number of points inside given polygon

        @param polygon
        The index of the polygon to query the number of points
        for. Must be in the range [0,getNumberOfPolygons()-1].
     */
    long		getNumberOfPolygonPoints( [in] long polygon )
        raises (com::sun::star::lang::IllegalArgumentException); 

    //-------------------------------------------------------------------------

    /** Query the rule used to determine inside and outside of the
        poly-polygon.
     */
    FillRule	getFillRule();

    //-------------------------------------------------------------------------

    /** Set the rule used to determine inside and outside of the
        poly-polygon.
     */
    void		setFillRule( [in] FillRule fillRule );

    //-------------------------------------------------------------------------

    /** Query whether the specified polygon outline is closed.
     */
    boolean		isClosed( [in] long index )
        raises (com::sun::star::lang::IllegalArgumentException); 

    //-------------------------------------------------------------------------

    /** Set the close state of the specified polygon outline. Use -1
        as the index to affect all polygons of this poly-polygon.
     */
    void		setClosed( [in] long index, [in] boolean closedState )
        raises (com::sun::star::lang::IllegalArgumentException); 
};

}; }; }; };

#endif
