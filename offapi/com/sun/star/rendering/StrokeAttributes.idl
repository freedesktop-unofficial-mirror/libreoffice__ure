/*************************************************************************
 *
 *  $RCSfile: StrokeAttributes.idl,v $
 *
 *  $Revision: 1.2 $
 *
 *  last change: $Author: vg $ $Date: 2005-03-10 12:29:43 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/
#ifndef __com_sun_star_rendering_StrokeAttributes_idl__
#define __com_sun_star_rendering_StrokeAttributes_idl__

#ifndef __com_sun_star_rendering_PathCapType_idl__
#include <com/sun/star/rendering/PathCapType.idl>
#endif
#ifndef __com_sun_star_rendering_PathJoinType_idl__
#include <com/sun/star/rendering/PathJoinType.idl>
#endif


module com { module sun { module star { module rendering {

/** This structure contains all attributes required for path stroking.<p>

    Path stroking is the process of drawing a polygon with a thick
    pen. The various attributes contained in this structure can be
    used to customize that process.<p>

    @single #110496#
 */
struct StrokeAttributes
{
    /** Defines the width of the stroke, measured in user
        coordinate space.
     */	
    double 				StrokeWidth;

    //-------------------------------------------------------------------------

    /** Determines the maximal length of the diagonal in mitered
        corners.<p>

        This attribute is only used when
        <member>StrokeAttributes::JoinType</member> is set to
        <member>PathJoinType::MITER</member>. Should the length of a
        corner's diagonal exceed this limit, a bevelled join is used
        instead.<p>
     */
    double				MiterLimit;

    //-------------------------------------------------------------------------

    /** Array of ink on and off lengths, measured in user coordinate
        space.<p>

        The first element specifies the length of the first 'on'
        segment of the dashing, the second element the length of the
        first 'off' segment, and so forth. Give zero elements here for
        solid strokes. This array always have an even number of
        elements, with zero, as usual, counting as even here.<p>
     */
    sequence<double>	DashArray;

    //-------------------------------------------------------------------------

    /** Array of line widths and spacings for multiple-line
        strokes.<p>

        The entries here are relative to the
        <member>StrokeAttributes::StrokeWidth</member> attribute
        above, i.e. the total width of all lines and spacings will
        always equal
        <member>StrokeAttributes::StrokeWidth</member>. The first
        element specifies the width of the rightmost line, when
        travelling from the start point of the path to the end
        point. The second element specifies the space between the
        first line and the second line, and so forth. If the array
        ends with a spacing, this spacing is included in the total
        width of the multiple-line stroke. That is, the stroke becomes
        asymmetric.<p>
     */	
    sequence<double>	LineArray;

    //-------------------------------------------------------------------------

    /** The start shape of the stroke.<p>

        The start point is the first point of every polygon of the
        path poly-polygon.<p>

        @see <type>PathCapType</type>
     */
    byte				StartCapType;

    //-------------------------------------------------------------------------

    /** The end shape of the stroke.<p>

        The end point is the last point of every polygon of the path
        poly-polygon.<p>

        @see <type>PathCapType</type>
     */
    byte				EndCapType;

    //-------------------------------------------------------------------------

    /** The join shape of the stroke.<p>

        After every sub-stroke, i.e. after every line or curve segment
        within a single path polygon, a shape of this type is inserted
        into the stroke to glue the segments together. Please note
        that distinct polygons within the path poly-polygon are not
        connected, and therefore also not joined via the shape
        specified here.<p>

        @see <type>PathJoinType</type>
     */
    byte				JoinType;

};

}; }; }; };

#endif
