/*************************************************************************
 *
 *  $RCSfile: XParametricPolyPolygon2DFactory.idl,v $
 *
 *  $Revision: 1.3 $
 *
 *  last change: $Author: kz $ $Date: 2005-05-31 16:37:25 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/
#ifndef __com_sun_star_rendering_XParametricPolyPolygon2DFactory_idl__
#define __com_sun_star_rendering_XParametricPolyPolygon2DFactory_idl__

#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
#ifndef __com_sun_star_lang_IllegalArgumentException_idl__
#include <com/sun/star/lang/IllegalArgumentException.idl>
#endif 
#ifndef __com_sun_star_geometry_RealRectangle2D_idl__
#include <com/sun/star/geometry/RealRectangle2D.idl>
#endif
#ifndef __com_sun_star_rendering_XColorSpace_idl__
#include <com/sun/star/rendering/XColorSpace.idl>
#endif


module com { module sun { module star { module rendering {

interface XParametricPolyPolygon2D;

/** This interface provides factory methods to generate various
    ready-made XParametricPolyPolygon2Ds
 */
interface XParametricPolyPolygon2DFactory : ::com::sun::star::uno::XInterface
{
    /** Create a linear gradient.

        The gradient varies linearly between leftColor and rightColor
        in the x direction, and has constant color for fixed x
        coordinate value in y direction
     */
    XParametricPolyPolygon2D	createLinearHorizontalGradient( [in] sequence<ColorComponent> leftColor, [in] sequence<ColorComponent> rightColor )
        raises (com::sun::star::lang::IllegalArgumentException); 

    /** Create an axial gradient.

        The gradient has middleColor in the middle, and varies
        linearly between middleColor and endColor to both sides in the
        x direction. For fixed x coordinate, the gradient has constant
        color value in y direction.
     */
    XParametricPolyPolygon2D	createAxialHorizontalGradient( [in] sequence<ColorComponent> middleColor, [in] sequence<ColorComponent> endColor )
        raises (com::sun::star::lang::IllegalArgumentException); 

    /** Create an elliptical gradient.

        The gradient has centerColor in the middle, and varies
        linearly between center and endColor via concentric ellipses
        around the center point. Note that the absolute size of the
        rectangle given at this method does not matter, only it's
        aspect ratio: if this aspect ratio is 1, the gradient is
        circular. If it's not 1, the gradient is elliptical, with the
        special twist that the aspect ratio is maintained also for the
        center color: the gradient will not collapse into a single
        point, but become a line of center color.
     */
    XParametricPolyPolygon2D	createEllipticalGradient( [in] sequence<ColorComponent> centerColor, [in] sequence<ColorComponent> endColor, [in] ::com::sun::star::geometry::RealRectangle2D boundRect )
        raises (com::sun::star::lang::IllegalArgumentException); 

    /** Create a rectangular gradient.

        The gradient has centerColor in the middle, and varies
        linearly between center and endColor via rectangular boxes
        around the center point. Note that the absolute size of the
        rectangle given at this method does not matter, only it's
        aspect ratio: if this aspect ratio is 1, the gradient is
        quadratic. If it's not 1, the gradient is rectangular, with
        the special twist that the aspect ratio is maintained also for
        the center color: the gradient will not collapse into a single
        point, but become a line of center color.
     */
    XParametricPolyPolygon2D	createRectangularGradient( [in] sequence<ColorComponent> centerColor, [in] sequence<ColorComponent> endColor, [in] ::com::sun::star::geometry::RealRectangle2D boundRect )
        raises (com::sun::star::lang::IllegalArgumentException); 

    /** Create a line hash of vertical lines.

        The hashing consists of vertical lines, with colors varying
        linearly between leftColor and rightColor, when going from
        left to right
     */
    XParametricPolyPolygon2D	createVerticalLinesHatch( [in] sequence<ColorComponent> leftColor, [in] sequence<ColorComponent> rightColor )
        raises (com::sun::star::lang::IllegalArgumentException); 

    /** Create a line hash of orthogonally crossing lines.

        The hashing consists of vertical and horizontal lines, with
        colors varying linearly between leftTopColor and
        rightBottomColor, when going from left to right (for the
        vertical lines) and from top tzo bottom (for the horizontal
        lines).
     */
    XParametricPolyPolygon2D	createOrthogonalLinesHatch( [in] sequence<ColorComponent> leftTopColor, [in] sequence<ColorComponent> rightBottomColor )
        raises (com::sun::star::lang::IllegalArgumentException); 

    /** Create a repeating line hash pattern of three crossing lines.

        The hashing consists of vertical and horizontal lines plus
        diagonal lines from left, top to bottom, right. Each of the
        three groups of lines varies the line color of distinct lines
        linearly from startColor to endColor, starting at the leftmost
        or topmost position.
     */
    XParametricPolyPolygon2D	createThreeCrossingLinesHatch( [in] sequence<ColorComponent> startColor, [in] sequence<ColorComponent> endColor )
        raises (com::sun::star::lang::IllegalArgumentException); 

    /** Create a repeating line hash pattern of four crossing lines.

        The hashing consists of vertical and horizontal lines plus
        diagonal lines in both directions. Each of the four groups of
        lines varies the line color of distinct lines linearly from
        startColor to endColor, starting at the leftmost or topmost
        position.
     */
    XParametricPolyPolygon2D	createFourCrossingLinesHatch( [in] sequence<ColorComponent> startColor, [in] sequence<ColorComponent> endColor )
        raises (com::sun::star::lang::IllegalArgumentException); 
};

//=============================================================================

service ParametricPolyPolygon2DFactory: XParametricPolyPolygon2DFactory;

}; }; }; };

#endif
