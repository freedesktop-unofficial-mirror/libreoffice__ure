/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XCustomSprite.idl,v $
 *
 *  $Revision: 1.3 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-08 02:58:51 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/
#ifndef __com_sun_star_rendering_XCustomSprite_idl__
#define __com_sun_star_rendering_XCustomSprite_idl__

#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
#ifndef __com_sun_star_rendering_ViewState_idl__
#include <com/sun/star/rendering/ViewState.idl>
#endif
#ifndef __com_sun_star_rendering_RenderState_idl__
#include <com/sun/star/rendering/RenderState.idl>
#endif
#ifndef __com_sun_star_rendering_XSprite_idl__
#include <com/sun/star/rendering/XSprite.idl>
#endif

module com { module sun { module star { module rendering {

interface XCanvas;

/** Interface to control a custom sprite object on a XSpriteCanvas.<p>

    Every change performed on XCustomSprite objects is only visible
    after a XSpriteCanvas::updateScreen() call, to facilitate
    synchronized screen updates.

    TODO: Maybe more than alpha has to be overridden from render state.
    TODO: Provide means to change the output area
 */
interface XCustomSprite : XSprite
{

    /** Query a render canvas for this sprite's content.<p>

        Whatever is rendered to this canvas will become visible on the
        screen only after a XSpriteCanvas::updateScreen() call at the
        associated sprite canvas. This canvas is not equivalent to the
        host canvas of the sprite. At the very least, all output
        happens relative to the sprite's upper left corner, i.e. the
        origin of the sprite's canvas device coordinate system will
        move with the sprite across the screen.

        @attention Everytime the XCustomSprite is updated, the content
        canvas must be quried via this method. You are, on the other
        hand, allowed to temporarily store the canvas while rendering
        a single sprite update. You might even store the canvas
        between subsequent calls to getContentCanvas(), but should be
        aware of the fact that the returned interface might be a
        different object everytime.

        @attention Since changes to the sprite content will become
        visible after a XSpriteCanvas::updateScreen(), calls to this
        method must be synchronized externally. Otherwise, the sprite
        content rendered to screen is undefined. This is nothing the
        XCustomSprite can or will manage by itself.

        @return the canvas the sprite content can be rendered into.
     */
    XCanvas getContentCanvas();

};

}; }; }; };

#endif
