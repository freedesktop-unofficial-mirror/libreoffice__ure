/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 * 
 * Copyright 2008 by Sun Microsystems, Inc.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * $RCSfile: XIntegerBitmap.idl,v $
 * $Revision: 1.5 $
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_rendering_XIntegerBitmap_idl__
#define __com_sun_star_rendering_XIntegerBitmap_idl__

#ifndef __com_sun_star_lang_IllegalArgumentException_idl__
#include <com/sun/star/lang/IllegalArgumentException.idl>
#endif 
#ifndef __com_sun_star_lang_IndexOutOfBoundsException_idl__
#include <com/sun/star/lang/IndexOutOfBoundsException.idl>
#endif 
#ifndef __com_sun_star_geometry_IntegerPoint2D_idl__
#include <com/sun/star/geometry/IntegerPoint2D.idl>
#endif
#ifndef __com_sun_star_geometry_IntegerRectangle2D_idl__
#include <com/sun/star/geometry/IntegerRectangle2D.idl>
#endif
#ifndef __com_sun_star_rendering_IntegerBitmapLayout_idl__
#include <com/sun/star/rendering/IntegerBitmapLayout.idl>
#endif
#ifndef __com_sun_star_rendering_XBitmap_idl__
#include <com/sun/star/rendering/XBitmap.idl>
#endif
#ifndef __com_sun_star_rendering_VolatileContentDestroyedException_idl__
#include <com/sun/star/rendering/VolatileContentDestroyedException.idl>
#endif


module com { module sun { module star { module rendering {

interface XBitmapPalette;

/** This is a specialized interface for bitmaps having integer color
    channels.
 */
interface XIntegerBitmap : XBitmap
{		  
    /** Query the raw data of this bitmap.<p>

        Query the raw data of this bitmap, in the format as defined by
        getMemoryLayout(). With the given rectangle, a subset of the
        whole bitmap can be queried. If the internal data format's
        pixel are not integer multiples of bytes (i.e. if one pixel
        occupies less than a byte), the leftover content of the bytes
        at the right of each scanline is filled with zero. When
        querying subsets of the bitmap, the same scanline padding
        takes place as when the whole bitmap is requested.<p>

        Note that the bitmap memory layout might change for volatile
        bitmaps.<p>

        @param bitmapLayout
        The memory layout the returned data is in.

        @param rect
        A rectangle, within the bounds of the bitmap, to retrieve the
        contens from.

        @throws VolatileContentDestroyedException
        if the bitmap is volatile, and the content has been destroyed by the system.

        @throws com::sun::star::lang::IndexOutOfBoundsException
        if parts of the given rectangle are outside the permissible
        bitmap area.
     */
    sequence<byte> 		getData( [out] IntegerBitmapLayout bitmapLayout, [in] ::com::sun::star::geometry::IntegerRectangle2D rect )
        raises (com::sun::star::lang::IndexOutOfBoundsException,
                VolatileContentDestroyedException); 

    //-------------------------------------------------------------------------

    /** Set raw data of a bitmap.

        Set raw data of a bitmap, in the format as defined by
        getMemoryLayout(). With the given rectangle, a subset of the
        bitmap can be changed. If the internal data format's pixel are
        not integer multiples of bytes (i.e. if one pixel occupies
        less than a byte), the leftover content of the bytes at the
        right of each scanline is ignored and left unchanged in the
        bitmap. When setting subsets of the bitmap, the same scanline
        padding takes place as when the whole bitmap is changed.<p>
        
        When setting data on volatile bitmaps, always call isValid()
        before, and retrieve a new memory layout via
        getMemoryLayout(). At least under Windows, the memory layout
        can change for the same bitmap, if the user e.g. switches the
        screen resolution. Thus, this method will throw an
        IllegalArgumentException, if the memory layout changed between
        a call to getMemoryLayout() and setData().

        @param data
        Data to set
        
        @param bitmapLayout
        Layout of the data to set. Must match this bitmap's current
        layout.

        @param rect
        Destination rectangle, within the bounds of the bitmap, to set
        the data in.

        @throws com::sun::star::lang::IndexOutOfBoundsException
        if parts of the given rectangle are outside the permissible
        bitmap area.

        @throws com::sun::star::lang::IllegalArgumentException
        if the given memory layout does not match this bitmap's
        layout, or if the given data sequence has too few or too much
        elements.
     */
    void				setData( [in] sequence<byte> data, [in] IntegerBitmapLayout bitmapLayout, [in] ::com::sun::star::geometry::IntegerRectangle2D rect )
        raises (com::sun::star::lang::IllegalArgumentException,
                com::sun::star::lang::IndexOutOfBoundsException); 

    //-------------------------------------------------------------------------

    /** Set a single pixel of the bitmap with the given color
        value. 

        If the internal data format's pixel are not integer multiples
        of bytes (i.e. if one pixel occupies less than a byte), the
        color value is expected in the least significant bits of the
        single byte given as the color.<p>

        When setting data on volatile bitmaps, always call isValid()
        before, and retrieve a new memory layout via
        getMemoryLayout(). At least under Windows, the memory layout
        can change for the same bitmap, if the user e.g. switches the
        screen resolution. Thus, this method will throw an
        IllegalArgumentException, if the memory layout changed between
        a call to getMemoryLayout() and setPixel().

        @param color
        The color value(s) to set

        @param bitmapLayout
        Layout of the color elements to set. Must match this bitmap's
        current layout.

        @param pos
        Pixel position with the bounds of the bitmap to set.

        @throws com::sun::star::lang::IndexOutOfBoundsException
        if the given point is outside the permissible bitmap area.

        @throws com::sun::star::lang::IllegalArgumentException
        if the given memory layout does not match this bitmap's
        layout, or if the given data sequence has too few or too much
        elements.
     */
    void				setPixel( [in] sequence<byte> color, [in] IntegerBitmapLayout bitmapLayout, [in] ::com::sun::star::geometry::IntegerPoint2D pos )
        raises (com::sun::star::lang::IllegalArgumentException,
                com::sun::star::lang::IndexOutOfBoundsException); 

    //-------------------------------------------------------------------------

    /** Get a single pixel of the bitmap, returning its color
        value. 

        If the internal data format's pixel are not integer multiples
        of bytes (i.e. if one pixel occupies less than a byte), the
        color value is returned in the least significant bits of the
        single byte returned as the color.

        Note that the bitmap memory layout might change for volatile
        bitmaps.<p>

        @param bitmapLayout
        The memory layout the returned data is in.

        @param pos
        A position, within the bounds of the bitmap, to retrieve the
        color from.

        @throws VolatileContentDestroyedException
        if the bitmap is volatile, and the content has been destroyed by the system.

        @throws com::sun::star::lang::IndexOutOfBoundsException
        if the given position is outside the permissible bitmap area.
     */
    sequence<byte>		getPixel( [out] IntegerBitmapLayout bitmapLayout, [in] ::com::sun::star::geometry::IntegerPoint2D pos )
        raises (com::sun::star::lang::IndexOutOfBoundsException,
                VolatileContentDestroyedException); 

    //-------------------------------------------------------------------------

    /** Query the associated palette for this bitmap. 

        Returns empty interface or interface with empty palette for
        non-paletted bitmaps.
     */
    XBitmapPalette		getPalette();

    //-------------------------------------------------------------------------

    /** Query the memory layout for this bitmap.<p>

        Please note that for volatile bitmaps, the memory layout might
        change between subsequent calls.
     */
    IntegerBitmapLayout	getMemoryLayout();
};

}; }; }; };

#endif
