/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XPackage.idl,v $
 *
 *  $Revision: 1.11 $
 *
 *  last change: $Author: vg $ $Date: 2007-01-18 14:51:16 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/

#if ! defined INCLUDED_com_sun_star_deployment_XPackage_idl
#define INCLUDED_com_sun_star_deployment_XPackage_idl

#include <com/sun/star/lang/XComponent.idl>
#include <com/sun/star/task/XAbortChannel.idl>
#include <com/sun/star/util/XModifyBroadcaster.idl>
#include <com/sun/star/ucb/XCommandEnvironment.idl>
#include <com/sun/star/beans/Optional.idl>
#include <com/sun/star/beans/Ambiguous.idl>
#include <com/sun/star/deployment/DeploymentException.idl>
#include <com/sun/star/deployment/XPackageTypeInfo.idl>
#include <com/sun/star/ucb/CommandFailedException.idl>
#include <com/sun/star/ucb/CommandAbortedException.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>


module com { module sun { module star { module deployment {

/** Objects of this interface reflect a bound package and are issued by a
    <type>PackageRegistryBackend</type>.
    
    @since OOo 2.0.0
*/
interface XPackage
{
    /** implemented to notify that the package has been removed
     */
    interface com::sun::star::lang::XComponent;
    
    /** notifies changes of the registration state of the package
     */
    interface com::sun::star::util::XModifyBroadcaster;
    

    /** creates a command channel to be used to asynchronously abort a command.
        
        @return
                abort channel
    */
    com::sun::star::task::XAbortChannel createAbortChannel();
    
    /** checks if the package can be installed.

        Only if the return value is true the package is allowed to be installed.
        In case of false or in case of an exception, the package must be removed
        in completely.
        After return of this function no code from the extension may be used
        anymore, so that the extension can be safely removed from the harddisk.
        
        @param xCmdEnv
               command environment for error handling and other interaction.
        @installed
            signalls if an extension with the same identifyer is already installed.

        @aContextName
            the name of the context of  XPackageManager implementation that is to be used
            to install the extension. Currently we use the names "user" 
            and "shared".

        @return
            true - the package can be installed
            false - the package must not be installed.
     */
    boolean checkPrerequisites(
        [in] com::sun::star::task::XAbortChannel xAbortChannel,
        [in] com::sun::star::ucb::XCommandEnvironment xCmdEnv,
        [in] boolean installed,
        [in] string aContextName)
        raises (DeploymentException,
                com::sun::star::ucb::CommandFailedException,
                com::sun::star::ucb::CommandAbortedException);
  

    /** determines whether the package is currently is registered, i.e.
        whether it is active.
        
        @param xAbortChannel
               abort channel to asynchronously abort the registration process,
               or null
        @param xCmdEnv
               command environment for error and progress handling
        @return
                status whether the package is registered (<TRUE/>, <FALSE/>) or
                the status is ambiguous.  Additionally, a registration status
                may not apply, e.g. in case of an empty package bundle.
    */
    com::sun::star::beans::Optional<
        com::sun::star::beans::Ambiguous<boolean> > isRegistered(
            [in] com::sun::star::task::XAbortChannel xAbortChannel,
            [in] com::sun::star::ucb::XCommandEnvironment xCmdEnv )
        raises (DeploymentException,
                com::sun::star::ucb::CommandFailedException,
                com::sun::star::ucb::CommandAbortedException);
    
    /** registers this <type>XPackage</type>, thus activating the package.

        @param xAbortChannel
               abort channel to asynchronously abort the registration process,
               or null
        @param xCmdEnv
               command environment for error and progress handling
    */
    void registerPackage(
        [in] com::sun::star::task::XAbortChannel xAbortChannel,
        [in] com::sun::star::ucb::XCommandEnvironment xCmdEnv )
        raises (DeploymentException,
                com::sun::star::ucb::CommandFailedException,
                com::sun::star::ucb::CommandAbortedException,
                com::sun::star::lang::IllegalArgumentException);
    
    /** revokes this <type>XPackage</type>.
        
        @param xAbortChannel
               abort channel to asynchronously abort the registration process,
               or null
        @param xCmdEnv
               command environment for error and progress handling
    */
    void revokePackage(
        [in] com::sun::star::task::XAbortChannel xAbortChannel,
        [in] com::sun::star::ucb::XCommandEnvironment xCmdEnv )
        raises (DeploymentException,
                com::sun::star::ucb::CommandFailedException,
                com::sun::star::ucb::CommandAbortedException,
                com::sun::star::lang::IllegalArgumentException);
    
    /** reflects whether this package is a bundle of one or more packages,
        e.g. a zip (legacy) package file or a document hosting script packages.
        
        @return
                in case this package relfects a package bundle
    */
    boolean isBundle();
    
    /** Gets packages of the bundle.

        @param xAbortChannel
               abort channel to asynchronously abort the registration process,
               or null
        @param xCmdEnv
               command environment for error and progress handling
        @return
                set of packages enclosed in this package
    */
    sequence<XPackage> getBundle(
        [in] com::sun::star::task::XAbortChannel xAbortChannel,
        [in] com::sun::star::ucb::XCommandEnvironment xCmdEnv )
        raises (DeploymentException,
                com::sun::star::ucb::CommandFailedException,
                com::sun::star::ucb::CommandAbortedException,
                com::sun::star::lang::IllegalArgumentException);
    
    /** returns the file name of the package.

        @return
                file name of the package
    */
    string getName();

    /** returns the unique extension identifier.

        @return
                the extension identifier (a
        <code>"org.openoffice.legacy."</code> one if the extension does not
        explicitly specify one), or an empty <code>Optional</code> if this
        package does not represent an extension
    */
    com::sun::star::beans::Optional<string> getIdentifier();

    /** returns the textual version representation of the package.

        A textual version representation is a finite string following the
        BNF<br/>
        version ::= [element ("." element)*]<br/>
        element ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+

        @return
                the textual version representation
    */
    string getVersion();
    
    /** returns the location of the package.
        
        @return
                location of package
    */
    string getURL();
    
    /** returns the display name of the package, e.g. for graphical user
        interfaces (GUI).
        
        @return
                display name of the package
    */
    string getDisplayName();
    
    /** returns a description string to describe the  package.
        
        @return
                description
    */
    string getDescription();

    /** returns a sequence of update information URLs.

        The sequence may be empty in case no update information is available.
        If the sequence contains more than one URL, the extra URLs must mirror
        the information available at the first URL.

        @return
                update information URLs
    */
    sequence<string> getUpdateInformationURLs();
    
    /** returns the <type>XPackageTypeInfo</type>, e.g. media-type etc.
        
        @return
                media type of package
    */
    XPackageTypeInfo getPackageType();
    
    /** exports package to given destination URL.
        
        @param destFolderURL
               package destination folder URL, must be UCB conform
        @param newTitle
               new package name
        @param nameClashAction
               one of <type scope="com::sun::star::ucb">NameClash</type>
        @param xCmdEnv
               command environment for error and progress handling
    */
    void exportTo( [in] string destFolderURL,
                   [in] string newTitle,
                   [in] long nameClashAction,
                   [in] com::sun::star::ucb::XCommandEnvironment xCmdEnv )
        raises (com::sun::star::ucb::CommandFailedException,
                com::sun::star::ucb::CommandAbortedException);
};

}; }; }; };

#endif
