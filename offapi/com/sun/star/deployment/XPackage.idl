/*************************************************************************
 *
 *  $RCSfile: XPackage.idl,v $
 *
 *  $Revision: 1.3 $
 *
 *  last change: $Author: kz $ $Date: 2004-06-11 11:50:28 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/

#if ! defined INCLUDED_com_sun_star_deployment_XPackage_idl
#define INCLUDED_com_sun_star_deployment_XPackage_idl

#include <com/sun/star/lang/XComponent.idl>
#include <com/sun/star/task/XAbortChannel.idl>
#include <com/sun/star/util/XModifyBroadcaster.idl>
#include <com/sun/star/awt/XBitmap.idl>
#include <com/sun/star/ucb/XCommandEnvironment.idl>
#include <com/sun/star/beans/UnknownPropertyException.idl>
#include <com/sun/star/deployment/DeploymentException.idl>
#include <com/sun/star/ucb/CommandFailedException.idl>
#include <com/sun/star/ucb/CommandAbortedException.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>


module com { module sun { module star { module deployment {

/** Objects of this service reflect a bound package and are issued by a
    <type>PackageRegistryBackend</type>.
    
    @since #i20304#
*/
interface XPackage
{
    /** implemented to notify that the package has been removed
     */
    interface com::sun::star::lang::XComponent;
    
    /** notifies changes of the registration state of the package
     */
    interface com::sun::star::util::XModifyBroadcaster;
    
    /** creates a command channel to be used to asynchronously abort a command.
        
        @return
                abort channel
    */
    com::sun::star::task::XAbortChannel createAbortChannel();
    
    /** determines whether the package is currently is registered, i.e.
        whether it is active.
        This method throws an
        <type scope="com::sun::star::beans">UnknownPropertyException</type>
        if this status is unknown.
        
        @param xAbortChannel
               abort channel to asynchronously abort the registration process,
               or null
        @param xCmdEnv
               command environment for error and progress handling
        @return
                status whether the package is registered (<TRUE/>) or not
                (<FALSE/>)
    */
    boolean isRegistered(
        [in] com::sun::star::task::XAbortChannel xAbortChannel,
        [in] com::sun::star::ucb::XCommandEnvironment xCmdEnv )
        raises (DeploymentException,
                com::sun::star::ucb::CommandFailedException,
                com::sun::star::ucb::CommandAbortedException,
                com::sun::star::beans::UnknownPropertyException);
    
    /** registers this <type>Package</type>, thus activating the package.

        @param xAbortChannel
               abort channel to asynchronously abort the registration process,
               or null
        @param xCmdEnv
               command environment for error and progress handling
    */
    void registerPackage(
        [in] com::sun::star::task::XAbortChannel xAbortChannel,
        [in] com::sun::star::ucb::XCommandEnvironment xCmdEnv )
        raises (DeploymentException,
                com::sun::star::ucb::CommandFailedException,
                com::sun::star::ucb::CommandAbortedException,
                com::sun::star::lang::IllegalArgumentException);
    
    /** revokes this <type>Package</type>.
        
        @param xAbortChannel
               abort channel to asynchronously abort the registration process,
               or null
        @param xCmdEnv
               command environment for error and progress handling
    */
    void revokePackage(
        [in] com::sun::star::task::XAbortChannel xAbortChannel,
        [in] com::sun::star::ucb::XCommandEnvironment xCmdEnv )
        raises (DeploymentException,
                com::sun::star::ucb::CommandFailedException,
                com::sun::star::ucb::CommandAbortedException,
                com::sun::star::lang::IllegalArgumentException);
    
    /** reflects whether this package is a bundle of one or more packages,
        e.g. a zip (legacy) package file or a document hosting script packages.
        
        @return
                in case this package relfects a package bundle
    */
    boolean isBundle();
    
    /** Gets packages of the bundle.

        @param xAbortChannel
               abort channel to asynchronously abort the registration process,
               or null
        @param xCmdEnv
               command environment for error and progress handling
        @return
                set of packages enclosed in this package
    */
    sequence<XPackage> getBundle(
        [in] com::sun::star::task::XAbortChannel xAbortChannel,
        [in] com::sun::star::ucb::XCommandEnvironment xCmdEnv )
        raises (DeploymentException,
                com::sun::star::ucb::CommandFailedException,
                com::sun::star::ucb::CommandAbortedException,
                com::sun::star::lang::IllegalArgumentException);
    
    /** returns the name of the package, i.e. the unique name of the package
        correspondiung to its deployment context (user, shared, ...).
        
        @return
                name of the package
     */
    string getName();
    
    /** returns the media type of the package, e.g.
        <code>application/vnd.sun.star.basic-script</code>.

        @return
                media type of package
    */
    string getMediaType();
    
    /** returns the location of the package.

        @return
                location of package
    */
    string getURL();
    
    /** returns the display name of the package, e.g. for graphical user
        interfaces (GUI).

        @return
                display name of the package
    */
    string getDisplayName();
    
    /** returns a description string to describe the package.

        @return
                description
    */
    string getDescription();
    
    /** returns a bitmap id for this package type.
        
        @param highContrast
               return high contrast icon
        @param smallIcon
               return a small icon (e.g. 16x16 pixel),
               else return a big one (e.g. 26x26 pixel)
        @return
                unsigned short (resource id), string id or
                <type scope="com::sun::star::awt">XBitmap</type>,
                <VOID/> any if unknown
    */
    any getIcon( [in] boolean highContrast, [in] boolean smallIcon );
};

}; }; }; };

#endif
