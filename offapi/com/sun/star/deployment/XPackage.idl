/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XPackage.idl,v $
 *
 *  $Revision: 1.7 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-07 22:58:22 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/

#if ! defined INCLUDED_com_sun_star_deployment_XPackage_idl
#define INCLUDED_com_sun_star_deployment_XPackage_idl

#include <com/sun/star/lang/XComponent.idl>
#include <com/sun/star/task/XAbortChannel.idl>
#include <com/sun/star/util/XModifyBroadcaster.idl>
#include <com/sun/star/ucb/XCommandEnvironment.idl>
#include <com/sun/star/beans/Optional.idl>
#include <com/sun/star/beans/Ambiguous.idl>
#include <com/sun/star/deployment/DeploymentException.idl>
#include <com/sun/star/deployment/XPackageTypeInfo.idl>
#include <com/sun/star/ucb/CommandFailedException.idl>
#include <com/sun/star/ucb/CommandAbortedException.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>


module com { module sun { module star { module deployment {

/** Objects of this interface reflect a bound package and are issued by a
    <type>PackageRegistryBackend</type>.
    
    @since OOo 2.0.0
*/
interface XPackage
{
    /** implemented to notify that the package has been removed
     */
    interface com::sun::star::lang::XComponent;
    
    /** notifies changes of the registration state of the package
     */
    interface com::sun::star::util::XModifyBroadcaster;
    
    /** creates a command channel to be used to asynchronously abort a command.
        
        @return
                abort channel
    */
    com::sun::star::task::XAbortChannel createAbortChannel();
    
    /** determines whether the package is currently is registered, i.e.
        whether it is active.
        
        @param xAbortChannel
               abort channel to asynchronously abort the registration process,
               or null
        @param xCmdEnv
               command environment for error and progress handling
        @return
                status whether the package is registered (<TRUE/>, <FALSE/>) or
                the status is ambiguous.  Additionally, a registration status
                may not apply, e.g. in case of an empty package bundle.
    */
    com::sun::star::beans::Optional<
        com::sun::star::beans::Ambiguous<boolean> > isRegistered(
            [in] com::sun::star::task::XAbortChannel xAbortChannel,
            [in] com::sun::star::ucb::XCommandEnvironment xCmdEnv )
        raises (DeploymentException,
                com::sun::star::ucb::CommandFailedException,
                com::sun::star::ucb::CommandAbortedException);
    
    /** registers this <type>XPackage</type>, thus activating the package.

        @param xAbortChannel
               abort channel to asynchronously abort the registration process,
               or null
        @param xCmdEnv
               command environment for error and progress handling
    */
    void registerPackage(
        [in] com::sun::star::task::XAbortChannel xAbortChannel,
        [in] com::sun::star::ucb::XCommandEnvironment xCmdEnv )
        raises (DeploymentException,
                com::sun::star::ucb::CommandFailedException,
                com::sun::star::ucb::CommandAbortedException,
                com::sun::star::lang::IllegalArgumentException);
    
    /** revokes this <type>XPackage</type>.
        
        @param xAbortChannel
               abort channel to asynchronously abort the registration process,
               or null
        @param xCmdEnv
               command environment for error and progress handling
    */
    void revokePackage(
        [in] com::sun::star::task::XAbortChannel xAbortChannel,
        [in] com::sun::star::ucb::XCommandEnvironment xCmdEnv )
        raises (DeploymentException,
                com::sun::star::ucb::CommandFailedException,
                com::sun::star::ucb::CommandAbortedException,
                com::sun::star::lang::IllegalArgumentException);
    
    /** reflects whether this package is a bundle of one or more packages,
        e.g. a zip (legacy) package file or a document hosting script packages.
        
        @return
                in case this package relfects a package bundle
    */
    boolean isBundle();
    
    /** Gets packages of the bundle.

        @param xAbortChannel
               abort channel to asynchronously abort the registration process,
               or null
        @param xCmdEnv
               command environment for error and progress handling
        @return
                set of packages enclosed in this package
    */
    sequence<XPackage> getBundle(
        [in] com::sun::star::task::XAbortChannel xAbortChannel,
        [in] com::sun::star::ucb::XCommandEnvironment xCmdEnv )
        raises (DeploymentException,
                com::sun::star::ucb::CommandFailedException,
                com::sun::star::ucb::CommandAbortedException,
                com::sun::star::lang::IllegalArgumentException);
    
    /** returns the name of the package, i.e. the unique name of the package
        correspondiung to its deployment context (user, shared, ...).
        
        @return
                name of the package
    */
    string getName();
    
    /** returns the location of the package.
        
        @return
                location of package
    */
    string getURL();
    
    /** returns the display name of the package, e.g. for graphical user
        interfaces (GUI).
        
        @return
                display name of the package
    */
    string getDisplayName();
    
    /** returns a description string to describe the  package.
        
        @return
                description
    */
    string getDescription();
    
    /** returns the <type>XPackageTypeInfo</type>, e.g. media-type etc.
        
        @return
                media type of package
    */
    XPackageTypeInfo getPackageType();
    
    /** exports package to given destination URL.
        
        @param destFolderURL
               package destination folder URL, must be UCB conform
        @param newTitle
               new package name
        @param nameClashAction
               one of <type scope="com::sun::star::ucb">NameClash</type>
        @param xCmdEnv
               command environment for error and progress handling
    */
    void exportTo( [in] string destFolderURL,
                   [in] string newTitle,
                   [in] long nameClashAction,
                   [in] com::sun::star::ucb::XCommandEnvironment xCmdEnv )
        raises (com::sun::star::ucb::CommandFailedException,
                com::sun::star::ucb::CommandAbortedException);
};

}; }; }; };

#endif
