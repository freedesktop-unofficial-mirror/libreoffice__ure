/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 * 
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_task_XJob_idl__
#define __com_sun_star_task_XJob_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

#ifndef __com_sun_star_beans_NamedValue_idl__
#include <com/sun/star/beans/NamedValue.idl>
#endif

#ifndef __com_sun_star_lang_IllegalArgumentException_idl__
#include <com/sun/star/lang/IllegalArgumentException.idl>
#endif

//============================================================================

module com {  module sun {  module star {  module task {

//=============================================================================
/** specifies a job which is to be executed synchronously

    <p>
    Instead of <type>XAsyncJob</type> the implementation of this interface
    will be executed synchronously everytimes. That means: they can be shure that the
    current stack context will be blocked till this job finish it's work.
    </p>

    @see XAsyncJob
*/
published interface XJob : com::sun::star::uno::XInterface
{
    //------------------------------------------------------------------------
    /** executes the job synchronously

        @param Arguments
            are arguments for executing the job. Their semantics is completely implementation dependent. Usually,
            a concrete implementation of a job specifies in its service descriptions which parameters are allowed
            (or expected). This values are persistent by the configuration of the <type>JobExecutor</type>
            which use this synchronous job. It's possible to write it back by use special protocol
            in return value.

        @return
            the result of the job. The concrete semantics is service-dependent.
            But it should be possible to
            <ul>
                <li>deregister the job</li>
                <li>let him registered although execution was successfully(!)</li>
                <li>make some job specific data persistent inside the job configuration which
                    is provided by the executor.</li>
            </ul>

        @throws com::sun::star::lang::IllegalArgumentException
            if some of given arguments doesn't fill out the service specification or
            was corrupt so the service couldn't work correctly

        @throws com::sun::star::uno::Exception
            to notify the excutor about faild operation; otherwise the return value
            indicates a successfull finishing.
    */
    any execute(
        [in] sequence< com::sun::star::beans::NamedValue > Arguments )
            raises( com::sun::star::lang::IllegalArgumentException ,
                    com::sun::star::uno::Exception                 );
};

}; }; }; };

#endif
