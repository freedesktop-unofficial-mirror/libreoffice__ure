/*************************************************************************
 *
 *  $RCSfile: JobExecutor.idl,v $
 *
 *  $Revision: 1.3 $
 *
 *  last change: $Author: mi $ $Date: 2002-12-10 16:14:17 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/

#ifndef __com_sun_star_task_JobExecutor_idl__
#define __com_sun_star_task_JobExecutor_idl__

#ifndef __com_sun_star_task_XJobExecutor_idl__
#include <com/sun/star/task/XJobExecutor.idl>
#endif

//============================================================================

module com { module sun { module star { module task {

//============================================================================
/** generic job execution service

    <p>
    Can start registered uno services on triggered events and handle there
    own configuration and there lifetime. Such events are simple strings
    wich meaning doesn't matter for any real service implementation of this
    specification. But triggered events must be available inside the
    configuration and some <type>XJob</type>s must be registered for that.
    It's possible to start it synchronously (<type>XJob</type>) or asynchronously
    (<type>XAsyncJob</type>). But in general it's forbidden to use any UI inside
    synchronous one. That can be the source of many trouble and will be forbidden.
    </p>

    <p>
    A neccessary configuration of such job executor must support follow functionality:
    <ul>
        <li>Same Job should be able to register for more then one event</li>
        <li>It must be possible to provide a place for job specific configuration data,
            so the jobs doesn't be forced to use her own config implementation.
            That's neccessary to perform whole operation because most possible events
            can be occure during startup of an application. And configuration access
            shouldn't make it slow. And one part of job interfaces is initialization
            of it with her own config data.</li>
        <li>It must be possible to configure if a job wish to be started synchronous
            or not.</li>
    </ul>
    </p>

    <p>
    Further it must be possible to deregister a successfully runned job.
    </p>

    @see Job
 */
service JobExecutor
{
    //------------------------------------------------------------------------
    /** start and regulate execution
     */
    interface com::sun::star::task::XJobExecutor;
};

}; }; }; };

#endif
