/*************************************************************************
 *
 *  $RCSfile: XLinguServiceManager.idl,v $
 *
 *  $Revision: 1.7 $
 *
 *  last change: $Author: tl $ $Date: 2001-03-28 11:22:47 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/
#ifndef __com_sun_star_linguistic2_XLinguServiceManager_idl__
#define __com_sun_star_linguistic2_XLinguServiceManager_idl__


#ifndef __com_sun_star_linguistic2_XSpellChecker_idl__
#include <com/sun/star/linguistic2/XSpellChecker.idl>
#endif

#ifndef __com_sun_star_linguistic2_XHyphenator_idl__
#include <com/sun/star/linguistic2/XHyphenator.idl>
#endif

#ifndef __com_sun_star_linguistic2_XThesaurus_idl__
#include <com/sun/star/linguistic2/XThesaurus.idl>
#endif

#ifndef __com_sun_star_lang_XEventListener_idl__
#include <com/sun/star/lang/XEventListener.idl>
#endif

//=============================================================================

module com { module sun { module star { module linguistic2 {

//=============================================================================
/** the basic interface to be used to access linguistic functionality.

    <P>This interface is used to access spellchecker, hyphenator and thesaurus
    functionality.
    Additionaly it can be queries what implementations of those services are
    availbale (for specific languages or in general).
    It can be selected and queried which of those implementations should
    be used for a specific language.</P>

    <P>
    For spellchecking and thesaurus the order in the list defines the order
    of creation/usage of those services.
    That is if if the first spellchecker implementation does not recognize
    the given word as correct the second service implementation for that
    language is created and gets queries. If that one fails the third one gets
    created and queried and so on.
    This chain stops if an implementation reports the word as correct or the
    end of the list is reached in which case the word is reported as incorrect.
    </P>

    <P> For the thesaurus the behaviour is the same when no meaning was found.
    </P>

    @see	com::sun::star::linguistic2::SpellChecker
    @see	com::sun::star::linguistic2::Hyphenator
    @see	com::sun::star::linguistic2::Thesaurus

*/
interface XLinguServiceManager : com::sun::star::uno::XInterface
{
    //-------------------------------------------------------------------------
    /**
        @returns
            the <type scope="com::sun::star::linguistic2">XSpellChecker</type>
            interface to be used for spellchecking.
    */
    com::sun::star::linguistic2::XSpellChecker	getSpellChecker();

    //-------------------------------------------------------------------------
    /**
        @returns
            the <type scope="com::sun::star::linguistic2">XHyphenator</type>
            interface to be used for hyphenation.
    */
    com::sun::star::linguistic2::XHyphenator	getHyphenator();

    //-------------------------------------------------------------------------
    /**
        @returns
            the <type scope="com::sun::star::linguistic2">XThesaurus</type>
            interface to be used for thesaurus functionality.
    */
    com::sun::star::linguistic2::XThesaurus		getThesaurus();

    //-------------------------------------------------------------------------
    /** adds a listener to the list of event listeners.

        <P>The listeners may support one or both of
        <type scope="com::sun::star::linguistic2">XDictionaryEventListener</type>
        or
        <type scope="com::sun::star::linguistic2">XLinguServiceEventListener</type>
        interface(s).
        </P>

        @returns
            </TRUE> if the listener was succesfully aded, </FALSE> otherwise.

        @param xListener
            the listener to be added.
    */
    boolean		addLinguServiceManagerListener(
        [in] com::sun::star::lang::XEventListener xListener );

    //-------------------------------------------------------------------------
    /** removes a listener to the list of event listeners.

        @returns
            </TRUE> if the listener was succesfully removed,
            </FALSE> otherwise.

        @param xListener
            the listener to be removed.
    */
    boolean		removeLinguServiceManagerListener(
        [in] com::sun::star::lang::XEventListener xListener );

    //-------------------------------------------------------------------------
    /**
        @returns
            the list of implementation names of the available services.

        @param aServiceName
            the name of the service to get the list of available
            implementations for.

        @param aLocale
            the language for which to query the list of available
            implementations for.
    */
    sequence< string >	getAvailableServices(
        [in] string 						aServiceName,
        [in] com::sun::star::lang::Locale 	aLocale );

    //-------------------------------------------------------------------------
    /** set the list of service implementations to be used for a
        given service and language.

        @param aServiceName
            the name of the service to set the list of implementations
            to be used for.

        @param aLocale
            the language to set the list for.

        @param aServiceImplNames
            the name of the service to set the list for.
    */
    void				setConfiguredServices(
        [in] string 						aServiceName,
        [in] com::sun::star::lang::Locale 	aLocale,
        [in] sequence< string > 			aServiceImplNames );

    //-------------------------------------------------------------------------
    /** query the list of service implementations to be used for a
        given service and language.

        @returns
            the list of implementation names of the services to be used

        @param aServiceName
            the name of the service to get queried for.

        @param aLocale
            the language to get queried for.
    */
    sequence< string >	getConfiguredServices(
        [in] string 						aServiceName,
        [in] com::sun::star::lang::Locale 	aLocale );

};

//=============================================================================

}; }; }; };

#endif
