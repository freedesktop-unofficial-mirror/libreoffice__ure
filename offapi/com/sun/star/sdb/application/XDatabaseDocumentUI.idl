/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: XDatabaseDocumentUI.idl,v $
 *
 *  $Revision: 1.4 $
 *
 *  last change: $Author: kz $ $Date: 2008-03-06 16:57:46 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/

#ifndef __com_sun_star_sdb_application_XDatabaseDocumentUI_idl__
#define __com_sun_star_sdb_application_XDatabaseDocumentUI_idl__

#ifndef __com_sun_star_sdbc_XDataSource_idl__ 
#include <com/sun/star/sdbc/XDataSource.idl>
#endif
#ifndef __com_sun_star_sdbc_SQLException_idl__ 
#include <com/sun/star/sdbc/SQLException.idl>
#endif
#ifndef __com_sun_star_sdbc_XConnection_idl__ 
#include <com/sun/star/sdbc/XConnection.idl>
#endif
#ifndef __com_sun_star_awt_XWindow_idl__ 
#include <com/sun/star/awt/XWindow.idl>
#endif

//=============================================================================

module com { module sun { module star { module sdb { module application { 

//=============================================================================

/** provides access to the user interface of a database document

    <p>This interface is available when a database document has been loaded into
    a frame, at the controller of this frame.</p>

    @see com::sun::star::frame::Controller
    @see com::sun::star::sdb::DatabaseDocument

    @since OOo 2.2.0
 */
interface XDatabaseDocumentUI
{
    /** provides access to the data source belong to the database document
    */
    [attribute, readonly] com::sun::star::sdbc::XDataSource DataSource;

    /** provides access to the applicatio's main window

        <p>Note that reading this atttribute is equivalent to querying the component
        for the <type scope="com::sun::star::frame">XController</type> interface,
        asking the controller for its frame, and asking this frame for its
        container window.</p>

        @see ::com::sun::star::frame::XController
        @see ::com::sun::star::frame::XFrame
    */
    [attribute, readonly] com::sun::star::awt::XWindow ApplicationMainWindow;

    /** provides access to the current connection of the application

        <p>Note that the connection returned here is really the working connection
        of the application. Clients should not misuse it, in particular, closing
        the connection can yield unexpected results and should definately be
        avoided. If you need a separate connection to the data source, use
        <member scope="com::sun::star::sdbc">XDataSource::getConnection</member>.</p>
    */
    [attribute, readonly] com::sun::star::sdbc::XConnection ActiveConnection;

    /** determines whether the application is currently connected to the database
    */
    boolean isConnected();

    /** lets the application connect to the database

        <p>If the application is already connected, nothing happens. If it is not
        connected, the application will try to establish a connection by using
        <member scope="com::sun::star::sdbc">XDataSource::getConnection</member>
        with the current settings, as specified in the
        <member scope="com::sun::star::sdb">DataSource::Settings</member> member.</p>

        <p>If the connection cannot be established, the respective error message is shown
        in the application window.</p>

        @return
            whether or not the connection attempt was successful, i.e. whether or not
            a subsequent call to <member>isConnected</member> would return <TRUE/>.
    */
    boolean connect();

    /** contains all sub components of the database document

        <p>During working with the database, the user might open different sub components:
        forms, reports, tables, queries. Those components are tracked by the application,
        and provided in this attribute.</p>

        <p>The components here might either be documents (<type scope="com::sun::star::frame">XModel</type>),
        controllers (<type scope="com::sun::star::frame">XController</type>), or frames
        (<type scope="com::sun::star::frame">XFrame</type>).

        @since OOo 3.0
    */
    [attribute, readonly] sequence< ::com::sun::star::lang::XComponent >
            SubComponents;

    /** closes all sub components of the database document.

        <p>During working with the database, the user might open different sub components:
        forms, reports, tables, queries. If you need to close all those documents, use
        <code>closeSubComponents</code>, which will gracefully do this.</p>

        <p>In a first step, the sub components will be suspended
        (<member scope="com::sun::star::frame">XController::suspend</member>). There
        are basically two reasons why suspending a single sub component can fail: The
        user might veto it (she's asked if the document is currently modified), and
        the component might be uncloseable currently, e.g. due to an open modal
        dialog, or a long-lasting operation running currently (e.g. printing).</p>

        <p>Once all sub components have been suspended, they will, in a second step,
        be closed. Again, closing might be vetoed by other instances, e.g. by a close
        listener registered at the component.</p>

        @return
            <TRUE/> if and only if both suspending and closing all sub components succeeds.

        @since OOo 3.0
    */
    boolean closeSubComponents();
};

//=============================================================================

}; }; }; }; }; 

//=============================================================================

#endif

