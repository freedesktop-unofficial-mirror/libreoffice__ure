/*************************************************************************
 *
 *  OpenOffice.org - a multi-platform office productivity suite
 *
 *  $RCSfile: QueryDesign.idl,v $
 *
 *  $Revision: 1.7 $
 *
 *  last change: $Author: rt $ $Date: 2005-09-08 03:21:28 $
 *
 *  The Contents of this file are made available subject to
 *  the terms of GNU Lesser General Public License Version 2.1.
 *
 *
 *    GNU Lesser General Public License Version 2.1
 *    =============================================
 *    Copyright 2005 by Sun Microsystems, Inc.
 *    901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License version 2.1, as published by the Free Software Foundation.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 ************************************************************************/
#ifndef __com_sun_star_sdb_QueryDesign_idl__ 
#define __com_sun_star_sdb_QueryDesign_idl__ 

#ifndef __com_sun_star_frame_XController_idl__ 
#include <com/sun/star/frame/XController.idl>
#endif
#ifndef __com_sun_star_lang_XInitialization_idl__ 
#include <com/sun/star/lang/XInitialization.idl>
#endif
#ifndef __com_sun_star_frame_XDispatchProvider_idl__ 
#include <com/sun/star/frame/XDispatchProvider.idl>
#endif
#ifndef __com_sun_star_form_FormController_idl__ 
#include <com/sun/star/form/FormController.idl>
#endif

module com {  module sun {  module star {  module sdb { 

//============================================================================= 
/** implements a component which allows the creation of SQL statements.

    <p>This service implements a user interface for creating SQL statements either through a graphical design
    interface or simply to enter the SQL statement directly.</p>

    <p>The design view of the QueryDesign is divided into two parts. The first part contains the table windows 
    where columns can be selected for the SQL statement. The second part contains the columns which should appear 
    in the selection of the SQL statement or criterias which narrow the query.</p>

    @see com::sun::star::sdb::ContentLoader
*/

published service QueryDesign
{
    /** allows the component to be plugged into frames.
    */
    interface com::sun::star::frame::XController;

    /** is used to initialize the QueryDesign.
        
        <p>Parameters (passed to the method 
        <member scope="com::sun::star::lang">XInitialization::initialize</member>)
        have to be instances of <type scope="com::sun::star::beans">PropertyValue</type>, where the
        <member scope="com::sun::star::beans">PropertyValue::Name</member> member specifies what the parameter controls,
        with the <member scope="com::sun::star::beans">PropertyValue::Value</member> member containing the value
        to be used.<br>
        Recognized parameters are:
        <ul>
            <li margin-top="8px"><b>Frame</b><br>
            has to be an <type scope="com::sun::star::frame">XFrame</type> interface specifying the frame to plug the
            QueryDesign component into.<br/>
            This parameter is mandatory.
            </li>

            <li margin-top="8px"><a name="data_source"/><b>DataSourceName</b><br>
            The name of the globally registered <type>DataSource</type> for which a query or view
            is to be designed.<br/>
            The DataSourceName may be omitted if and only if a valid <a href="#active_connection">ActiveConnection</a>
            parameter is present.
            </li>

            <li margin-top="8px"><a name="active_connection"/><b>ActiveConnection</b><br>
            The connection to work with.<br/>
            May be ommitted if and only if a valid <a href="#data_source">DataSourceName</a> parameter is supplied.
            </li>

            <li margin-top="8px"><b>CurrentQuery</b><br>
            If the component should be used to design an existing query, it's name has to be specified as CurrentQuery
            parameter.<br/>
            If the <a href="#data_source">DataSourceName</a> parameter is present, the query is looked up
            in the specified data source. If <a href="#data_source">DataSourceName</a> is not present, the component
            tries to determine the data source which the <a href="#active_connection">ActiveConnection</a> belongs
            to, and looks up the query there.<br/>
            If this parameter is not present, a new query will be designed.<br/>
            This parameter is ignored if <a href="#independent">IndependentSQLCommand</a> is set to <TRUE/>.
            </li>

            <li margin-top="8px"><b>QueryDesignView</b><br>
            This value indicates if the QueryDesign should be opened in the design view or in the text view.
            If set to </TRUE> than the design view will be displayed otherwise the text view will appear.<br/>
            If not present, <FALSE/> is assumed for this parameter.
            </li>

            <li margin-top="8px"><b>CreateView</b><br/>
            Indicates whether the component should be used to create a server-side view in the database (set to <TRUE/>),
            or a client-side query in the data source. There are some differences in both modi, e.g. the component closes
            itself when a view is being saved, since a view cannot be modified after creation.<br/>
            If not present, <FALSE/> is assumed for this parameter.<br/>
            This parameter is ignored if <a href="#independent">IndependentSQLCommand</a> is set to <TRUE/>.
            </li>

            <li margin-top="8px"><a name=independent"/><b>IndependentSQLCommand</b><br/>
            Allows to use the component to design an SQL command which is neither to be stored as server-side view,
            nor as a client-side query. Instead, when the user attempts to save the designed SQL statement,
            the <member>ActiveCommand</member> property of the component is updated. Whoever invoked the
            query design with IndependentSQLCommand being <TRUE/> is then responsible for listening at this property,
            and reacting appropriately on its changes.<br/>
            If not present, <FALSE/> is assumed for this parameter.
            </li>
        </ul>
        </p>
    */
    interface com::sun::star::lang::XInitialization;

    /** reflects the designed SQL command at the moment it was last saved by the user.
    */
    [readonly, property] string ActiveCommand;
};
 
//============================================================================= 
}; }; }; }; 
 
#endif
