/*************************************************************************
 *
 *  $RCSfile: XColumn.idl,v $
 *
 *  $Revision: 1.3 $
 *
 *  last change: $Author: mi $ $Date: 2000-11-08 12:43:31 $
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************/
#ifndef __com_sun_star_sdb_XColumn_idl__ 
#define __com_sun_star_sdb_XColumn_idl__ 
 
#ifndef __com_sun_star_uno_XInterface_idl__ 
#include <com/sun/star/uno/XInterface.idl> 
#endif 
 
#ifndef __com_sun_star_sdbc_SQLException_idl__ 
#include <com/sun/star/sdbc/SQLException.idl> 
#endif 
 
#ifndef __com_sun_star_util_Date_idl__ 
#include <com/sun/star/util/Date.idl> 
#endif 
 
#ifndef __com_sun_star_util_DateTime_idl__ 
#include <com/sun/star/util/DateTime.idl> 
#endif 
 
#ifndef __com_sun_star_util_Time_idl__ 
#include <com/sun/star/util/Time.idl> 
#endif 
 
 module com {  module sun {  module star {  module io { 
interface XInputStream; 
};};};}; 
 
 module com {  module sun {  module star {  module container { 
interface XNameAccess; 
};};};}; 
 
 module com {  module sun {  module star {  module sdbc { 
interface XRef; 
interface XArray; 
interface XBlob; 
interface XClob; 
};};};}; 
 
 module com {  module sun {  module star {  module sdb { 
 
 
// DocMerge from xml: interface com::sun::star::io::com::sun::star::container::com::sun::star::sdbc::com::sun::star::sdb::XColumn
/** is used to access data which is collected in a row.
 */
[ uik(186AF2E0-9C2E-11d3-9ED30050-04D8BBD0), ident("XColumn", 1.0) ]
interface XColumn: com::sun::star::uno::XInterface
{ 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::container::com::sun::star::sdbc::com::sun::star::sdb::XColumn::wasNull
    /** reports whether the last column read had a value of SQL NULL.
        Note that you must first call getXXX on a column to try to read
        its value and then call wasNull() to see if the value read was
        SQL NULL.
     */
    boolean wasNull() raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::container::com::sun::star::sdbc::com::sun::star::sdb::XColumn::getString
    /** gets the value of a column in the current row as a String.
     */
    string getString() raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::container::com::sun::star::sdbc::com::sun::star::sdb::XColumn::getBoolean
    /** gets the value of a column in the current row as boolean.
     */
    boolean getBoolean() raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::container::com::sun::star::sdbc::com::sun::star::sdb::XColumn::getByte
    /** gets the value of a column in the current row as a byte.
     */
    byte getByte() raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::container::com::sun::star::sdbc::com::sun::star::sdb::XColumn::getShort
    /** gets the value of a column in the current row as a short.
     */
    short getShort() raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::container::com::sun::star::sdbc::com::sun::star::sdb::XColumn::getInt
    /** gets the value of a column in the current row as a long.
     */
    long getInt() raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::container::com::sun::star::sdbc::com::sun::star::sdb::XColumn::getLong
    /** gets the value of a column in the current row as a hyper.
     */
    hyper getLong() raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::container::com::sun::star::sdbc::com::sun::star::sdb::XColumn::getFloat
    /** gets the value of a column in the current row as a float.
     */
    float getFloat() raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::container::com::sun::star::sdbc::com::sun::star::sdb::XColumn::getDouble
    /** gets the value of a column in the current row as a double.
     */
    double getDouble() raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from idl: method com::sun::star::io::com::sun::star::container::com::sun::star::sdbc::com::sun::star::sdb::XColumn::getBytes
    /** gets the value of a column in the current row as a byte array. 
             The bytes represent the raw values returned by the driver. 
             @returns 
                the column value; if the value is SQL NULL, the result is empty. 
             @throws com::sun::star::sdbc::SQLException 
                if a database access error occurs.
     */
    sequence<byte> getBytes() raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::container::com::sun::star::sdbc::com::sun::star::sdb::XColumn::getDate
    /** gets the value of a column in the current row as a date object.
     */
    com::sun::star::util::Date getDate() 
        raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::container::com::sun::star::sdbc::com::sun::star::sdb::XColumn::getTime
    /** gets the value of a column in the current row as a time object.
     */
    com::sun::star::util::Time getTime() 
        raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::container::com::sun::star::sdbc::com::sun::star::sdb::XColumn::getTimestamp
    /** gets the value of a column in the current row as a datetime object.
     */
    com::sun::star::util::DateTime getTimestamp() 
        raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::container::com::sun::star::sdbc::com::sun::star::sdb::XColumn::getBinaryStream
    /** gets the value of a column in the current row as a stream of
        uninterpreted bytes. The value can then be read in chunks from the
        stream. This method is particularly suitable for retrieving large
        LONGVARBINARY or LONGVARCHAR values.
        
        
        <p>
        <b>Note:</b> All the data in the returned stream must be
        read prior to getting the value of any other column. The next
        call to a get method implicitly closes the stream. Also, a
        stream may return 0 when the method <code>available</code>
        is called whether there is data
        available or not.
        </p>
     */
    com::sun::star::io::XInputStream getBinaryStream() 
        raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::container::com::sun::star::sdbc::com::sun::star::sdb::XColumn::getCharacterStream
    /** gets the value of a column in the current row as a stream of
        uninterpreted bytes. The value can then be read in chunks from the
        stream. This method is particularly suitable for retrieving large
        LONGVARCHAR values.
        
        
        <p>
        <b>Note:</b> All the data in the returned stream must be
        read prior to getting the value of any other column. The next
        call to a get method implicitly closes the stream. Also, a
        stream may return 0 when the method <code>available</code>
        is called whether there is data
        available or not.
        </p>
     */
    com::sun::star::io::XInputStream getCharacterStream() 
        raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::container::com::sun::star::sdbc::com::sun::star::sdb::XColumn::getObject
    /** returns the value of a column in the current row as an object.
        This method uses the given <code>Map</code> object
        for the custom mapping of the SQL structure or distinct type
        that is being retrieved.
     */
    any getObject([in]com::sun::star::container::XNameAccess typeMap) 
        raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::container::com::sun::star::sdbc::com::sun::star::sdb::XColumn::getRef
    /** gets a REF(&amp;lt;structured-type&amp;gt;) column value from the current row.
     */
    com::sun::star::sdbc::XRef getRef() raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::container::com::sun::star::sdbc::com::sun::star::sdb::XColumn::getBlob
    /** gets a BLOB (Binary Large OBject) value in the current row.
     */
    com::sun::star::sdbc::XBlob getBlob() raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::container::com::sun::star::sdbc::com::sun::star::sdb::XColumn::getClob
    /** gets a CLOB value in the current row of this <code>ResultSet</code> object.
     */
    com::sun::star::sdbc::XClob getClob() raises (com::sun::star::sdbc::SQLException); 
    //------------------------------------------------------------------------- 
     
    // DocMerge from xml: method com::sun::star::io::com::sun::star::container::com::sun::star::sdbc::com::sun::star::sdb::XColumn::getArray
    /** gets a SQL ARRAY value from the current row.
     */
    com::sun::star::sdbc::XArray getArray() raises (com::sun::star::sdbc::SQLException); 
}; 
 
//============================================================================= 
 
}; }; }; }; 
 
/*=========================================================================== 
    $Log: not supported by cvs2svn $
    Revision 1.1.1.1  2000/09/18 23:35:37  hjs
    initial import
    
    Revision 1.5  2000/09/11 11:52:40  mi
    documentation merged from XML
     
    Revision 1.3  1999/12/20 16:32:44  dg 
    #70278# files removed and new doc 
     
    Revision 1.2  1999/11/24 10:52:39  dg 
    chk package 
 
    Revision 1.1  1999/11/24 08:39:02  dg 
    new Star Data Beans 
 
===========================================================================*/ 
#endif 
